//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace OpenDental.MobileWeb {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MobileSoap", Namespace="http://opendental.com/")]
    public partial class Mobile : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ServiceExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerNumOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsPaidCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteObjectsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAllRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchPatientsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchAppointmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchPrescriptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchProvidersOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchPharmaciesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMobileWebUserPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPracticeTitleOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPreferenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientPortalAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchLabPanelsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchLabResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchMedicationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchMedicationPatsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchAllergiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchAllergyDefsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchDiseasesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchDiseaseDefsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchICD9sOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchStatementsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchRecallsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePatientsRecordsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Mobile() {
            this.Url = global::OpenDental.Properties.Settings.Default.OpenDental_MobileWeb_Mobile;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ServiceExistsCompletedEventHandler ServiceExistsCompleted;
        
        /// <remarks/>
        public event GetCustomerNumCompletedEventHandler GetCustomerNumCompleted;
        
        /// <remarks/>
        public event IsPaidCustomerCompletedEventHandler IsPaidCustomerCompleted;
        
        /// <remarks/>
        public event DeleteObjectsCompletedEventHandler DeleteObjectsCompleted;
        
        /// <remarks/>
        public event DeleteAllRecordsCompletedEventHandler DeleteAllRecordsCompleted;
        
        /// <remarks/>
        public event SynchPatientsCompletedEventHandler SynchPatientsCompleted;
        
        /// <remarks/>
        public event SynchAppointmentsCompletedEventHandler SynchAppointmentsCompleted;
        
        /// <remarks/>
        public event SynchPrescriptionsCompletedEventHandler SynchPrescriptionsCompleted;
        
        /// <remarks/>
        public event SynchProvidersCompletedEventHandler SynchProvidersCompleted;
        
        /// <remarks/>
        public event SynchPharmaciesCompletedEventHandler SynchPharmaciesCompleted;
        
        /// <remarks/>
        public event GetUserNameCompletedEventHandler GetUserNameCompleted;
        
        /// <remarks/>
        public event SetMobileWebUserPasswordCompletedEventHandler SetMobileWebUserPasswordCompleted;
        
        /// <remarks/>
        public event SetPracticeTitleCompletedEventHandler SetPracticeTitleCompleted;
        
        /// <remarks/>
        public event SetPreferenceCompletedEventHandler SetPreferenceCompleted;
        
        /// <remarks/>
        public event GetPatientPortalAddressCompletedEventHandler GetPatientPortalAddressCompleted;
        
        /// <remarks/>
        public event SynchLabPanelsCompletedEventHandler SynchLabPanelsCompleted;
        
        /// <remarks/>
        public event SynchLabResultsCompletedEventHandler SynchLabResultsCompleted;
        
        /// <remarks/>
        public event SynchMedicationsCompletedEventHandler SynchMedicationsCompleted;
        
        /// <remarks/>
        public event SynchMedicationPatsCompletedEventHandler SynchMedicationPatsCompleted;
        
        /// <remarks/>
        public event SynchAllergiesCompletedEventHandler SynchAllergiesCompleted;
        
        /// <remarks/>
        public event SynchAllergyDefsCompletedEventHandler SynchAllergyDefsCompleted;
        
        /// <remarks/>
        public event SynchDiseasesCompletedEventHandler SynchDiseasesCompleted;
        
        /// <remarks/>
        public event SynchDiseaseDefsCompletedEventHandler SynchDiseaseDefsCompleted;
        
        /// <remarks/>
        public event SynchICD9sCompletedEventHandler SynchICD9sCompleted;
        
        /// <remarks/>
        public event SynchStatementsCompletedEventHandler SynchStatementsCompleted;
        
        /// <remarks/>
        public event SynchDocumentsCompletedEventHandler SynchDocumentsCompleted;
        
        /// <remarks/>
        public event SynchRecallsCompletedEventHandler SynchRecallsCompleted;
        
        /// <remarks/>
        public event DeletePatientsRecordsCompletedEventHandler DeletePatientsRecordsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/ServiceExists", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ServiceExists() {
            object[] results = this.Invoke("ServiceExists", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ServiceExistsAsync() {
            this.ServiceExistsAsync(null);
        }
        
        /// <remarks/>
        public void ServiceExistsAsync(object userState) {
            if ((this.ServiceExistsOperationCompleted == null)) {
                this.ServiceExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceExistsOperationCompleted);
            }
            this.InvokeAsync("ServiceExists", new object[0], this.ServiceExistsOperationCompleted, userState);
        }
        
        private void OnServiceExistsOperationCompleted(object arg) {
            if ((this.ServiceExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServiceExistsCompleted(this, new ServiceExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/GetCustomerNum", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetCustomerNum(string RegistrationKeyFromDentalOffice) {
            object[] results = this.Invoke("GetCustomerNum", new object[] {
                        RegistrationKeyFromDentalOffice});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerNumAsync(string RegistrationKeyFromDentalOffice) {
            this.GetCustomerNumAsync(RegistrationKeyFromDentalOffice, null);
        }
        
        /// <remarks/>
        public void GetCustomerNumAsync(string RegistrationKeyFromDentalOffice, object userState) {
            if ((this.GetCustomerNumOperationCompleted == null)) {
                this.GetCustomerNumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerNumOperationCompleted);
            }
            this.InvokeAsync("GetCustomerNum", new object[] {
                        RegistrationKeyFromDentalOffice}, this.GetCustomerNumOperationCompleted, userState);
        }
        
        private void OnGetCustomerNumOperationCompleted(object arg) {
            if ((this.GetCustomerNumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerNumCompleted(this, new GetCustomerNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/IsPaidCustomer", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsPaidCustomer(string RegistrationKey) {
            object[] results = this.Invoke("IsPaidCustomer", new object[] {
                        RegistrationKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsPaidCustomerAsync(string RegistrationKey) {
            this.IsPaidCustomerAsync(RegistrationKey, null);
        }
        
        /// <remarks/>
        public void IsPaidCustomerAsync(string RegistrationKey, object userState) {
            if ((this.IsPaidCustomerOperationCompleted == null)) {
                this.IsPaidCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPaidCustomerOperationCompleted);
            }
            this.InvokeAsync("IsPaidCustomer", new object[] {
                        RegistrationKey}, this.IsPaidCustomerOperationCompleted, userState);
        }
        
        private void OnIsPaidCustomerOperationCompleted(object arg) {
            if ((this.IsPaidCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsPaidCustomerCompleted(this, new IsPaidCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/DeleteObjects", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteObjects(string RegistrationKey, OpenDentBusiness.DeletedObject[] dOList) {
            this.Invoke("DeleteObjects", new object[] {
                        RegistrationKey,
                        dOList});
        }
        
        /// <remarks/>
        public void DeleteObjectsAsync(string RegistrationKey, OpenDentBusiness.DeletedObject[] dOList) {
            this.DeleteObjectsAsync(RegistrationKey, dOList, null);
        }
        
        /// <remarks/>
        public void DeleteObjectsAsync(string RegistrationKey, OpenDentBusiness.DeletedObject[] dOList, object userState) {
            if ((this.DeleteObjectsOperationCompleted == null)) {
                this.DeleteObjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteObjectsOperationCompleted);
            }
            this.InvokeAsync("DeleteObjects", new object[] {
                        RegistrationKey,
                        dOList}, this.DeleteObjectsOperationCompleted, userState);
        }
        
        private void OnDeleteObjectsOperationCompleted(object arg) {
            if ((this.DeleteObjectsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteObjectsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/DeleteAllRecords", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAllRecords(string RegistrationKey) {
            this.Invoke("DeleteAllRecords", new object[] {
                        RegistrationKey});
        }
        
        /// <remarks/>
        public void DeleteAllRecordsAsync(string RegistrationKey) {
            this.DeleteAllRecordsAsync(RegistrationKey, null);
        }
        
        /// <remarks/>
        public void DeleteAllRecordsAsync(string RegistrationKey, object userState) {
            if ((this.DeleteAllRecordsOperationCompleted == null)) {
                this.DeleteAllRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAllRecordsOperationCompleted);
            }
            this.InvokeAsync("DeleteAllRecords", new object[] {
                        RegistrationKey}, this.DeleteAllRecordsOperationCompleted, userState);
        }
        
        private void OnDeleteAllRecordsOperationCompleted(object arg) {
            if ((this.DeleteAllRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAllRecordsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchPatients", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchPatients(string RegistrationKey, OpenDentBusiness.Mobile.Patientm[] patientmList) {
            this.Invoke("SynchPatients", new object[] {
                        RegistrationKey,
                        patientmList});
        }
        
        /// <remarks/>
        public void SynchPatientsAsync(string RegistrationKey, OpenDentBusiness.Mobile.Patientm[] patientmList) {
            this.SynchPatientsAsync(RegistrationKey, patientmList, null);
        }
        
        /// <remarks/>
        public void SynchPatientsAsync(string RegistrationKey, OpenDentBusiness.Mobile.Patientm[] patientmList, object userState) {
            if ((this.SynchPatientsOperationCompleted == null)) {
                this.SynchPatientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchPatientsOperationCompleted);
            }
            this.InvokeAsync("SynchPatients", new object[] {
                        RegistrationKey,
                        patientmList}, this.SynchPatientsOperationCompleted, userState);
        }
        
        private void OnSynchPatientsOperationCompleted(object arg) {
            if ((this.SynchPatientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchPatientsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchAppointments", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchAppointments(string RegistrationKey, OpenDentBusiness.Mobile.Appointmentm[] appointmentList) {
            this.Invoke("SynchAppointments", new object[] {
                        RegistrationKey,
                        appointmentList});
        }
        
        /// <remarks/>
        public void SynchAppointmentsAsync(string RegistrationKey, OpenDentBusiness.Mobile.Appointmentm[] appointmentList) {
            this.SynchAppointmentsAsync(RegistrationKey, appointmentList, null);
        }
        
        /// <remarks/>
        public void SynchAppointmentsAsync(string RegistrationKey, OpenDentBusiness.Mobile.Appointmentm[] appointmentList, object userState) {
            if ((this.SynchAppointmentsOperationCompleted == null)) {
                this.SynchAppointmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchAppointmentsOperationCompleted);
            }
            this.InvokeAsync("SynchAppointments", new object[] {
                        RegistrationKey,
                        appointmentList}, this.SynchAppointmentsOperationCompleted, userState);
        }
        
        private void OnSynchAppointmentsOperationCompleted(object arg) {
            if ((this.SynchAppointmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchAppointmentsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchPrescriptions", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchPrescriptions(string RegistrationKey, OpenDentBusiness.Mobile.RxPatm[] rxList) {
            this.Invoke("SynchPrescriptions", new object[] {
                        RegistrationKey,
                        rxList});
        }
        
        /// <remarks/>
        public void SynchPrescriptionsAsync(string RegistrationKey, OpenDentBusiness.Mobile.RxPatm[] rxList) {
            this.SynchPrescriptionsAsync(RegistrationKey, rxList, null);
        }
        
        /// <remarks/>
        public void SynchPrescriptionsAsync(string RegistrationKey, OpenDentBusiness.Mobile.RxPatm[] rxList, object userState) {
            if ((this.SynchPrescriptionsOperationCompleted == null)) {
                this.SynchPrescriptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchPrescriptionsOperationCompleted);
            }
            this.InvokeAsync("SynchPrescriptions", new object[] {
                        RegistrationKey,
                        rxList}, this.SynchPrescriptionsOperationCompleted, userState);
        }
        
        private void OnSynchPrescriptionsOperationCompleted(object arg) {
            if ((this.SynchPrescriptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchPrescriptionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchProviders", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchProviders(string RegistrationKey, OpenDentBusiness.Mobile.Providerm[] providerList) {
            this.Invoke("SynchProviders", new object[] {
                        RegistrationKey,
                        providerList});
        }
        
        /// <remarks/>
        public void SynchProvidersAsync(string RegistrationKey, OpenDentBusiness.Mobile.Providerm[] providerList) {
            this.SynchProvidersAsync(RegistrationKey, providerList, null);
        }
        
        /// <remarks/>
        public void SynchProvidersAsync(string RegistrationKey, OpenDentBusiness.Mobile.Providerm[] providerList, object userState) {
            if ((this.SynchProvidersOperationCompleted == null)) {
                this.SynchProvidersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchProvidersOperationCompleted);
            }
            this.InvokeAsync("SynchProviders", new object[] {
                        RegistrationKey,
                        providerList}, this.SynchProvidersOperationCompleted, userState);
        }
        
        private void OnSynchProvidersOperationCompleted(object arg) {
            if ((this.SynchProvidersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchProvidersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchPharmacies", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchPharmacies(string RegistrationKey, OpenDentBusiness.Mobile.Pharmacym[] pharmacyList) {
            this.Invoke("SynchPharmacies", new object[] {
                        RegistrationKey,
                        pharmacyList});
        }
        
        /// <remarks/>
        public void SynchPharmaciesAsync(string RegistrationKey, OpenDentBusiness.Mobile.Pharmacym[] pharmacyList) {
            this.SynchPharmaciesAsync(RegistrationKey, pharmacyList, null);
        }
        
        /// <remarks/>
        public void SynchPharmaciesAsync(string RegistrationKey, OpenDentBusiness.Mobile.Pharmacym[] pharmacyList, object userState) {
            if ((this.SynchPharmaciesOperationCompleted == null)) {
                this.SynchPharmaciesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchPharmaciesOperationCompleted);
            }
            this.InvokeAsync("SynchPharmacies", new object[] {
                        RegistrationKey,
                        pharmacyList}, this.SynchPharmaciesOperationCompleted, userState);
        }
        
        private void OnSynchPharmaciesOperationCompleted(object arg) {
            if ((this.SynchPharmaciesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchPharmaciesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/GetUserName", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserName(string RegistrationKey) {
            object[] results = this.Invoke("GetUserName", new object[] {
                        RegistrationKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserNameAsync(string RegistrationKey) {
            this.GetUserNameAsync(RegistrationKey, null);
        }
        
        /// <remarks/>
        public void GetUserNameAsync(string RegistrationKey, object userState) {
            if ((this.GetUserNameOperationCompleted == null)) {
                this.GetUserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserNameOperationCompleted);
            }
            this.InvokeAsync("GetUserName", new object[] {
                        RegistrationKey}, this.GetUserNameOperationCompleted, userState);
        }
        
        private void OnGetUserNameOperationCompleted(object arg) {
            if ((this.GetUserNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserNameCompleted(this, new GetUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SetMobileWebUserPassword", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetMobileWebUserPassword(string RegistrationKey, string UserName, string Password) {
            this.Invoke("SetMobileWebUserPassword", new object[] {
                        RegistrationKey,
                        UserName,
                        Password});
        }
        
        /// <remarks/>
        public void SetMobileWebUserPasswordAsync(string RegistrationKey, string UserName, string Password) {
            this.SetMobileWebUserPasswordAsync(RegistrationKey, UserName, Password, null);
        }
        
        /// <remarks/>
        public void SetMobileWebUserPasswordAsync(string RegistrationKey, string UserName, string Password, object userState) {
            if ((this.SetMobileWebUserPasswordOperationCompleted == null)) {
                this.SetMobileWebUserPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMobileWebUserPasswordOperationCompleted);
            }
            this.InvokeAsync("SetMobileWebUserPassword", new object[] {
                        RegistrationKey,
                        UserName,
                        Password}, this.SetMobileWebUserPasswordOperationCompleted, userState);
        }
        
        private void OnSetMobileWebUserPasswordOperationCompleted(object arg) {
            if ((this.SetMobileWebUserPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMobileWebUserPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SetPracticeTitle", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetPracticeTitle(string RegistrationKey, string PracticeTitle) {
            this.Invoke("SetPracticeTitle", new object[] {
                        RegistrationKey,
                        PracticeTitle});
        }
        
        /// <remarks/>
        public void SetPracticeTitleAsync(string RegistrationKey, string PracticeTitle) {
            this.SetPracticeTitleAsync(RegistrationKey, PracticeTitle, null);
        }
        
        /// <remarks/>
        public void SetPracticeTitleAsync(string RegistrationKey, string PracticeTitle, object userState) {
            if ((this.SetPracticeTitleOperationCompleted == null)) {
                this.SetPracticeTitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPracticeTitleOperationCompleted);
            }
            this.InvokeAsync("SetPracticeTitle", new object[] {
                        RegistrationKey,
                        PracticeTitle}, this.SetPracticeTitleOperationCompleted, userState);
        }
        
        private void OnSetPracticeTitleOperationCompleted(object arg) {
            if ((this.SetPracticeTitleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPracticeTitleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SetPreference", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetPreference(string RegistrationKey, OpenDentBusiness.Mobile.Prefm prefm) {
            this.Invoke("SetPreference", new object[] {
                        RegistrationKey,
                        prefm});
        }
        
        /// <remarks/>
        public void SetPreferenceAsync(string RegistrationKey, OpenDentBusiness.Mobile.Prefm prefm) {
            this.SetPreferenceAsync(RegistrationKey, prefm, null);
        }
        
        /// <remarks/>
        public void SetPreferenceAsync(string RegistrationKey, OpenDentBusiness.Mobile.Prefm prefm, object userState) {
            if ((this.SetPreferenceOperationCompleted == null)) {
                this.SetPreferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPreferenceOperationCompleted);
            }
            this.InvokeAsync("SetPreference", new object[] {
                        RegistrationKey,
                        prefm}, this.SetPreferenceOperationCompleted, userState);
        }
        
        private void OnSetPreferenceOperationCompleted(object arg) {
            if ((this.SetPreferenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPreferenceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/GetPatientPortalAddress", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPatientPortalAddress(string RegistrationKey) {
            object[] results = this.Invoke("GetPatientPortalAddress", new object[] {
                        RegistrationKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPatientPortalAddressAsync(string RegistrationKey) {
            this.GetPatientPortalAddressAsync(RegistrationKey, null);
        }
        
        /// <remarks/>
        public void GetPatientPortalAddressAsync(string RegistrationKey, object userState) {
            if ((this.GetPatientPortalAddressOperationCompleted == null)) {
                this.GetPatientPortalAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientPortalAddressOperationCompleted);
            }
            this.InvokeAsync("GetPatientPortalAddress", new object[] {
                        RegistrationKey}, this.GetPatientPortalAddressOperationCompleted, userState);
        }
        
        private void OnGetPatientPortalAddressOperationCompleted(object arg) {
            if ((this.GetPatientPortalAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientPortalAddressCompleted(this, new GetPatientPortalAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchLabPanels", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchLabPanels(string RegistrationKey, OpenDentBusiness.Mobile.LabPanelm[] labPanelmList) {
            this.Invoke("SynchLabPanels", new object[] {
                        RegistrationKey,
                        labPanelmList});
        }
        
        /// <remarks/>
        public void SynchLabPanelsAsync(string RegistrationKey, OpenDentBusiness.Mobile.LabPanelm[] labPanelmList) {
            this.SynchLabPanelsAsync(RegistrationKey, labPanelmList, null);
        }
        
        /// <remarks/>
        public void SynchLabPanelsAsync(string RegistrationKey, OpenDentBusiness.Mobile.LabPanelm[] labPanelmList, object userState) {
            if ((this.SynchLabPanelsOperationCompleted == null)) {
                this.SynchLabPanelsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchLabPanelsOperationCompleted);
            }
            this.InvokeAsync("SynchLabPanels", new object[] {
                        RegistrationKey,
                        labPanelmList}, this.SynchLabPanelsOperationCompleted, userState);
        }
        
        private void OnSynchLabPanelsOperationCompleted(object arg) {
            if ((this.SynchLabPanelsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchLabPanelsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchLabResults", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchLabResults(string RegistrationKey, OpenDentBusiness.Mobile.LabResultm[] labResultmList) {
            this.Invoke("SynchLabResults", new object[] {
                        RegistrationKey,
                        labResultmList});
        }
        
        /// <remarks/>
        public void SynchLabResultsAsync(string RegistrationKey, OpenDentBusiness.Mobile.LabResultm[] labResultmList) {
            this.SynchLabResultsAsync(RegistrationKey, labResultmList, null);
        }
        
        /// <remarks/>
        public void SynchLabResultsAsync(string RegistrationKey, OpenDentBusiness.Mobile.LabResultm[] labResultmList, object userState) {
            if ((this.SynchLabResultsOperationCompleted == null)) {
                this.SynchLabResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchLabResultsOperationCompleted);
            }
            this.InvokeAsync("SynchLabResults", new object[] {
                        RegistrationKey,
                        labResultmList}, this.SynchLabResultsOperationCompleted, userState);
        }
        
        private void OnSynchLabResultsOperationCompleted(object arg) {
            if ((this.SynchLabResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchLabResultsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchMedications", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchMedications(string RegistrationKey, OpenDentBusiness.Mobile.Medicationm[] medicationmList) {
            this.Invoke("SynchMedications", new object[] {
                        RegistrationKey,
                        medicationmList});
        }
        
        /// <remarks/>
        public void SynchMedicationsAsync(string RegistrationKey, OpenDentBusiness.Mobile.Medicationm[] medicationmList) {
            this.SynchMedicationsAsync(RegistrationKey, medicationmList, null);
        }
        
        /// <remarks/>
        public void SynchMedicationsAsync(string RegistrationKey, OpenDentBusiness.Mobile.Medicationm[] medicationmList, object userState) {
            if ((this.SynchMedicationsOperationCompleted == null)) {
                this.SynchMedicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchMedicationsOperationCompleted);
            }
            this.InvokeAsync("SynchMedications", new object[] {
                        RegistrationKey,
                        medicationmList}, this.SynchMedicationsOperationCompleted, userState);
        }
        
        private void OnSynchMedicationsOperationCompleted(object arg) {
            if ((this.SynchMedicationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchMedicationsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchMedicationPats", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchMedicationPats(string RegistrationKey, OpenDentBusiness.Mobile.MedicationPatm[] medicationPatList) {
            this.Invoke("SynchMedicationPats", new object[] {
                        RegistrationKey,
                        medicationPatList});
        }
        
        /// <remarks/>
        public void SynchMedicationPatsAsync(string RegistrationKey, OpenDentBusiness.Mobile.MedicationPatm[] medicationPatList) {
            this.SynchMedicationPatsAsync(RegistrationKey, medicationPatList, null);
        }
        
        /// <remarks/>
        public void SynchMedicationPatsAsync(string RegistrationKey, OpenDentBusiness.Mobile.MedicationPatm[] medicationPatList, object userState) {
            if ((this.SynchMedicationPatsOperationCompleted == null)) {
                this.SynchMedicationPatsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchMedicationPatsOperationCompleted);
            }
            this.InvokeAsync("SynchMedicationPats", new object[] {
                        RegistrationKey,
                        medicationPatList}, this.SynchMedicationPatsOperationCompleted, userState);
        }
        
        private void OnSynchMedicationPatsOperationCompleted(object arg) {
            if ((this.SynchMedicationPatsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchMedicationPatsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchAllergies", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchAllergies(string RegistrationKey, OpenDentBusiness.Mobile.Allergym[] allergyList) {
            this.Invoke("SynchAllergies", new object[] {
                        RegistrationKey,
                        allergyList});
        }
        
        /// <remarks/>
        public void SynchAllergiesAsync(string RegistrationKey, OpenDentBusiness.Mobile.Allergym[] allergyList) {
            this.SynchAllergiesAsync(RegistrationKey, allergyList, null);
        }
        
        /// <remarks/>
        public void SynchAllergiesAsync(string RegistrationKey, OpenDentBusiness.Mobile.Allergym[] allergyList, object userState) {
            if ((this.SynchAllergiesOperationCompleted == null)) {
                this.SynchAllergiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchAllergiesOperationCompleted);
            }
            this.InvokeAsync("SynchAllergies", new object[] {
                        RegistrationKey,
                        allergyList}, this.SynchAllergiesOperationCompleted, userState);
        }
        
        private void OnSynchAllergiesOperationCompleted(object arg) {
            if ((this.SynchAllergiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchAllergiesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchAllergyDefs", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchAllergyDefs(string RegistrationKey, OpenDentBusiness.Mobile.AllergyDefm[] allergyDefList) {
            this.Invoke("SynchAllergyDefs", new object[] {
                        RegistrationKey,
                        allergyDefList});
        }
        
        /// <remarks/>
        public void SynchAllergyDefsAsync(string RegistrationKey, OpenDentBusiness.Mobile.AllergyDefm[] allergyDefList) {
            this.SynchAllergyDefsAsync(RegistrationKey, allergyDefList, null);
        }
        
        /// <remarks/>
        public void SynchAllergyDefsAsync(string RegistrationKey, OpenDentBusiness.Mobile.AllergyDefm[] allergyDefList, object userState) {
            if ((this.SynchAllergyDefsOperationCompleted == null)) {
                this.SynchAllergyDefsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchAllergyDefsOperationCompleted);
            }
            this.InvokeAsync("SynchAllergyDefs", new object[] {
                        RegistrationKey,
                        allergyDefList}, this.SynchAllergyDefsOperationCompleted, userState);
        }
        
        private void OnSynchAllergyDefsOperationCompleted(object arg) {
            if ((this.SynchAllergyDefsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchAllergyDefsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchDiseases", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchDiseases(string RegistrationKey, OpenDentBusiness.Mobile.Diseasem[] diseaseList) {
            this.Invoke("SynchDiseases", new object[] {
                        RegistrationKey,
                        diseaseList});
        }
        
        /// <remarks/>
        public void SynchDiseasesAsync(string RegistrationKey, OpenDentBusiness.Mobile.Diseasem[] diseaseList) {
            this.SynchDiseasesAsync(RegistrationKey, diseaseList, null);
        }
        
        /// <remarks/>
        public void SynchDiseasesAsync(string RegistrationKey, OpenDentBusiness.Mobile.Diseasem[] diseaseList, object userState) {
            if ((this.SynchDiseasesOperationCompleted == null)) {
                this.SynchDiseasesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchDiseasesOperationCompleted);
            }
            this.InvokeAsync("SynchDiseases", new object[] {
                        RegistrationKey,
                        diseaseList}, this.SynchDiseasesOperationCompleted, userState);
        }
        
        private void OnSynchDiseasesOperationCompleted(object arg) {
            if ((this.SynchDiseasesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchDiseasesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchDiseaseDefs", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchDiseaseDefs(string RegistrationKey, OpenDentBusiness.Mobile.DiseaseDefm[] diseaseDefList) {
            this.Invoke("SynchDiseaseDefs", new object[] {
                        RegistrationKey,
                        diseaseDefList});
        }
        
        /// <remarks/>
        public void SynchDiseaseDefsAsync(string RegistrationKey, OpenDentBusiness.Mobile.DiseaseDefm[] diseaseDefList) {
            this.SynchDiseaseDefsAsync(RegistrationKey, diseaseDefList, null);
        }
        
        /// <remarks/>
        public void SynchDiseaseDefsAsync(string RegistrationKey, OpenDentBusiness.Mobile.DiseaseDefm[] diseaseDefList, object userState) {
            if ((this.SynchDiseaseDefsOperationCompleted == null)) {
                this.SynchDiseaseDefsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchDiseaseDefsOperationCompleted);
            }
            this.InvokeAsync("SynchDiseaseDefs", new object[] {
                        RegistrationKey,
                        diseaseDefList}, this.SynchDiseaseDefsOperationCompleted, userState);
        }
        
        private void OnSynchDiseaseDefsOperationCompleted(object arg) {
            if ((this.SynchDiseaseDefsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchDiseaseDefsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchICD9s", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchICD9s(string RegistrationKey, OpenDentBusiness.Mobile.ICD9m[] icd9List) {
            this.Invoke("SynchICD9s", new object[] {
                        RegistrationKey,
                        icd9List});
        }
        
        /// <remarks/>
        public void SynchICD9sAsync(string RegistrationKey, OpenDentBusiness.Mobile.ICD9m[] icd9List) {
            this.SynchICD9sAsync(RegistrationKey, icd9List, null);
        }
        
        /// <remarks/>
        public void SynchICD9sAsync(string RegistrationKey, OpenDentBusiness.Mobile.ICD9m[] icd9List, object userState) {
            if ((this.SynchICD9sOperationCompleted == null)) {
                this.SynchICD9sOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchICD9sOperationCompleted);
            }
            this.InvokeAsync("SynchICD9s", new object[] {
                        RegistrationKey,
                        icd9List}, this.SynchICD9sOperationCompleted, userState);
        }
        
        private void OnSynchICD9sOperationCompleted(object arg) {
            if ((this.SynchICD9sCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchICD9sCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchStatements", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchStatements(string RegistrationKey, OpenDentBusiness.Mobile.Statementm[] statementList) {
            this.Invoke("SynchStatements", new object[] {
                        RegistrationKey,
                        statementList});
        }
        
        /// <remarks/>
        public void SynchStatementsAsync(string RegistrationKey, OpenDentBusiness.Mobile.Statementm[] statementList) {
            this.SynchStatementsAsync(RegistrationKey, statementList, null);
        }
        
        /// <remarks/>
        public void SynchStatementsAsync(string RegistrationKey, OpenDentBusiness.Mobile.Statementm[] statementList, object userState) {
            if ((this.SynchStatementsOperationCompleted == null)) {
                this.SynchStatementsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchStatementsOperationCompleted);
            }
            this.InvokeAsync("SynchStatements", new object[] {
                        RegistrationKey,
                        statementList}, this.SynchStatementsOperationCompleted, userState);
        }
        
        private void OnSynchStatementsOperationCompleted(object arg) {
            if ((this.SynchStatementsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchStatementsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchDocuments", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchDocuments(string RegistrationKey, OpenDentBusiness.Mobile.Documentm[] documentList) {
            this.Invoke("SynchDocuments", new object[] {
                        RegistrationKey,
                        documentList});
        }
        
        /// <remarks/>
        public void SynchDocumentsAsync(string RegistrationKey, OpenDentBusiness.Mobile.Documentm[] documentList) {
            this.SynchDocumentsAsync(RegistrationKey, documentList, null);
        }
        
        /// <remarks/>
        public void SynchDocumentsAsync(string RegistrationKey, OpenDentBusiness.Mobile.Documentm[] documentList, object userState) {
            if ((this.SynchDocumentsOperationCompleted == null)) {
                this.SynchDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchDocumentsOperationCompleted);
            }
            this.InvokeAsync("SynchDocuments", new object[] {
                        RegistrationKey,
                        documentList}, this.SynchDocumentsOperationCompleted, userState);
        }
        
        private void OnSynchDocumentsOperationCompleted(object arg) {
            if ((this.SynchDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchDocumentsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchRecalls", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchRecalls(string RegistrationKey, OpenDentBusiness.Mobile.Recallm[] recallList) {
            this.Invoke("SynchRecalls", new object[] {
                        RegistrationKey,
                        recallList});
        }
        
        /// <remarks/>
        public void SynchRecallsAsync(string RegistrationKey, OpenDentBusiness.Mobile.Recallm[] recallList) {
            this.SynchRecallsAsync(RegistrationKey, recallList, null);
        }
        
        /// <remarks/>
        public void SynchRecallsAsync(string RegistrationKey, OpenDentBusiness.Mobile.Recallm[] recallList, object userState) {
            if ((this.SynchRecallsOperationCompleted == null)) {
                this.SynchRecallsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchRecallsOperationCompleted);
            }
            this.InvokeAsync("SynchRecalls", new object[] {
                        RegistrationKey,
                        recallList}, this.SynchRecallsOperationCompleted, userState);
        }
        
        private void OnSynchRecallsOperationCompleted(object arg) {
            if ((this.SynchRecallsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchRecallsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/DeletePatientsRecords", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePatientsRecords(string RegistrationKey, long[] patNumList) {
            this.Invoke("DeletePatientsRecords", new object[] {
                        RegistrationKey,
                        patNumList});
        }
        
        /// <remarks/>
        public void DeletePatientsRecordsAsync(string RegistrationKey, long[] patNumList) {
            this.DeletePatientsRecordsAsync(RegistrationKey, patNumList, null);
        }
        
        /// <remarks/>
        public void DeletePatientsRecordsAsync(string RegistrationKey, long[] patNumList, object userState) {
            if ((this.DeletePatientsRecordsOperationCompleted == null)) {
                this.DeletePatientsRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePatientsRecordsOperationCompleted);
            }
            this.InvokeAsync("DeletePatientsRecords", new object[] {
                        RegistrationKey,
                        patNumList}, this.DeletePatientsRecordsOperationCompleted, userState);
        }
        
        private void OnDeletePatientsRecordsOperationCompleted(object arg) {
            if ((this.DeletePatientsRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePatientsRecordsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ServiceExistsCompletedEventHandler(object sender, ServiceExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ServiceExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetCustomerNumCompletedEventHandler(object sender, GetCustomerNumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerNumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerNumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void IsPaidCustomerCompletedEventHandler(object sender, IsPaidCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsPaidCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsPaidCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DeleteObjectsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DeleteAllRecordsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SynchPatientsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SynchAppointmentsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SynchPrescriptionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SynchProvidersCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SynchPharmaciesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetUserNameCompletedEventHandler(object sender, GetUserNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SetMobileWebUserPasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SetPracticeTitleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SetPreferenceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetPatientPortalAddressCompletedEventHandler(object sender, GetPatientPortalAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatientPortalAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatientPortalAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SynchLabPanelsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SynchLabResultsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SynchMedicationsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SynchMedicationPatsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SynchAllergiesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SynchAllergyDefsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SynchDiseasesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SynchDiseaseDefsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SynchICD9sCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SynchStatementsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SynchDocumentsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SynchRecallsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DeletePatientsRecordsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591