<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAB+
        CgAAAk1TRnQBSQFMAgEBAgEAAagBAAGoAQABEAEAARABAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABEAMAAQEBAAEgBgABECIAAxcBIAJHAUYBgAFdAVoBVwHAAXsBaQFRAeABewFpAVEB4AFdAVoBVwHA
        AkcBRgGAAxcBICAAAxcBIAJHAUYBgAJaAVgBwAJfAVcB4AJfAVcB4AJaAVgBwAJHAUYBgAMXASCcAAJH
        AUYBgAH/AZYBAAL/AZYBAAL/AZYBAAL/AZYBAAL/AZYBAAL/AZYBAAL/AZYBAAL/AZYBAAH/AkcBRgGA
        GAACRwFGAYACVwElAf8CVwElAf8CVwElAf8CVwElAf8CVwElAf8CVwElAf8CVwElAf8CVwElAf8CRwFG
        AYCUAANRAaAB/wGWAQAC/wGWAQAC/wGmAUkC/wH0Ae0C/wHvAeQC/wGuAV4C/wGWAQAC/wGWAQAC/wGW
        AQAC/wGWAQAB/wNRAaAQAANRAaACVwElAf8CVwElAf8CdAFWAf8C8AHuAf8C6AHlAf8CiAFoAf8CVwEl
        Af8CVwElAf8CVwElAf8CVwElAf8DUQGgjAACRwFGAYAB/wGWAQAC/wGWAQAC/wGWAQAC/wHKAaEK/wHp
        AdoC/wGuAV4C/wGWAQAC/wGWAQAC/wGWAQAC/wGWAQAB/wJHAUYBgAgAAkcBRgGAAlcBJQH/AlcBJQH/
        AlcBJQH/ArQBpgn/AuAB2wH/AogBaAH/AlcBJQH/AlcBJQH/AlcBJQH/AlcBJQH/AkcBRgGAhAADFwEg
        Af8BlgEAAv8BlgEAAv8BlgEAAv8BlgEAAv8BrgFeCv8BvAGGAv8BvAGGAv8BlgEAAv8BlgEAAv8BlgEA
        Av8BlgEAAv8BlgEAAf8DFwEgAxcBIAJXASUB/wJXASUB/wJXASUB/wJXASUB/wKIAWgJ/wKfAY0B/wKf
        AY0B/wJXASUB/wJXASUB/wJXASUB/wJXASUB/wJXASUB/wMXASCAAAJHAUYBgAH/AZYBAAL/AZYBAAL/
        AZYBAAL/AZYBAAL/AZYBAAL/AfoB9wb/AcoBoQL/AZYBAAL/AZYBAAL/AZYBAAL/AZYBAAL/AZYBAAL/
        AZYBAAH/AkcBRgGAAkcBRgGAAlcBJQH/AlcBJQH/AlcBJQH/AlcBJQH/AlcBJQH/AvgB9wX/ArQBpgH/
        AlcBJQH/AlcBJQH/AlcBJQH/AlcBJQH/AlcBJQH/AlcBJQH/AkcBRgGAgAABXQFaAVcBwAH/AZYBAAL/
        AZYBAAL/AZYBAAL/AZYBAAL/AZYBAAL/Ad0BxQb/AekB2gL/AZYBAAL/AZYBAAL/AZYBAAL/AZYBAAL/
        AZYBAAL/AZYBAAH/AV0BWgFXAcACWgFYAcACVwElAf8CVwElAf8CVwElAf8CVwElAf8CVwElAf8CzwHI
        Bf8C4AHbAf8CVwElAf8CVwElAf8CVwElAf8CVwElAf8CVwElAf8CVwElAf8CWgFYAcCAAAF7AWkBUQHg
        Af8BlgEAAv8BlgEAAv8BlgEAAv8BlgEAAv8BlgEAAv8BvAGGCv8BngEwAv8BlgEAAv8BlgEAAv8BlgEA
        Av8BlgEAAv8BlgEAAf8BewFpAVEB4AJfAVcB4AJXASUB/wJXASUB/wJXASUB/wJXASUB/wJXASUB/wKf
        AY0J/wJmAUEB/wJXASUB/wJXASUB/wJXASUB/wJXASUB/wJXASUB/wJfAVcB4IAAAXsBaQFRAeAB/wGW
        AQAC/wGWAQAC/wGWAQAC/wGWAQAC/wGWAQAC/wGeATAK/wHDAZQC/wGWAQAC/wGWAQAC/wGWAQAC/wGW
        AQAC/wGWAQAB/wF7AWkBUQHgAl8BVwHgAlcBJQH/AlcBJQH/AlcBJQH/AlcBJQH/AlcBJQH/AmYBQQn/
        AqoBmgH/AlcBJQH/AlcBJQH/AlcBJQH/AlcBJQH/AlcBJQH/Al8BVwHggAABXQFaAVcBwAH/AZYBAAL/
        AZYBAAL/AZYBAAL/AZYBAAL/AZYBAAL/AeMB0AL/AfoB9wb/Ad0BxQL/AZYBAAL/AZYBAAL/AZYBAAL/
        AZYBAAL/AZYBAAH/AV0BWgFXAcACWgFYAcACVwElAf8CVwElAf8CVwElAf8CVwElAf8CVwElAf8C2AHS
        Af8C+AH3Bf8CzwHIAf8CVwElAf8CVwElAf8CVwElAf8CVwElAf8CVwElAf8CWgFYAcCAAAJHAUYBgAH/
        AZYBAAL/AZYBAAL/AZYBAAL/AZYBAAL/AZYBAAL/AZYBAAL/AZYBAAL/AZ4BMAL/Aa4BXgL/AZYBAAL/
        AZYBAAL/AZYBAAL/AZYBAAL/AZYBAAH/A0ABcAJHAUYBgAJXASUB/wJXASUB/wJXASUB/wJXASUB/wJX
        ASUB/wJXASUB/wJXASUB/wJmAUEB/wKIAWgB/wJXASUB/wJXASUB/wJXASUB/wJXASUB/wJXASUB/wNA
        AXCAAAMXASAB/wGWAQAC/wGWAQAC/wGWAQAC/wGWAQAC/wGWAQAC/wGWAQAC/wGWAQAC/wHQAa4C/wHd
        AcUC/wGeATAC/wGWAQAC/wGWAQAC/wGWAQAB/wGjAXcBMwHwAwwBEAMXASACVwElAf8CVwElAf8CVwEl
        Af8CVwElAf8CVwElAf8CVwElAf8CVwElAf8CvQGyAf8CzwHIAf8CZgFBAf8CVwElAf8CVwElAf8CVwEl
        Af8CXQFEAfADDAEQhAACRwFGAYAB/wGWAQAC/wGWAQAC/wGWAQAC/wGWAQAC/wGWAQAC/wGuAV4K/wHK
        AaEC/wGWAQAC/wGWAQAC/wGWAQAB/wMyAVAIAAJHAUYBgAJXASUB/wJXASUB/wJXASUB/wJXASUB/wJX
        ASUB/wKIAWgJ/wK0AaYB/wJXASUB/wJXASUB/wJXASUB/wMyAVCMAANRAaAB/wGWAQAC/wGWAQAC/wGW
        AQAC/wGWAQAC/wGWAQAC/wHjAdAC/wHvAeQC/wGmAUkC/wGWAQAC/wGWAQAB/wI6ATkBYBAAA1EBoAJX
        ASUB/wJXASUB/wJXASUB/wJXASUB/wJXASUB/wLYAdIB/wLoAeUB/wJ0AVYB/wJXASUB/wJXASUB/wI6
        ATkBYJQAAkcBRgGAAf8BlgEAAv8BlgEAAv8BlgEAAv8BlgEAAv8BlgEAAv8BlgEAAv8BlgEAAf8BowF3
        ATMB8AMyAVAYAAJHAUYBgAJXASUB/wJXASUB/wJXASUB/wJXASUB/wJXASUB/wJXASUB/wJXASUB/wJd
        AUQB8AMyAVCcAAMXASACRwFGAYABXQFaAVcBwAF7AWkBUQHgAXsBaQFRAeABXQFaAVcBwAI6ATkBYAMM
        ARAgAAMXASACRwFGAYACWgFYAcACXwFXAeACXwFXAeACWgFYAcACOgE5AWADDAEQkAABQgFNAT4HAAE+
        AwABKAMAAUADAAEQAwABAQEAAQEFAAGAFwAD/wEAAfABDwHwAQ8EAAHgAQcB4AEHBAABwAEDAcABAwQA
        AYABAQGAAQFEAAGAAQEBgAEBBAABwAEDAcABAwQAAeABBwHgAQcEAAHwAQ8B8AEPBAAL
</value>
  </data>
  <data name="labelInfoMedIns.Tag" xml:space="preserve">
    <value>Turns on Medical Insurance.
Open Dental has good support for medical insurance making it useful in oral surgery and hospital settings. Checking this is the first step to turn on these medical features. Consult the manual to see how to set up the rest of the features.</value>
  </data>
  <data name="labelInfoEHR.Tag" xml:space="preserve">
    <value>Turn on EHR features. 
If using EHR for the EHR Incentive Program, contact Open Dental to sign an EHR Contract.Open Dental EHR is a complete 2014 edition certified software used by eligible providers in the EHR Incentive Program.  It meets all mandatory requirements for a 'qualified' EHR and has been tested and certified by a federally approved certification body. For more details, please consult the manual.</value>
  </data>
  <data name="labelInfoClinical.Tag" xml:space="preserve">
    <value>Turns on the Clinical feature. 
When unchecked, the Chart module toolbar button changes to Procs, only procedures can be entered for billing, and patient, medical, and diagnosis/prognosis information is hidden.</value>
  </data>
  <data name="labelInfoCapitation.Tag" xml:space="preserve">
    <value>Turns on Capitation.
Show capitation as an insurance type option on the Edit Insurance Plan Window. 
Capitation is also known as HMO/DMO. Set up this type of Insurance Plan when you receive a flat fee every month, regardless of what work is done on the patients. 
Patients pay a flat fee for some procedures and no fee for other procedures. Sometimes, a fee for the lab portion can be billed to insurance. </value>
  </data>
  <data name="labelInfoMedicaid.Tag" xml:space="preserve">
    <value>Turns on the Medicaid Insurance feature. 
Set up this type of Insurance Plan when the plan pays a flat fee instead of a percentage.  Insurance coverage will be 100%. Writeoffs are not tracked and production numbers may be inflated.</value>
  </data>
</root>