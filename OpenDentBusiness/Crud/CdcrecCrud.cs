//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class CdcrecCrud {
		///<summary>Gets one Cdcrec object from the database using the primary key.  Returns null if not found.</summary>
		public static Cdcrec SelectOne(long cdcrecNum){
			string command="SELECT * FROM cdcrec "
				+"WHERE CdcrecNum = "+POut.Long(cdcrecNum);
			List<Cdcrec> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Cdcrec object from the database using a query.</summary>
		public static Cdcrec SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Cdcrec> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Cdcrec objects from the database using a query.</summary>
		public static List<Cdcrec> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Cdcrec> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<Cdcrec> TableToList(DataTable table){
			List<Cdcrec> retVal=new List<Cdcrec>();
			Cdcrec cdcrec;
			foreach(DataRow row in table.Rows) {
				cdcrec=new Cdcrec();
				cdcrec.CdcrecNum       = PIn.Long  (row["CdcrecNum"].ToString());
				cdcrec.CdcrecCode      = PIn.String(row["CdcrecCode"].ToString());
				cdcrec.HeirarchicalCode= PIn.String(row["HeirarchicalCode"].ToString());
				cdcrec.Description     = PIn.String(row["Description"].ToString());
				retVal.Add(cdcrec);
			}
			return retVal;
		}

		///<summary>Converts a list of Cdcrec into a DataTable.</summary>
		public static DataTable ListToTable(List<Cdcrec> listCdcrecs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="Cdcrec";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("CdcrecNum");
			table.Columns.Add("CdcrecCode");
			table.Columns.Add("HeirarchicalCode");
			table.Columns.Add("Description");
			foreach(Cdcrec cdcrec in listCdcrecs) {
				table.Rows.Add(new object[] {
					POut.Long  (cdcrec.CdcrecNum),
					            cdcrec.CdcrecCode,
					            cdcrec.HeirarchicalCode,
					            cdcrec.Description,
				});
			}
			return table;
		}

		///<summary>Inserts one Cdcrec into the database.  Returns the new priKey.</summary>
		public static long Insert(Cdcrec cdcrec){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				cdcrec.CdcrecNum=DbHelper.GetNextOracleKey("cdcrec","CdcrecNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(cdcrec,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							cdcrec.CdcrecNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(cdcrec,false);
			}
		}

		///<summary>Inserts one Cdcrec into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(Cdcrec cdcrec,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				cdcrec.CdcrecNum=ReplicationServers.GetKey("cdcrec","CdcrecNum");
			}
			string command="INSERT INTO cdcrec (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="CdcrecNum,";
			}
			command+="CdcrecCode,HeirarchicalCode,Description) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(cdcrec.CdcrecNum)+",";
			}
			command+=
				 "'"+POut.String(cdcrec.CdcrecCode)+"',"
				+"'"+POut.String(cdcrec.HeirarchicalCode)+"',"
				+"'"+POut.String(cdcrec.Description)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				cdcrec.CdcrecNum=Db.NonQ(command,true,"CdcrecNum","cdcrec");
			}
			return cdcrec.CdcrecNum;
		}

		///<summary>Inserts one Cdcrec into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Cdcrec cdcrec){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(cdcrec,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					cdcrec.CdcrecNum=DbHelper.GetNextOracleKey("cdcrec","CdcrecNum"); //Cacheless method
				}
				return InsertNoCache(cdcrec,true);
			}
		}

		///<summary>Inserts one Cdcrec into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Cdcrec cdcrec,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO cdcrec (";
			if(!useExistingPK && isRandomKeys) {
				cdcrec.CdcrecNum=ReplicationServers.GetKeyNoCache("cdcrec","CdcrecNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="CdcrecNum,";
			}
			command+="CdcrecCode,HeirarchicalCode,Description) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(cdcrec.CdcrecNum)+",";
			}
			command+=
				 "'"+POut.String(cdcrec.CdcrecCode)+"',"
				+"'"+POut.String(cdcrec.HeirarchicalCode)+"',"
				+"'"+POut.String(cdcrec.Description)+"')";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				cdcrec.CdcrecNum=Db.NonQ(command,true,"CdcrecNum","cdcrec");
			}
			return cdcrec.CdcrecNum;
		}

		///<summary>Updates one Cdcrec in the database.</summary>
		public static void Update(Cdcrec cdcrec){
			string command="UPDATE cdcrec SET "
				+"CdcrecCode      = '"+POut.String(cdcrec.CdcrecCode)+"', "
				+"HeirarchicalCode= '"+POut.String(cdcrec.HeirarchicalCode)+"', "
				+"Description     = '"+POut.String(cdcrec.Description)+"' "
				+"WHERE CdcrecNum = "+POut.Long(cdcrec.CdcrecNum);
			Db.NonQ(command);
		}

		///<summary>Updates one Cdcrec in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(Cdcrec cdcrec,Cdcrec oldCdcrec){
			string command="";
			if(cdcrec.CdcrecCode != oldCdcrec.CdcrecCode) {
				if(command!=""){ command+=",";}
				command+="CdcrecCode = '"+POut.String(cdcrec.CdcrecCode)+"'";
			}
			if(cdcrec.HeirarchicalCode != oldCdcrec.HeirarchicalCode) {
				if(command!=""){ command+=",";}
				command+="HeirarchicalCode = '"+POut.String(cdcrec.HeirarchicalCode)+"'";
			}
			if(cdcrec.Description != oldCdcrec.Description) {
				if(command!=""){ command+=",";}
				command+="Description = '"+POut.String(cdcrec.Description)+"'";
			}
			if(command==""){
				return false;
			}
			command="UPDATE cdcrec SET "+command
				+" WHERE CdcrecNum = "+POut.Long(cdcrec.CdcrecNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(Cdcrec,Cdcrec) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(Cdcrec cdcrec,Cdcrec oldCdcrec) {
			if(cdcrec.CdcrecCode != oldCdcrec.CdcrecCode) {
				return true;
			}
			if(cdcrec.HeirarchicalCode != oldCdcrec.HeirarchicalCode) {
				return true;
			}
			if(cdcrec.Description != oldCdcrec.Description) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one Cdcrec from the database.</summary>
		public static void Delete(long cdcrecNum){
			string command="DELETE FROM cdcrec "
				+"WHERE CdcrecNum = "+POut.Long(cdcrecNum);
			Db.NonQ(command);
		}

	}
}