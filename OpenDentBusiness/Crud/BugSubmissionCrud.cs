//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class BugSubmissionCrud {
		///<summary>Gets one BugSubmission object from the database using the primary key.  Returns null if not found.</summary>
		public static BugSubmission SelectOne(long bugSubmissionNum){
			string command="SELECT * FROM bugsubmission "
				+"WHERE BugSubmissionNum = "+POut.Long(bugSubmissionNum);
			List<BugSubmission> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one BugSubmission object from the database using a query.</summary>
		public static BugSubmission SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<BugSubmission> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of BugSubmission objects from the database using a query.</summary>
		public static List<BugSubmission> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<BugSubmission> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<BugSubmission> TableToList(DataTable table){
			List<BugSubmission> retVal=new List<BugSubmission>();
			BugSubmission bugSubmission;
			foreach(DataRow row in table.Rows) {
				bugSubmission=new BugSubmission();
				bugSubmission.BugSubmissionNum    = PIn.Long  (row["BugSubmissionNum"].ToString());
				bugSubmission.SubmissionDateTime  = PIn.DateT (row["SubmissionDateTime"].ToString());
				bugSubmission.BugId               = PIn.Long  (row["BugId"].ToString());
				bugSubmission.RegKey              = PIn.String(row["RegKey"].ToString());
				bugSubmission.DbVersion           = PIn.String(row["DbVersion"].ToString());
				bugSubmission.ExceptionMessageText= PIn.String(row["ExceptionMessageText"].ToString());
				bugSubmission.ExceptionStackTrace = PIn.String(row["ExceptionStackTrace"].ToString());
				bugSubmission.DbInfoJson          = PIn.String(row["DbInfoJson"].ToString());
				bugSubmission.DevNote             = PIn.String(row["DevNote"].ToString());
				retVal.Add(bugSubmission);
			}
			return retVal;
		}

		///<summary>Converts a list of BugSubmission into a DataTable.</summary>
		public static DataTable ListToTable(List<BugSubmission> listBugSubmissions,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="BugSubmission";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("BugSubmissionNum");
			table.Columns.Add("SubmissionDateTime");
			table.Columns.Add("BugId");
			table.Columns.Add("RegKey");
			table.Columns.Add("DbVersion");
			table.Columns.Add("ExceptionMessageText");
			table.Columns.Add("ExceptionStackTrace");
			table.Columns.Add("DbInfoJson");
			table.Columns.Add("DevNote");
			foreach(BugSubmission bugSubmission in listBugSubmissions) {
				table.Rows.Add(new object[] {
					POut.Long  (bugSubmission.BugSubmissionNum),
					POut.DateT (bugSubmission.SubmissionDateTime,false),
					POut.Long  (bugSubmission.BugId),
					            bugSubmission.RegKey,
					            bugSubmission.DbVersion,
					            bugSubmission.ExceptionMessageText,
					            bugSubmission.ExceptionStackTrace,
					            bugSubmission.DbInfoJson,
					            bugSubmission.DevNote,
				});
			}
			return table;
		}

		///<summary>Inserts one BugSubmission into the database.  Returns the new priKey.</summary>
		public static long Insert(BugSubmission bugSubmission){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				bugSubmission.BugSubmissionNum=DbHelper.GetNextOracleKey("bugsubmission","BugSubmissionNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(bugSubmission,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							bugSubmission.BugSubmissionNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(bugSubmission,false);
			}
		}

		///<summary>Inserts one BugSubmission into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(BugSubmission bugSubmission,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				bugSubmission.BugSubmissionNum=ReplicationServers.GetKey("bugsubmission","BugSubmissionNum");
			}
			string command="INSERT INTO bugsubmission (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="BugSubmissionNum,";
			}
			command+="SubmissionDateTime,BugId,RegKey,DbVersion,ExceptionMessageText,ExceptionStackTrace,DbInfoJson,DevNote) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(bugSubmission.BugSubmissionNum)+",";
			}
			command+=
				     DbHelper.Now()+","
				+    POut.Long  (bugSubmission.BugId)+","
				+"'"+POut.String(bugSubmission.RegKey)+"',"
				+"'"+POut.String(bugSubmission.DbVersion)+"',"
				+"'"+POut.String(bugSubmission.ExceptionMessageText)+"',"
				+    DbHelper.ParamChar+"paramExceptionStackTrace,"
				+    DbHelper.ParamChar+"paramDbInfoJson,"
				+    DbHelper.ParamChar+"paramDevNote)";
			if(bugSubmission.ExceptionStackTrace==null) {
				bugSubmission.ExceptionStackTrace="";
			}
			OdSqlParameter paramExceptionStackTrace=new OdSqlParameter("paramExceptionStackTrace",OdDbType.Text,POut.StringParam(bugSubmission.ExceptionStackTrace));
			if(bugSubmission.DbInfoJson==null) {
				bugSubmission.DbInfoJson="";
			}
			OdSqlParameter paramDbInfoJson=new OdSqlParameter("paramDbInfoJson",OdDbType.Text,POut.StringParam(bugSubmission.DbInfoJson));
			if(bugSubmission.DevNote==null) {
				bugSubmission.DevNote="";
			}
			OdSqlParameter paramDevNote=new OdSqlParameter("paramDevNote",OdDbType.Text,POut.StringParam(bugSubmission.DevNote));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramExceptionStackTrace,paramDbInfoJson,paramDevNote);
			}
			else {
				bugSubmission.BugSubmissionNum=Db.NonQ(command,true,"BugSubmissionNum","bugSubmission",paramExceptionStackTrace,paramDbInfoJson,paramDevNote);
			}
			return bugSubmission.BugSubmissionNum;
		}

		///<summary>Inserts one BugSubmission into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(BugSubmission bugSubmission){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(bugSubmission,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					bugSubmission.BugSubmissionNum=DbHelper.GetNextOracleKey("bugsubmission","BugSubmissionNum"); //Cacheless method
				}
				return InsertNoCache(bugSubmission,true);
			}
		}

		///<summary>Inserts one BugSubmission into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(BugSubmission bugSubmission,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO bugsubmission (";
			if(!useExistingPK && isRandomKeys) {
				bugSubmission.BugSubmissionNum=ReplicationServers.GetKeyNoCache("bugsubmission","BugSubmissionNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="BugSubmissionNum,";
			}
			command+="SubmissionDateTime,BugId,RegKey,DbVersion,ExceptionMessageText,ExceptionStackTrace,DbInfoJson,DevNote) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(bugSubmission.BugSubmissionNum)+",";
			}
			command+=
				     DbHelper.Now()+","
				+    POut.Long  (bugSubmission.BugId)+","
				+"'"+POut.String(bugSubmission.RegKey)+"',"
				+"'"+POut.String(bugSubmission.DbVersion)+"',"
				+"'"+POut.String(bugSubmission.ExceptionMessageText)+"',"
				+    DbHelper.ParamChar+"paramExceptionStackTrace,"
				+    DbHelper.ParamChar+"paramDbInfoJson,"
				+    DbHelper.ParamChar+"paramDevNote)";
			if(bugSubmission.ExceptionStackTrace==null) {
				bugSubmission.ExceptionStackTrace="";
			}
			OdSqlParameter paramExceptionStackTrace=new OdSqlParameter("paramExceptionStackTrace",OdDbType.Text,POut.StringParam(bugSubmission.ExceptionStackTrace));
			if(bugSubmission.DbInfoJson==null) {
				bugSubmission.DbInfoJson="";
			}
			OdSqlParameter paramDbInfoJson=new OdSqlParameter("paramDbInfoJson",OdDbType.Text,POut.StringParam(bugSubmission.DbInfoJson));
			if(bugSubmission.DevNote==null) {
				bugSubmission.DevNote="";
			}
			OdSqlParameter paramDevNote=new OdSqlParameter("paramDevNote",OdDbType.Text,POut.StringParam(bugSubmission.DevNote));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramExceptionStackTrace,paramDbInfoJson,paramDevNote);
			}
			else {
				bugSubmission.BugSubmissionNum=Db.NonQ(command,true,"BugSubmissionNum","bugSubmission",paramExceptionStackTrace,paramDbInfoJson,paramDevNote);
			}
			return bugSubmission.BugSubmissionNum;
		}

		///<summary>Updates one BugSubmission in the database.</summary>
		public static void Update(BugSubmission bugSubmission){
			string command="UPDATE bugsubmission SET "
				//SubmissionDateTime not allowed to change
				+"BugId               =  "+POut.Long  (bugSubmission.BugId)+", "
				+"RegKey              = '"+POut.String(bugSubmission.RegKey)+"', "
				+"DbVersion           = '"+POut.String(bugSubmission.DbVersion)+"', "
				+"ExceptionMessageText= '"+POut.String(bugSubmission.ExceptionMessageText)+"', "
				+"ExceptionStackTrace =  "+DbHelper.ParamChar+"paramExceptionStackTrace, "
				+"DbInfoJson          =  "+DbHelper.ParamChar+"paramDbInfoJson, "
				+"DevNote             =  "+DbHelper.ParamChar+"paramDevNote "
				+"WHERE BugSubmissionNum = "+POut.Long(bugSubmission.BugSubmissionNum);
			if(bugSubmission.ExceptionStackTrace==null) {
				bugSubmission.ExceptionStackTrace="";
			}
			OdSqlParameter paramExceptionStackTrace=new OdSqlParameter("paramExceptionStackTrace",OdDbType.Text,POut.StringParam(bugSubmission.ExceptionStackTrace));
			if(bugSubmission.DbInfoJson==null) {
				bugSubmission.DbInfoJson="";
			}
			OdSqlParameter paramDbInfoJson=new OdSqlParameter("paramDbInfoJson",OdDbType.Text,POut.StringParam(bugSubmission.DbInfoJson));
			if(bugSubmission.DevNote==null) {
				bugSubmission.DevNote="";
			}
			OdSqlParameter paramDevNote=new OdSqlParameter("paramDevNote",OdDbType.Text,POut.StringParam(bugSubmission.DevNote));
			Db.NonQ(command,paramExceptionStackTrace,paramDbInfoJson,paramDevNote);
		}

		///<summary>Updates one BugSubmission in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(BugSubmission bugSubmission,BugSubmission oldBugSubmission){
			string command="";
			//SubmissionDateTime not allowed to change
			if(bugSubmission.BugId != oldBugSubmission.BugId) {
				if(command!=""){ command+=",";}
				command+="BugId = "+POut.Long(bugSubmission.BugId)+"";
			}
			if(bugSubmission.RegKey != oldBugSubmission.RegKey) {
				if(command!=""){ command+=",";}
				command+="RegKey = '"+POut.String(bugSubmission.RegKey)+"'";
			}
			if(bugSubmission.DbVersion != oldBugSubmission.DbVersion) {
				if(command!=""){ command+=",";}
				command+="DbVersion = '"+POut.String(bugSubmission.DbVersion)+"'";
			}
			if(bugSubmission.ExceptionMessageText != oldBugSubmission.ExceptionMessageText) {
				if(command!=""){ command+=",";}
				command+="ExceptionMessageText = '"+POut.String(bugSubmission.ExceptionMessageText)+"'";
			}
			if(bugSubmission.ExceptionStackTrace != oldBugSubmission.ExceptionStackTrace) {
				if(command!=""){ command+=",";}
				command+="ExceptionStackTrace = "+DbHelper.ParamChar+"paramExceptionStackTrace";
			}
			if(bugSubmission.DbInfoJson != oldBugSubmission.DbInfoJson) {
				if(command!=""){ command+=",";}
				command+="DbInfoJson = "+DbHelper.ParamChar+"paramDbInfoJson";
			}
			if(bugSubmission.DevNote != oldBugSubmission.DevNote) {
				if(command!=""){ command+=",";}
				command+="DevNote = "+DbHelper.ParamChar+"paramDevNote";
			}
			if(command==""){
				return false;
			}
			if(bugSubmission.ExceptionStackTrace==null) {
				bugSubmission.ExceptionStackTrace="";
			}
			OdSqlParameter paramExceptionStackTrace=new OdSqlParameter("paramExceptionStackTrace",OdDbType.Text,POut.StringParam(bugSubmission.ExceptionStackTrace));
			if(bugSubmission.DbInfoJson==null) {
				bugSubmission.DbInfoJson="";
			}
			OdSqlParameter paramDbInfoJson=new OdSqlParameter("paramDbInfoJson",OdDbType.Text,POut.StringParam(bugSubmission.DbInfoJson));
			if(bugSubmission.DevNote==null) {
				bugSubmission.DevNote="";
			}
			OdSqlParameter paramDevNote=new OdSqlParameter("paramDevNote",OdDbType.Text,POut.StringParam(bugSubmission.DevNote));
			command="UPDATE bugsubmission SET "+command
				+" WHERE BugSubmissionNum = "+POut.Long(bugSubmission.BugSubmissionNum);
			Db.NonQ(command,paramExceptionStackTrace,paramDbInfoJson,paramDevNote);
			return true;
		}

		///<summary>Returns true if Update(BugSubmission,BugSubmission) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(BugSubmission bugSubmission,BugSubmission oldBugSubmission) {
			//SubmissionDateTime not allowed to change
			if(bugSubmission.BugId != oldBugSubmission.BugId) {
				return true;
			}
			if(bugSubmission.RegKey != oldBugSubmission.RegKey) {
				return true;
			}
			if(bugSubmission.DbVersion != oldBugSubmission.DbVersion) {
				return true;
			}
			if(bugSubmission.ExceptionMessageText != oldBugSubmission.ExceptionMessageText) {
				return true;
			}
			if(bugSubmission.ExceptionStackTrace != oldBugSubmission.ExceptionStackTrace) {
				return true;
			}
			if(bugSubmission.DbInfoJson != oldBugSubmission.DbInfoJson) {
				return true;
			}
			if(bugSubmission.DevNote != oldBugSubmission.DevNote) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one BugSubmission from the database.</summary>
		public static void Delete(long bugSubmissionNum){
			string command="DELETE FROM bugsubmission "
				+"WHERE BugSubmissionNum = "+POut.Long(bugSubmissionNum);
			Db.NonQ(command);
		}

	}
}