//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class RxAlertCrud {
		///<summary>Gets one RxAlert object from the database using the primary key.  Returns null if not found.</summary>
		public static RxAlert SelectOne(long rxAlertNum){
			string command="SELECT * FROM rxalert "
				+"WHERE RxAlertNum = "+POut.Long(rxAlertNum);
			List<RxAlert> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one RxAlert object from the database using a query.</summary>
		public static RxAlert SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<RxAlert> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of RxAlert objects from the database using a query.</summary>
		public static List<RxAlert> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<RxAlert> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<RxAlert> TableToList(DataTable table){
			List<RxAlert> retVal=new List<RxAlert>();
			RxAlert rxAlert;
			foreach(DataRow row in table.Rows) {
				rxAlert=new RxAlert();
				rxAlert.RxAlertNum        = PIn.Long  (row["RxAlertNum"].ToString());
				rxAlert.RxDefNum          = PIn.Long  (row["RxDefNum"].ToString());
				rxAlert.DiseaseDefNum     = PIn.Long  (row["DiseaseDefNum"].ToString());
				rxAlert.AllergyDefNum     = PIn.Long  (row["AllergyDefNum"].ToString());
				rxAlert.MedicationNum     = PIn.Long  (row["MedicationNum"].ToString());
				rxAlert.NotificationMsg   = PIn.String(row["NotificationMsg"].ToString());
				rxAlert.IsHighSignificance= PIn.Bool  (row["IsHighSignificance"].ToString());
				retVal.Add(rxAlert);
			}
			return retVal;
		}

		///<summary>Converts a list of RxAlert into a DataTable.</summary>
		public static DataTable ListToTable(List<RxAlert> listRxAlerts,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="RxAlert";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("RxAlertNum");
			table.Columns.Add("RxDefNum");
			table.Columns.Add("DiseaseDefNum");
			table.Columns.Add("AllergyDefNum");
			table.Columns.Add("MedicationNum");
			table.Columns.Add("NotificationMsg");
			table.Columns.Add("IsHighSignificance");
			foreach(RxAlert rxAlert in listRxAlerts) {
				table.Rows.Add(new object[] {
					POut.Long  (rxAlert.RxAlertNum),
					POut.Long  (rxAlert.RxDefNum),
					POut.Long  (rxAlert.DiseaseDefNum),
					POut.Long  (rxAlert.AllergyDefNum),
					POut.Long  (rxAlert.MedicationNum),
					            rxAlert.NotificationMsg,
					POut.Bool  (rxAlert.IsHighSignificance),
				});
			}
			return table;
		}

		///<summary>Inserts one RxAlert into the database.  Returns the new priKey.</summary>
		public static long Insert(RxAlert rxAlert){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				rxAlert.RxAlertNum=DbHelper.GetNextOracleKey("rxalert","RxAlertNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(rxAlert,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							rxAlert.RxAlertNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(rxAlert,false);
			}
		}

		///<summary>Inserts one RxAlert into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(RxAlert rxAlert,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				rxAlert.RxAlertNum=ReplicationServers.GetKey("rxalert","RxAlertNum");
			}
			string command="INSERT INTO rxalert (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="RxAlertNum,";
			}
			command+="RxDefNum,DiseaseDefNum,AllergyDefNum,MedicationNum,NotificationMsg,IsHighSignificance) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(rxAlert.RxAlertNum)+",";
			}
			command+=
				     POut.Long  (rxAlert.RxDefNum)+","
				+    POut.Long  (rxAlert.DiseaseDefNum)+","
				+    POut.Long  (rxAlert.AllergyDefNum)+","
				+    POut.Long  (rxAlert.MedicationNum)+","
				+"'"+POut.String(rxAlert.NotificationMsg)+"',"
				+    POut.Bool  (rxAlert.IsHighSignificance)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				rxAlert.RxAlertNum=Db.NonQ(command,true,"RxAlertNum","rxAlert");
			}
			return rxAlert.RxAlertNum;
		}

		///<summary>Inserts one RxAlert into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(RxAlert rxAlert){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(rxAlert,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					rxAlert.RxAlertNum=DbHelper.GetNextOracleKey("rxalert","RxAlertNum"); //Cacheless method
				}
				return InsertNoCache(rxAlert,true);
			}
		}

		///<summary>Inserts one RxAlert into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(RxAlert rxAlert,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO rxalert (";
			if(!useExistingPK && isRandomKeys) {
				rxAlert.RxAlertNum=ReplicationServers.GetKeyNoCache("rxalert","RxAlertNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="RxAlertNum,";
			}
			command+="RxDefNum,DiseaseDefNum,AllergyDefNum,MedicationNum,NotificationMsg,IsHighSignificance) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(rxAlert.RxAlertNum)+",";
			}
			command+=
				     POut.Long  (rxAlert.RxDefNum)+","
				+    POut.Long  (rxAlert.DiseaseDefNum)+","
				+    POut.Long  (rxAlert.AllergyDefNum)+","
				+    POut.Long  (rxAlert.MedicationNum)+","
				+"'"+POut.String(rxAlert.NotificationMsg)+"',"
				+    POut.Bool  (rxAlert.IsHighSignificance)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				rxAlert.RxAlertNum=Db.NonQ(command,true,"RxAlertNum","rxAlert");
			}
			return rxAlert.RxAlertNum;
		}

		///<summary>Updates one RxAlert in the database.</summary>
		public static void Update(RxAlert rxAlert){
			string command="UPDATE rxalert SET "
				+"RxDefNum          =  "+POut.Long  (rxAlert.RxDefNum)+", "
				+"DiseaseDefNum     =  "+POut.Long  (rxAlert.DiseaseDefNum)+", "
				+"AllergyDefNum     =  "+POut.Long  (rxAlert.AllergyDefNum)+", "
				+"MedicationNum     =  "+POut.Long  (rxAlert.MedicationNum)+", "
				+"NotificationMsg   = '"+POut.String(rxAlert.NotificationMsg)+"', "
				+"IsHighSignificance=  "+POut.Bool  (rxAlert.IsHighSignificance)+" "
				+"WHERE RxAlertNum = "+POut.Long(rxAlert.RxAlertNum);
			Db.NonQ(command);
		}

		///<summary>Updates one RxAlert in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(RxAlert rxAlert,RxAlert oldRxAlert){
			string command="";
			if(rxAlert.RxDefNum != oldRxAlert.RxDefNum) {
				if(command!=""){ command+=",";}
				command+="RxDefNum = "+POut.Long(rxAlert.RxDefNum)+"";
			}
			if(rxAlert.DiseaseDefNum != oldRxAlert.DiseaseDefNum) {
				if(command!=""){ command+=",";}
				command+="DiseaseDefNum = "+POut.Long(rxAlert.DiseaseDefNum)+"";
			}
			if(rxAlert.AllergyDefNum != oldRxAlert.AllergyDefNum) {
				if(command!=""){ command+=",";}
				command+="AllergyDefNum = "+POut.Long(rxAlert.AllergyDefNum)+"";
			}
			if(rxAlert.MedicationNum != oldRxAlert.MedicationNum) {
				if(command!=""){ command+=",";}
				command+="MedicationNum = "+POut.Long(rxAlert.MedicationNum)+"";
			}
			if(rxAlert.NotificationMsg != oldRxAlert.NotificationMsg) {
				if(command!=""){ command+=",";}
				command+="NotificationMsg = '"+POut.String(rxAlert.NotificationMsg)+"'";
			}
			if(rxAlert.IsHighSignificance != oldRxAlert.IsHighSignificance) {
				if(command!=""){ command+=",";}
				command+="IsHighSignificance = "+POut.Bool(rxAlert.IsHighSignificance)+"";
			}
			if(command==""){
				return false;
			}
			command="UPDATE rxalert SET "+command
				+" WHERE RxAlertNum = "+POut.Long(rxAlert.RxAlertNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(RxAlert,RxAlert) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(RxAlert rxAlert,RxAlert oldRxAlert) {
			if(rxAlert.RxDefNum != oldRxAlert.RxDefNum) {
				return true;
			}
			if(rxAlert.DiseaseDefNum != oldRxAlert.DiseaseDefNum) {
				return true;
			}
			if(rxAlert.AllergyDefNum != oldRxAlert.AllergyDefNum) {
				return true;
			}
			if(rxAlert.MedicationNum != oldRxAlert.MedicationNum) {
				return true;
			}
			if(rxAlert.NotificationMsg != oldRxAlert.NotificationMsg) {
				return true;
			}
			if(rxAlert.IsHighSignificance != oldRxAlert.IsHighSignificance) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one RxAlert from the database.</summary>
		public static void Delete(long rxAlertNum){
			string command="DELETE FROM rxalert "
				+"WHERE RxAlertNum = "+POut.Long(rxAlertNum);
			Db.NonQ(command);
		}

	}
}