//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class OrionProcCrud {
		///<summary>Gets one OrionProc object from the database using the primary key.  Returns null if not found.</summary>
		public static OrionProc SelectOne(long orionProcNum){
			string command="SELECT * FROM orionproc "
				+"WHERE OrionProcNum = "+POut.Long(orionProcNum);
			List<OrionProc> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one OrionProc object from the database using a query.</summary>
		public static OrionProc SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<OrionProc> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of OrionProc objects from the database using a query.</summary>
		public static List<OrionProc> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<OrionProc> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<OrionProc> TableToList(DataTable table){
			List<OrionProc> retVal=new List<OrionProc>();
			OrionProc orionProc;
			foreach(DataRow row in table.Rows) {
				orionProc=new OrionProc();
				orionProc.OrionProcNum   = PIn.Long  (row["OrionProcNum"].ToString());
				orionProc.ProcNum        = PIn.Long  (row["ProcNum"].ToString());
				orionProc.DPC            = (OpenDentBusiness.OrionDPC)PIn.Int(row["DPC"].ToString());
				orionProc.DPCpost        = (OpenDentBusiness.OrionDPC)PIn.Int(row["DPCpost"].ToString());
				orionProc.DateScheduleBy = PIn.Date  (row["DateScheduleBy"].ToString());
				orionProc.DateStopClock  = PIn.Date  (row["DateStopClock"].ToString());
				orionProc.Status2        = (OpenDentBusiness.OrionStatus)PIn.Int(row["Status2"].ToString());
				orionProc.IsOnCall       = PIn.Bool  (row["IsOnCall"].ToString());
				orionProc.IsEffectiveComm= PIn.Bool  (row["IsEffectiveComm"].ToString());
				orionProc.IsRepair       = PIn.Bool  (row["IsRepair"].ToString());
				retVal.Add(orionProc);
			}
			return retVal;
		}

		///<summary>Converts a list of OrionProc into a DataTable.</summary>
		public static DataTable ListToTable(List<OrionProc> listOrionProcs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="OrionProc";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("OrionProcNum");
			table.Columns.Add("ProcNum");
			table.Columns.Add("DPC");
			table.Columns.Add("DPCpost");
			table.Columns.Add("DateScheduleBy");
			table.Columns.Add("DateStopClock");
			table.Columns.Add("Status2");
			table.Columns.Add("IsOnCall");
			table.Columns.Add("IsEffectiveComm");
			table.Columns.Add("IsRepair");
			foreach(OrionProc orionProc in listOrionProcs) {
				table.Rows.Add(new object[] {
					POut.Long  (orionProc.OrionProcNum),
					POut.Long  (orionProc.ProcNum),
					POut.Int   ((int)orionProc.DPC),
					POut.Int   ((int)orionProc.DPCpost),
					POut.DateT (orionProc.DateScheduleBy,false),
					POut.DateT (orionProc.DateStopClock,false),
					POut.Int   ((int)orionProc.Status2),
					POut.Bool  (orionProc.IsOnCall),
					POut.Bool  (orionProc.IsEffectiveComm),
					POut.Bool  (orionProc.IsRepair),
				});
			}
			return table;
		}

		///<summary>Inserts one OrionProc into the database.  Returns the new priKey.</summary>
		public static long Insert(OrionProc orionProc){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				orionProc.OrionProcNum=DbHelper.GetNextOracleKey("orionproc","OrionProcNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(orionProc,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							orionProc.OrionProcNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(orionProc,false);
			}
		}

		///<summary>Inserts one OrionProc into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(OrionProc orionProc,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				orionProc.OrionProcNum=ReplicationServers.GetKey("orionproc","OrionProcNum");
			}
			string command="INSERT INTO orionproc (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="OrionProcNum,";
			}
			command+="ProcNum,DPC,DPCpost,DateScheduleBy,DateStopClock,Status2,IsOnCall,IsEffectiveComm,IsRepair) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(orionProc.OrionProcNum)+",";
			}
			command+=
				     POut.Long  (orionProc.ProcNum)+","
				+    POut.Int   ((int)orionProc.DPC)+","
				+    POut.Int   ((int)orionProc.DPCpost)+","
				+    POut.Date  (orionProc.DateScheduleBy)+","
				+    POut.Date  (orionProc.DateStopClock)+","
				+    POut.Int   ((int)orionProc.Status2)+","
				+    POut.Bool  (orionProc.IsOnCall)+","
				+    POut.Bool  (orionProc.IsEffectiveComm)+","
				+    POut.Bool  (orionProc.IsRepair)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				orionProc.OrionProcNum=Db.NonQ(command,true,"OrionProcNum","orionProc");
			}
			return orionProc.OrionProcNum;
		}

		///<summary>Inserts one OrionProc into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(OrionProc orionProc){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(orionProc,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					orionProc.OrionProcNum=DbHelper.GetNextOracleKey("orionproc","OrionProcNum"); //Cacheless method
				}
				return InsertNoCache(orionProc,true);
			}
		}

		///<summary>Inserts one OrionProc into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(OrionProc orionProc,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO orionproc (";
			if(!useExistingPK && isRandomKeys) {
				orionProc.OrionProcNum=ReplicationServers.GetKeyNoCache("orionproc","OrionProcNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="OrionProcNum,";
			}
			command+="ProcNum,DPC,DPCpost,DateScheduleBy,DateStopClock,Status2,IsOnCall,IsEffectiveComm,IsRepair) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(orionProc.OrionProcNum)+",";
			}
			command+=
				     POut.Long  (orionProc.ProcNum)+","
				+    POut.Int   ((int)orionProc.DPC)+","
				+    POut.Int   ((int)orionProc.DPCpost)+","
				+    POut.Date  (orionProc.DateScheduleBy)+","
				+    POut.Date  (orionProc.DateStopClock)+","
				+    POut.Int   ((int)orionProc.Status2)+","
				+    POut.Bool  (orionProc.IsOnCall)+","
				+    POut.Bool  (orionProc.IsEffectiveComm)+","
				+    POut.Bool  (orionProc.IsRepair)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				orionProc.OrionProcNum=Db.NonQ(command,true,"OrionProcNum","orionProc");
			}
			return orionProc.OrionProcNum;
		}

		///<summary>Updates one OrionProc in the database.</summary>
		public static void Update(OrionProc orionProc){
			string command="UPDATE orionproc SET "
				+"ProcNum        =  "+POut.Long  (orionProc.ProcNum)+", "
				+"DPC            =  "+POut.Int   ((int)orionProc.DPC)+", "
				+"DPCpost        =  "+POut.Int   ((int)orionProc.DPCpost)+", "
				+"DateScheduleBy =  "+POut.Date  (orionProc.DateScheduleBy)+", "
				+"DateStopClock  =  "+POut.Date  (orionProc.DateStopClock)+", "
				+"Status2        =  "+POut.Int   ((int)orionProc.Status2)+", "
				+"IsOnCall       =  "+POut.Bool  (orionProc.IsOnCall)+", "
				+"IsEffectiveComm=  "+POut.Bool  (orionProc.IsEffectiveComm)+", "
				+"IsRepair       =  "+POut.Bool  (orionProc.IsRepair)+" "
				+"WHERE OrionProcNum = "+POut.Long(orionProc.OrionProcNum);
			Db.NonQ(command);
		}

		///<summary>Updates one OrionProc in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(OrionProc orionProc,OrionProc oldOrionProc){
			string command="";
			if(orionProc.ProcNum != oldOrionProc.ProcNum) {
				if(command!=""){ command+=",";}
				command+="ProcNum = "+POut.Long(orionProc.ProcNum)+"";
			}
			if(orionProc.DPC != oldOrionProc.DPC) {
				if(command!=""){ command+=",";}
				command+="DPC = "+POut.Int   ((int)orionProc.DPC)+"";
			}
			if(orionProc.DPCpost != oldOrionProc.DPCpost) {
				if(command!=""){ command+=",";}
				command+="DPCpost = "+POut.Int   ((int)orionProc.DPCpost)+"";
			}
			if(orionProc.DateScheduleBy.Date != oldOrionProc.DateScheduleBy.Date) {
				if(command!=""){ command+=",";}
				command+="DateScheduleBy = "+POut.Date(orionProc.DateScheduleBy)+"";
			}
			if(orionProc.DateStopClock.Date != oldOrionProc.DateStopClock.Date) {
				if(command!=""){ command+=",";}
				command+="DateStopClock = "+POut.Date(orionProc.DateStopClock)+"";
			}
			if(orionProc.Status2 != oldOrionProc.Status2) {
				if(command!=""){ command+=",";}
				command+="Status2 = "+POut.Int   ((int)orionProc.Status2)+"";
			}
			if(orionProc.IsOnCall != oldOrionProc.IsOnCall) {
				if(command!=""){ command+=",";}
				command+="IsOnCall = "+POut.Bool(orionProc.IsOnCall)+"";
			}
			if(orionProc.IsEffectiveComm != oldOrionProc.IsEffectiveComm) {
				if(command!=""){ command+=",";}
				command+="IsEffectiveComm = "+POut.Bool(orionProc.IsEffectiveComm)+"";
			}
			if(orionProc.IsRepair != oldOrionProc.IsRepair) {
				if(command!=""){ command+=",";}
				command+="IsRepair = "+POut.Bool(orionProc.IsRepair)+"";
			}
			if(command==""){
				return false;
			}
			command="UPDATE orionproc SET "+command
				+" WHERE OrionProcNum = "+POut.Long(orionProc.OrionProcNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(OrionProc,OrionProc) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(OrionProc orionProc,OrionProc oldOrionProc) {
			if(orionProc.ProcNum != oldOrionProc.ProcNum) {
				return true;
			}
			if(orionProc.DPC != oldOrionProc.DPC) {
				return true;
			}
			if(orionProc.DPCpost != oldOrionProc.DPCpost) {
				return true;
			}
			if(orionProc.DateScheduleBy.Date != oldOrionProc.DateScheduleBy.Date) {
				return true;
			}
			if(orionProc.DateStopClock.Date != oldOrionProc.DateStopClock.Date) {
				return true;
			}
			if(orionProc.Status2 != oldOrionProc.Status2) {
				return true;
			}
			if(orionProc.IsOnCall != oldOrionProc.IsOnCall) {
				return true;
			}
			if(orionProc.IsEffectiveComm != oldOrionProc.IsEffectiveComm) {
				return true;
			}
			if(orionProc.IsRepair != oldOrionProc.IsRepair) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one OrionProc from the database.</summary>
		public static void Delete(long orionProcNum){
			string command="DELETE FROM orionproc "
				+"WHERE OrionProcNum = "+POut.Long(orionProcNum);
			Db.NonQ(command);
		}

	}
}