//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class HL7ProcAttachCrud {
		///<summary>Gets one HL7ProcAttach object from the database using the primary key.  Returns null if not found.</summary>
		public static HL7ProcAttach SelectOne(long hL7ProcAttachNum){
			string command="SELECT * FROM hl7procattach "
				+"WHERE HL7ProcAttachNum = "+POut.Long(hL7ProcAttachNum);
			List<HL7ProcAttach> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one HL7ProcAttach object from the database using a query.</summary>
		public static HL7ProcAttach SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<HL7ProcAttach> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of HL7ProcAttach objects from the database using a query.</summary>
		public static List<HL7ProcAttach> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<HL7ProcAttach> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<HL7ProcAttach> TableToList(DataTable table){
			List<HL7ProcAttach> retVal=new List<HL7ProcAttach>();
			HL7ProcAttach hL7ProcAttach;
			foreach(DataRow row in table.Rows) {
				hL7ProcAttach=new HL7ProcAttach();
				hL7ProcAttach.HL7ProcAttachNum= PIn.Long  (row["HL7ProcAttachNum"].ToString());
				hL7ProcAttach.HL7MsgNum       = PIn.Long  (row["HL7MsgNum"].ToString());
				hL7ProcAttach.ProcNum         = PIn.Long  (row["ProcNum"].ToString());
				retVal.Add(hL7ProcAttach);
			}
			return retVal;
		}

		///<summary>Converts a list of HL7ProcAttach into a DataTable.</summary>
		public static DataTable ListToTable(List<HL7ProcAttach> listHL7ProcAttachs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="HL7ProcAttach";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("HL7ProcAttachNum");
			table.Columns.Add("HL7MsgNum");
			table.Columns.Add("ProcNum");
			foreach(HL7ProcAttach hL7ProcAttach in listHL7ProcAttachs) {
				table.Rows.Add(new object[] {
					POut.Long  (hL7ProcAttach.HL7ProcAttachNum),
					POut.Long  (hL7ProcAttach.HL7MsgNum),
					POut.Long  (hL7ProcAttach.ProcNum),
				});
			}
			return table;
		}

		///<summary>Inserts one HL7ProcAttach into the database.  Returns the new priKey.</summary>
		public static long Insert(HL7ProcAttach hL7ProcAttach){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				hL7ProcAttach.HL7ProcAttachNum=DbHelper.GetNextOracleKey("hl7procattach","HL7ProcAttachNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(hL7ProcAttach,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							hL7ProcAttach.HL7ProcAttachNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(hL7ProcAttach,false);
			}
		}

		///<summary>Inserts one HL7ProcAttach into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(HL7ProcAttach hL7ProcAttach,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				hL7ProcAttach.HL7ProcAttachNum=ReplicationServers.GetKey("hl7procattach","HL7ProcAttachNum");
			}
			string command="INSERT INTO hl7procattach (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="HL7ProcAttachNum,";
			}
			command+="HL7MsgNum,ProcNum) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(hL7ProcAttach.HL7ProcAttachNum)+",";
			}
			command+=
				     POut.Long  (hL7ProcAttach.HL7MsgNum)+","
				+    POut.Long  (hL7ProcAttach.ProcNum)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				hL7ProcAttach.HL7ProcAttachNum=Db.NonQ(command,true,"HL7ProcAttachNum","hL7ProcAttach");
			}
			return hL7ProcAttach.HL7ProcAttachNum;
		}

		///<summary>Inserts one HL7ProcAttach into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(HL7ProcAttach hL7ProcAttach){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(hL7ProcAttach,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					hL7ProcAttach.HL7ProcAttachNum=DbHelper.GetNextOracleKey("hl7procattach","HL7ProcAttachNum"); //Cacheless method
				}
				return InsertNoCache(hL7ProcAttach,true);
			}
		}

		///<summary>Inserts one HL7ProcAttach into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(HL7ProcAttach hL7ProcAttach,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO hl7procattach (";
			if(!useExistingPK && isRandomKeys) {
				hL7ProcAttach.HL7ProcAttachNum=ReplicationServers.GetKeyNoCache("hl7procattach","HL7ProcAttachNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="HL7ProcAttachNum,";
			}
			command+="HL7MsgNum,ProcNum) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(hL7ProcAttach.HL7ProcAttachNum)+",";
			}
			command+=
				     POut.Long  (hL7ProcAttach.HL7MsgNum)+","
				+    POut.Long  (hL7ProcAttach.ProcNum)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				hL7ProcAttach.HL7ProcAttachNum=Db.NonQ(command,true,"HL7ProcAttachNum","hL7ProcAttach");
			}
			return hL7ProcAttach.HL7ProcAttachNum;
		}

		///<summary>Updates one HL7ProcAttach in the database.</summary>
		public static void Update(HL7ProcAttach hL7ProcAttach){
			string command="UPDATE hl7procattach SET "
				+"HL7MsgNum       =  "+POut.Long  (hL7ProcAttach.HL7MsgNum)+", "
				+"ProcNum         =  "+POut.Long  (hL7ProcAttach.ProcNum)+" "
				+"WHERE HL7ProcAttachNum = "+POut.Long(hL7ProcAttach.HL7ProcAttachNum);
			Db.NonQ(command);
		}

		///<summary>Updates one HL7ProcAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(HL7ProcAttach hL7ProcAttach,HL7ProcAttach oldHL7ProcAttach){
			string command="";
			if(hL7ProcAttach.HL7MsgNum != oldHL7ProcAttach.HL7MsgNum) {
				if(command!=""){ command+=",";}
				command+="HL7MsgNum = "+POut.Long(hL7ProcAttach.HL7MsgNum)+"";
			}
			if(hL7ProcAttach.ProcNum != oldHL7ProcAttach.ProcNum) {
				if(command!=""){ command+=",";}
				command+="ProcNum = "+POut.Long(hL7ProcAttach.ProcNum)+"";
			}
			if(command==""){
				return false;
			}
			command="UPDATE hl7procattach SET "+command
				+" WHERE HL7ProcAttachNum = "+POut.Long(hL7ProcAttach.HL7ProcAttachNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(HL7ProcAttach,HL7ProcAttach) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(HL7ProcAttach hL7ProcAttach,HL7ProcAttach oldHL7ProcAttach) {
			if(hL7ProcAttach.HL7MsgNum != oldHL7ProcAttach.HL7MsgNum) {
				return true;
			}
			if(hL7ProcAttach.ProcNum != oldHL7ProcAttach.ProcNum) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one HL7ProcAttach from the database.</summary>
		public static void Delete(long hL7ProcAttachNum){
			string command="DELETE FROM hl7procattach "
				+"WHERE HL7ProcAttachNum = "+POut.Long(hL7ProcAttachNum);
			Db.NonQ(command);
		}

	}
}