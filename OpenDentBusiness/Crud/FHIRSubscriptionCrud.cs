//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class FHIRSubscriptionCrud {
		///<summary>Gets one FHIRSubscription object from the database using the primary key.  Returns null if not found.</summary>
		public static FHIRSubscription SelectOne(long fHIRSubscriptionNum){
			string command="SELECT * FROM fhirsubscription "
				+"WHERE FHIRSubscriptionNum = "+POut.Long(fHIRSubscriptionNum);
			List<FHIRSubscription> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one FHIRSubscription object from the database using a query.</summary>
		public static FHIRSubscription SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<FHIRSubscription> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of FHIRSubscription objects from the database using a query.</summary>
		public static List<FHIRSubscription> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<FHIRSubscription> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<FHIRSubscription> TableToList(DataTable table){
			List<FHIRSubscription> retVal=new List<FHIRSubscription>();
			FHIRSubscription fHIRSubscription;
			foreach(DataRow row in table.Rows) {
				fHIRSubscription=new FHIRSubscription();
				fHIRSubscription.FHIRSubscriptionNum= PIn.Long  (row["FHIRSubscriptionNum"].ToString());
				fHIRSubscription.Criteria           = PIn.String(row["Criteria"].ToString());
				fHIRSubscription.Reason             = PIn.String(row["Reason"].ToString());
				fHIRSubscription.SubStatus          = (OpenDentBusiness.SubscriptionStatus)PIn.Int(row["SubStatus"].ToString());
				fHIRSubscription.ErrorNote          = PIn.String(row["ErrorNote"].ToString());
				fHIRSubscription.ChannelType        = (OpenDentBusiness.SubscriptionChannelType)PIn.Int(row["ChannelType"].ToString());
				fHIRSubscription.ChannelEndpoint    = PIn.String(row["ChannelEndpoint"].ToString());
				fHIRSubscription.ChannelPayLoad     = PIn.String(row["ChannelPayLoad"].ToString());
				fHIRSubscription.ChannelHeader      = PIn.String(row["ChannelHeader"].ToString());
				fHIRSubscription.DateEnd            = PIn.DateT (row["DateEnd"].ToString());
				fHIRSubscription.APIKeyHash         = PIn.String(row["APIKeyHash"].ToString());
				retVal.Add(fHIRSubscription);
			}
			return retVal;
		}

		///<summary>Converts a list of FHIRSubscription into a DataTable.</summary>
		public static DataTable ListToTable(List<FHIRSubscription> listFHIRSubscriptions,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="FHIRSubscription";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("FHIRSubscriptionNum");
			table.Columns.Add("Criteria");
			table.Columns.Add("Reason");
			table.Columns.Add("SubStatus");
			table.Columns.Add("ErrorNote");
			table.Columns.Add("ChannelType");
			table.Columns.Add("ChannelEndpoint");
			table.Columns.Add("ChannelPayLoad");
			table.Columns.Add("ChannelHeader");
			table.Columns.Add("DateEnd");
			table.Columns.Add("APIKeyHash");
			foreach(FHIRSubscription fHIRSubscription in listFHIRSubscriptions) {
				table.Rows.Add(new object[] {
					POut.Long  (fHIRSubscription.FHIRSubscriptionNum),
					            fHIRSubscription.Criteria,
					            fHIRSubscription.Reason,
					POut.Int   ((int)fHIRSubscription.SubStatus),
					            fHIRSubscription.ErrorNote,
					POut.Int   ((int)fHIRSubscription.ChannelType),
					            fHIRSubscription.ChannelEndpoint,
					            fHIRSubscription.ChannelPayLoad,
					            fHIRSubscription.ChannelHeader,
					POut.DateT (fHIRSubscription.DateEnd,false),
					            fHIRSubscription.APIKeyHash,
				});
			}
			return table;
		}

		///<summary>Inserts one FHIRSubscription into the database.  Returns the new priKey.</summary>
		public static long Insert(FHIRSubscription fHIRSubscription){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				fHIRSubscription.FHIRSubscriptionNum=DbHelper.GetNextOracleKey("fhirsubscription","FHIRSubscriptionNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(fHIRSubscription,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							fHIRSubscription.FHIRSubscriptionNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(fHIRSubscription,false);
			}
		}

		///<summary>Inserts one FHIRSubscription into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(FHIRSubscription fHIRSubscription,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				fHIRSubscription.FHIRSubscriptionNum=ReplicationServers.GetKey("fhirsubscription","FHIRSubscriptionNum");
			}
			string command="INSERT INTO fhirsubscription (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="FHIRSubscriptionNum,";
			}
			command+="Criteria,Reason,SubStatus,ErrorNote,ChannelType,ChannelEndpoint,ChannelPayLoad,ChannelHeader,DateEnd,APIKeyHash) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(fHIRSubscription.FHIRSubscriptionNum)+",";
			}
			command+=
				 "'"+POut.String(fHIRSubscription.Criteria)+"',"
				+"'"+POut.String(fHIRSubscription.Reason)+"',"
				+    POut.Int   ((int)fHIRSubscription.SubStatus)+","
				+    DbHelper.ParamChar+"paramErrorNote,"
				+    POut.Int   ((int)fHIRSubscription.ChannelType)+","
				+"'"+POut.String(fHIRSubscription.ChannelEndpoint)+"',"
				+"'"+POut.String(fHIRSubscription.ChannelPayLoad)+"',"
				+"'"+POut.String(fHIRSubscription.ChannelHeader)+"',"
				+    POut.DateT (fHIRSubscription.DateEnd)+","
				+"'"+POut.String(fHIRSubscription.APIKeyHash)+"')";
			if(fHIRSubscription.ErrorNote==null) {
				fHIRSubscription.ErrorNote="";
			}
			OdSqlParameter paramErrorNote=new OdSqlParameter("paramErrorNote",OdDbType.Text,POut.StringParam(fHIRSubscription.ErrorNote));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramErrorNote);
			}
			else {
				fHIRSubscription.FHIRSubscriptionNum=Db.NonQ(command,true,"FHIRSubscriptionNum","fHIRSubscription",paramErrorNote);
			}
			return fHIRSubscription.FHIRSubscriptionNum;
		}

		///<summary>Inserts one FHIRSubscription into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(FHIRSubscription fHIRSubscription){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(fHIRSubscription,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					fHIRSubscription.FHIRSubscriptionNum=DbHelper.GetNextOracleKey("fhirsubscription","FHIRSubscriptionNum"); //Cacheless method
				}
				return InsertNoCache(fHIRSubscription,true);
			}
		}

		///<summary>Inserts one FHIRSubscription into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(FHIRSubscription fHIRSubscription,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO fhirsubscription (";
			if(!useExistingPK && isRandomKeys) {
				fHIRSubscription.FHIRSubscriptionNum=ReplicationServers.GetKeyNoCache("fhirsubscription","FHIRSubscriptionNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="FHIRSubscriptionNum,";
			}
			command+="Criteria,Reason,SubStatus,ErrorNote,ChannelType,ChannelEndpoint,ChannelPayLoad,ChannelHeader,DateEnd,APIKeyHash) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(fHIRSubscription.FHIRSubscriptionNum)+",";
			}
			command+=
				 "'"+POut.String(fHIRSubscription.Criteria)+"',"
				+"'"+POut.String(fHIRSubscription.Reason)+"',"
				+    POut.Int   ((int)fHIRSubscription.SubStatus)+","
				+    DbHelper.ParamChar+"paramErrorNote,"
				+    POut.Int   ((int)fHIRSubscription.ChannelType)+","
				+"'"+POut.String(fHIRSubscription.ChannelEndpoint)+"',"
				+"'"+POut.String(fHIRSubscription.ChannelPayLoad)+"',"
				+"'"+POut.String(fHIRSubscription.ChannelHeader)+"',"
				+    POut.DateT (fHIRSubscription.DateEnd)+","
				+"'"+POut.String(fHIRSubscription.APIKeyHash)+"')";
			if(fHIRSubscription.ErrorNote==null) {
				fHIRSubscription.ErrorNote="";
			}
			OdSqlParameter paramErrorNote=new OdSqlParameter("paramErrorNote",OdDbType.Text,POut.StringParam(fHIRSubscription.ErrorNote));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramErrorNote);
			}
			else {
				fHIRSubscription.FHIRSubscriptionNum=Db.NonQ(command,true,"FHIRSubscriptionNum","fHIRSubscription",paramErrorNote);
			}
			return fHIRSubscription.FHIRSubscriptionNum;
		}

		///<summary>Updates one FHIRSubscription in the database.</summary>
		public static void Update(FHIRSubscription fHIRSubscription){
			string command="UPDATE fhirsubscription SET "
				+"Criteria           = '"+POut.String(fHIRSubscription.Criteria)+"', "
				+"Reason             = '"+POut.String(fHIRSubscription.Reason)+"', "
				+"SubStatus          =  "+POut.Int   ((int)fHIRSubscription.SubStatus)+", "
				+"ErrorNote          =  "+DbHelper.ParamChar+"paramErrorNote, "
				+"ChannelType        =  "+POut.Int   ((int)fHIRSubscription.ChannelType)+", "
				+"ChannelEndpoint    = '"+POut.String(fHIRSubscription.ChannelEndpoint)+"', "
				+"ChannelPayLoad     = '"+POut.String(fHIRSubscription.ChannelPayLoad)+"', "
				+"ChannelHeader      = '"+POut.String(fHIRSubscription.ChannelHeader)+"', "
				+"DateEnd            =  "+POut.DateT (fHIRSubscription.DateEnd)+", "
				+"APIKeyHash         = '"+POut.String(fHIRSubscription.APIKeyHash)+"' "
				+"WHERE FHIRSubscriptionNum = "+POut.Long(fHIRSubscription.FHIRSubscriptionNum);
			if(fHIRSubscription.ErrorNote==null) {
				fHIRSubscription.ErrorNote="";
			}
			OdSqlParameter paramErrorNote=new OdSqlParameter("paramErrorNote",OdDbType.Text,POut.StringParam(fHIRSubscription.ErrorNote));
			Db.NonQ(command,paramErrorNote);
		}

		///<summary>Updates one FHIRSubscription in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(FHIRSubscription fHIRSubscription,FHIRSubscription oldFHIRSubscription){
			string command="";
			if(fHIRSubscription.Criteria != oldFHIRSubscription.Criteria) {
				if(command!=""){ command+=",";}
				command+="Criteria = '"+POut.String(fHIRSubscription.Criteria)+"'";
			}
			if(fHIRSubscription.Reason != oldFHIRSubscription.Reason) {
				if(command!=""){ command+=",";}
				command+="Reason = '"+POut.String(fHIRSubscription.Reason)+"'";
			}
			if(fHIRSubscription.SubStatus != oldFHIRSubscription.SubStatus) {
				if(command!=""){ command+=",";}
				command+="SubStatus = "+POut.Int   ((int)fHIRSubscription.SubStatus)+"";
			}
			if(fHIRSubscription.ErrorNote != oldFHIRSubscription.ErrorNote) {
				if(command!=""){ command+=",";}
				command+="ErrorNote = "+DbHelper.ParamChar+"paramErrorNote";
			}
			if(fHIRSubscription.ChannelType != oldFHIRSubscription.ChannelType) {
				if(command!=""){ command+=",";}
				command+="ChannelType = "+POut.Int   ((int)fHIRSubscription.ChannelType)+"";
			}
			if(fHIRSubscription.ChannelEndpoint != oldFHIRSubscription.ChannelEndpoint) {
				if(command!=""){ command+=",";}
				command+="ChannelEndpoint = '"+POut.String(fHIRSubscription.ChannelEndpoint)+"'";
			}
			if(fHIRSubscription.ChannelPayLoad != oldFHIRSubscription.ChannelPayLoad) {
				if(command!=""){ command+=",";}
				command+="ChannelPayLoad = '"+POut.String(fHIRSubscription.ChannelPayLoad)+"'";
			}
			if(fHIRSubscription.ChannelHeader != oldFHIRSubscription.ChannelHeader) {
				if(command!=""){ command+=",";}
				command+="ChannelHeader = '"+POut.String(fHIRSubscription.ChannelHeader)+"'";
			}
			if(fHIRSubscription.DateEnd != oldFHIRSubscription.DateEnd) {
				if(command!=""){ command+=",";}
				command+="DateEnd = "+POut.DateT(fHIRSubscription.DateEnd)+"";
			}
			if(fHIRSubscription.APIKeyHash != oldFHIRSubscription.APIKeyHash) {
				if(command!=""){ command+=",";}
				command+="APIKeyHash = '"+POut.String(fHIRSubscription.APIKeyHash)+"'";
			}
			if(command==""){
				return false;
			}
			if(fHIRSubscription.ErrorNote==null) {
				fHIRSubscription.ErrorNote="";
			}
			OdSqlParameter paramErrorNote=new OdSqlParameter("paramErrorNote",OdDbType.Text,POut.StringParam(fHIRSubscription.ErrorNote));
			command="UPDATE fhirsubscription SET "+command
				+" WHERE FHIRSubscriptionNum = "+POut.Long(fHIRSubscription.FHIRSubscriptionNum);
			Db.NonQ(command,paramErrorNote);
			return true;
		}

		///<summary>Returns true if Update(FHIRSubscription,FHIRSubscription) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(FHIRSubscription fHIRSubscription,FHIRSubscription oldFHIRSubscription) {
			if(fHIRSubscription.Criteria != oldFHIRSubscription.Criteria) {
				return true;
			}
			if(fHIRSubscription.Reason != oldFHIRSubscription.Reason) {
				return true;
			}
			if(fHIRSubscription.SubStatus != oldFHIRSubscription.SubStatus) {
				return true;
			}
			if(fHIRSubscription.ErrorNote != oldFHIRSubscription.ErrorNote) {
				return true;
			}
			if(fHIRSubscription.ChannelType != oldFHIRSubscription.ChannelType) {
				return true;
			}
			if(fHIRSubscription.ChannelEndpoint != oldFHIRSubscription.ChannelEndpoint) {
				return true;
			}
			if(fHIRSubscription.ChannelPayLoad != oldFHIRSubscription.ChannelPayLoad) {
				return true;
			}
			if(fHIRSubscription.ChannelHeader != oldFHIRSubscription.ChannelHeader) {
				return true;
			}
			if(fHIRSubscription.DateEnd != oldFHIRSubscription.DateEnd) {
				return true;
			}
			if(fHIRSubscription.APIKeyHash != oldFHIRSubscription.APIKeyHash) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one FHIRSubscription from the database.</summary>
		public static void Delete(long fHIRSubscriptionNum){
			string command="DELETE FROM fhirsubscription "
				+"WHERE FHIRSubscriptionNum = "+POut.Long(fHIRSubscriptionNum);
			Db.NonQ(command);
		}

	}
}