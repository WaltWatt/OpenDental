//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class CanadianNetworkCrud {
		///<summary>Gets one CanadianNetwork object from the database using the primary key.  Returns null if not found.</summary>
		public static CanadianNetwork SelectOne(long canadianNetworkNum){
			string command="SELECT * FROM canadiannetwork "
				+"WHERE CanadianNetworkNum = "+POut.Long(canadianNetworkNum);
			List<CanadianNetwork> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one CanadianNetwork object from the database using a query.</summary>
		public static CanadianNetwork SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<CanadianNetwork> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of CanadianNetwork objects from the database using a query.</summary>
		public static List<CanadianNetwork> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<CanadianNetwork> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<CanadianNetwork> TableToList(DataTable table){
			List<CanadianNetwork> retVal=new List<CanadianNetwork>();
			CanadianNetwork canadianNetwork;
			foreach(DataRow row in table.Rows) {
				canadianNetwork=new CanadianNetwork();
				canadianNetwork.CanadianNetworkNum       = PIn.Long  (row["CanadianNetworkNum"].ToString());
				canadianNetwork.Abbrev                   = PIn.String(row["Abbrev"].ToString());
				canadianNetwork.Descript                 = PIn.String(row["Descript"].ToString());
				canadianNetwork.CanadianTransactionPrefix= PIn.String(row["CanadianTransactionPrefix"].ToString());
				canadianNetwork.CanadianIsRprHandler     = PIn.Bool  (row["CanadianIsRprHandler"].ToString());
				retVal.Add(canadianNetwork);
			}
			return retVal;
		}

		///<summary>Converts a list of CanadianNetwork into a DataTable.</summary>
		public static DataTable ListToTable(List<CanadianNetwork> listCanadianNetworks,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="CanadianNetwork";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("CanadianNetworkNum");
			table.Columns.Add("Abbrev");
			table.Columns.Add("Descript");
			table.Columns.Add("CanadianTransactionPrefix");
			table.Columns.Add("CanadianIsRprHandler");
			foreach(CanadianNetwork canadianNetwork in listCanadianNetworks) {
				table.Rows.Add(new object[] {
					POut.Long  (canadianNetwork.CanadianNetworkNum),
					            canadianNetwork.Abbrev,
					            canadianNetwork.Descript,
					            canadianNetwork.CanadianTransactionPrefix,
					POut.Bool  (canadianNetwork.CanadianIsRprHandler),
				});
			}
			return table;
		}

		///<summary>Inserts one CanadianNetwork into the database.  Returns the new priKey.</summary>
		public static long Insert(CanadianNetwork canadianNetwork){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				canadianNetwork.CanadianNetworkNum=DbHelper.GetNextOracleKey("canadiannetwork","CanadianNetworkNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(canadianNetwork,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							canadianNetwork.CanadianNetworkNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(canadianNetwork,false);
			}
		}

		///<summary>Inserts one CanadianNetwork into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(CanadianNetwork canadianNetwork,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				canadianNetwork.CanadianNetworkNum=ReplicationServers.GetKey("canadiannetwork","CanadianNetworkNum");
			}
			string command="INSERT INTO canadiannetwork (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="CanadianNetworkNum,";
			}
			command+="Abbrev,Descript,CanadianTransactionPrefix,CanadianIsRprHandler) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(canadianNetwork.CanadianNetworkNum)+",";
			}
			command+=
				 "'"+POut.String(canadianNetwork.Abbrev)+"',"
				+"'"+POut.String(canadianNetwork.Descript)+"',"
				+"'"+POut.String(canadianNetwork.CanadianTransactionPrefix)+"',"
				+    POut.Bool  (canadianNetwork.CanadianIsRprHandler)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				canadianNetwork.CanadianNetworkNum=Db.NonQ(command,true,"CanadianNetworkNum","canadianNetwork");
			}
			return canadianNetwork.CanadianNetworkNum;
		}

		///<summary>Inserts one CanadianNetwork into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(CanadianNetwork canadianNetwork){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(canadianNetwork,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					canadianNetwork.CanadianNetworkNum=DbHelper.GetNextOracleKey("canadiannetwork","CanadianNetworkNum"); //Cacheless method
				}
				return InsertNoCache(canadianNetwork,true);
			}
		}

		///<summary>Inserts one CanadianNetwork into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(CanadianNetwork canadianNetwork,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO canadiannetwork (";
			if(!useExistingPK && isRandomKeys) {
				canadianNetwork.CanadianNetworkNum=ReplicationServers.GetKeyNoCache("canadiannetwork","CanadianNetworkNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="CanadianNetworkNum,";
			}
			command+="Abbrev,Descript,CanadianTransactionPrefix,CanadianIsRprHandler) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(canadianNetwork.CanadianNetworkNum)+",";
			}
			command+=
				 "'"+POut.String(canadianNetwork.Abbrev)+"',"
				+"'"+POut.String(canadianNetwork.Descript)+"',"
				+"'"+POut.String(canadianNetwork.CanadianTransactionPrefix)+"',"
				+    POut.Bool  (canadianNetwork.CanadianIsRprHandler)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				canadianNetwork.CanadianNetworkNum=Db.NonQ(command,true,"CanadianNetworkNum","canadianNetwork");
			}
			return canadianNetwork.CanadianNetworkNum;
		}

		///<summary>Updates one CanadianNetwork in the database.</summary>
		public static void Update(CanadianNetwork canadianNetwork){
			string command="UPDATE canadiannetwork SET "
				+"Abbrev                   = '"+POut.String(canadianNetwork.Abbrev)+"', "
				+"Descript                 = '"+POut.String(canadianNetwork.Descript)+"', "
				+"CanadianTransactionPrefix= '"+POut.String(canadianNetwork.CanadianTransactionPrefix)+"', "
				+"CanadianIsRprHandler     =  "+POut.Bool  (canadianNetwork.CanadianIsRprHandler)+" "
				+"WHERE CanadianNetworkNum = "+POut.Long(canadianNetwork.CanadianNetworkNum);
			Db.NonQ(command);
		}

		///<summary>Updates one CanadianNetwork in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(CanadianNetwork canadianNetwork,CanadianNetwork oldCanadianNetwork){
			string command="";
			if(canadianNetwork.Abbrev != oldCanadianNetwork.Abbrev) {
				if(command!=""){ command+=",";}
				command+="Abbrev = '"+POut.String(canadianNetwork.Abbrev)+"'";
			}
			if(canadianNetwork.Descript != oldCanadianNetwork.Descript) {
				if(command!=""){ command+=",";}
				command+="Descript = '"+POut.String(canadianNetwork.Descript)+"'";
			}
			if(canadianNetwork.CanadianTransactionPrefix != oldCanadianNetwork.CanadianTransactionPrefix) {
				if(command!=""){ command+=",";}
				command+="CanadianTransactionPrefix = '"+POut.String(canadianNetwork.CanadianTransactionPrefix)+"'";
			}
			if(canadianNetwork.CanadianIsRprHandler != oldCanadianNetwork.CanadianIsRprHandler) {
				if(command!=""){ command+=",";}
				command+="CanadianIsRprHandler = "+POut.Bool(canadianNetwork.CanadianIsRprHandler)+"";
			}
			if(command==""){
				return false;
			}
			command="UPDATE canadiannetwork SET "+command
				+" WHERE CanadianNetworkNum = "+POut.Long(canadianNetwork.CanadianNetworkNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(CanadianNetwork,CanadianNetwork) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(CanadianNetwork canadianNetwork,CanadianNetwork oldCanadianNetwork) {
			if(canadianNetwork.Abbrev != oldCanadianNetwork.Abbrev) {
				return true;
			}
			if(canadianNetwork.Descript != oldCanadianNetwork.Descript) {
				return true;
			}
			if(canadianNetwork.CanadianTransactionPrefix != oldCanadianNetwork.CanadianTransactionPrefix) {
				return true;
			}
			if(canadianNetwork.CanadianIsRprHandler != oldCanadianNetwork.CanadianIsRprHandler) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one CanadianNetwork from the database.</summary>
		public static void Delete(long canadianNetworkNum){
			string command="DELETE FROM canadiannetwork "
				+"WHERE CanadianNetworkNum = "+POut.Long(canadianNetworkNum);
			Db.NonQ(command);
		}

	}
}