//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class SiteLinkCrud {
		///<summary>Gets one SiteLink object from the database using the primary key.  Returns null if not found.</summary>
		public static SiteLink SelectOne(long siteLinkNum){
			string command="SELECT * FROM sitelink "
				+"WHERE SiteLinkNum = "+POut.Long(siteLinkNum);
			List<SiteLink> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one SiteLink object from the database using a query.</summary>
		public static SiteLink SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<SiteLink> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of SiteLink objects from the database using a query.</summary>
		public static List<SiteLink> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<SiteLink> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<SiteLink> TableToList(DataTable table){
			List<SiteLink> retVal=new List<SiteLink>();
			SiteLink siteLink;
			foreach(DataRow row in table.Rows) {
				siteLink=new SiteLink();
				siteLink.SiteLinkNum= PIn.Long  (row["SiteLinkNum"].ToString());
				siteLink.SiteNum    = PIn.Long  (row["SiteNum"].ToString());
				siteLink.OctetStart = PIn.String(row["OctetStart"].ToString());
				siteLink.EmployeeNum= PIn.Long  (row["EmployeeNum"].ToString());
				siteLink.SiteColor  = Color.FromArgb(PIn.Int(row["SiteColor"].ToString()));
				siteLink.ForeColor  = Color.FromArgb(PIn.Int(row["ForeColor"].ToString()));
				siteLink.InnerColor = Color.FromArgb(PIn.Int(row["InnerColor"].ToString()));
				siteLink.OuterColor = Color.FromArgb(PIn.Int(row["OuterColor"].ToString()));
				retVal.Add(siteLink);
			}
			return retVal;
		}

		///<summary>Converts a list of SiteLink into a DataTable.</summary>
		public static DataTable ListToTable(List<SiteLink> listSiteLinks,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="SiteLink";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("SiteLinkNum");
			table.Columns.Add("SiteNum");
			table.Columns.Add("OctetStart");
			table.Columns.Add("EmployeeNum");
			table.Columns.Add("SiteColor");
			table.Columns.Add("ForeColor");
			table.Columns.Add("InnerColor");
			table.Columns.Add("OuterColor");
			foreach(SiteLink siteLink in listSiteLinks) {
				table.Rows.Add(new object[] {
					POut.Long  (siteLink.SiteLinkNum),
					POut.Long  (siteLink.SiteNum),
					            siteLink.OctetStart,
					POut.Long  (siteLink.EmployeeNum),
					POut.Int   (siteLink.SiteColor.ToArgb()),
					POut.Int   (siteLink.ForeColor.ToArgb()),
					POut.Int   (siteLink.InnerColor.ToArgb()),
					POut.Int   (siteLink.OuterColor.ToArgb()),
				});
			}
			return table;
		}

		///<summary>Inserts one SiteLink into the database.  Returns the new priKey.</summary>
		public static long Insert(SiteLink siteLink){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				siteLink.SiteLinkNum=DbHelper.GetNextOracleKey("sitelink","SiteLinkNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(siteLink,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							siteLink.SiteLinkNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(siteLink,false);
			}
		}

		///<summary>Inserts one SiteLink into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(SiteLink siteLink,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				siteLink.SiteLinkNum=ReplicationServers.GetKey("sitelink","SiteLinkNum");
			}
			string command="INSERT INTO sitelink (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="SiteLinkNum,";
			}
			command+="SiteNum,OctetStart,EmployeeNum,SiteColor,ForeColor,InnerColor,OuterColor) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(siteLink.SiteLinkNum)+",";
			}
			command+=
				     POut.Long  (siteLink.SiteNum)+","
				+"'"+POut.String(siteLink.OctetStart)+"',"
				+    POut.Long  (siteLink.EmployeeNum)+","
				+    POut.Int   (siteLink.SiteColor.ToArgb())+","
				+    POut.Int   (siteLink.ForeColor.ToArgb())+","
				+    POut.Int   (siteLink.InnerColor.ToArgb())+","
				+    POut.Int   (siteLink.OuterColor.ToArgb())+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				siteLink.SiteLinkNum=Db.NonQ(command,true,"SiteLinkNum","siteLink");
			}
			return siteLink.SiteLinkNum;
		}

		///<summary>Inserts one SiteLink into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(SiteLink siteLink){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(siteLink,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					siteLink.SiteLinkNum=DbHelper.GetNextOracleKey("sitelink","SiteLinkNum"); //Cacheless method
				}
				return InsertNoCache(siteLink,true);
			}
		}

		///<summary>Inserts one SiteLink into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(SiteLink siteLink,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO sitelink (";
			if(!useExistingPK && isRandomKeys) {
				siteLink.SiteLinkNum=ReplicationServers.GetKeyNoCache("sitelink","SiteLinkNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="SiteLinkNum,";
			}
			command+="SiteNum,OctetStart,EmployeeNum,SiteColor,ForeColor,InnerColor,OuterColor) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(siteLink.SiteLinkNum)+",";
			}
			command+=
				     POut.Long  (siteLink.SiteNum)+","
				+"'"+POut.String(siteLink.OctetStart)+"',"
				+    POut.Long  (siteLink.EmployeeNum)+","
				+    POut.Int   (siteLink.SiteColor.ToArgb())+","
				+    POut.Int   (siteLink.ForeColor.ToArgb())+","
				+    POut.Int   (siteLink.InnerColor.ToArgb())+","
				+    POut.Int   (siteLink.OuterColor.ToArgb())+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				siteLink.SiteLinkNum=Db.NonQ(command,true,"SiteLinkNum","siteLink");
			}
			return siteLink.SiteLinkNum;
		}

		///<summary>Updates one SiteLink in the database.</summary>
		public static void Update(SiteLink siteLink){
			string command="UPDATE sitelink SET "
				+"SiteNum    =  "+POut.Long  (siteLink.SiteNum)+", "
				+"OctetStart = '"+POut.String(siteLink.OctetStart)+"', "
				+"EmployeeNum=  "+POut.Long  (siteLink.EmployeeNum)+", "
				+"SiteColor  =  "+POut.Int   (siteLink.SiteColor.ToArgb())+", "
				+"ForeColor  =  "+POut.Int   (siteLink.ForeColor.ToArgb())+", "
				+"InnerColor =  "+POut.Int   (siteLink.InnerColor.ToArgb())+", "
				+"OuterColor =  "+POut.Int   (siteLink.OuterColor.ToArgb())+" "
				+"WHERE SiteLinkNum = "+POut.Long(siteLink.SiteLinkNum);
			Db.NonQ(command);
		}

		///<summary>Updates one SiteLink in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(SiteLink siteLink,SiteLink oldSiteLink){
			string command="";
			if(siteLink.SiteNum != oldSiteLink.SiteNum) {
				if(command!=""){ command+=",";}
				command+="SiteNum = "+POut.Long(siteLink.SiteNum)+"";
			}
			if(siteLink.OctetStart != oldSiteLink.OctetStart) {
				if(command!=""){ command+=",";}
				command+="OctetStart = '"+POut.String(siteLink.OctetStart)+"'";
			}
			if(siteLink.EmployeeNum != oldSiteLink.EmployeeNum) {
				if(command!=""){ command+=",";}
				command+="EmployeeNum = "+POut.Long(siteLink.EmployeeNum)+"";
			}
			if(siteLink.SiteColor != oldSiteLink.SiteColor) {
				if(command!=""){ command+=",";}
				command+="SiteColor = "+POut.Int(siteLink.SiteColor.ToArgb())+"";
			}
			if(siteLink.ForeColor != oldSiteLink.ForeColor) {
				if(command!=""){ command+=",";}
				command+="ForeColor = "+POut.Int(siteLink.ForeColor.ToArgb())+"";
			}
			if(siteLink.InnerColor != oldSiteLink.InnerColor) {
				if(command!=""){ command+=",";}
				command+="InnerColor = "+POut.Int(siteLink.InnerColor.ToArgb())+"";
			}
			if(siteLink.OuterColor != oldSiteLink.OuterColor) {
				if(command!=""){ command+=",";}
				command+="OuterColor = "+POut.Int(siteLink.OuterColor.ToArgb())+"";
			}
			if(command==""){
				return false;
			}
			command="UPDATE sitelink SET "+command
				+" WHERE SiteLinkNum = "+POut.Long(siteLink.SiteLinkNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(SiteLink,SiteLink) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(SiteLink siteLink,SiteLink oldSiteLink) {
			if(siteLink.SiteNum != oldSiteLink.SiteNum) {
				return true;
			}
			if(siteLink.OctetStart != oldSiteLink.OctetStart) {
				return true;
			}
			if(siteLink.EmployeeNum != oldSiteLink.EmployeeNum) {
				return true;
			}
			if(siteLink.SiteColor != oldSiteLink.SiteColor) {
				return true;
			}
			if(siteLink.ForeColor != oldSiteLink.ForeColor) {
				return true;
			}
			if(siteLink.InnerColor != oldSiteLink.InnerColor) {
				return true;
			}
			if(siteLink.OuterColor != oldSiteLink.OuterColor) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one SiteLink from the database.</summary>
		public static void Delete(long siteLinkNum){
			string command="DELETE FROM sitelink "
				+"WHERE SiteLinkNum = "+POut.Long(siteLinkNum);
			Db.NonQ(command);
		}

	}
}