//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class WikiPageHistCrud {
		///<summary>Gets one WikiPageHist object from the database using the primary key.  Returns null if not found.</summary>
		public static WikiPageHist SelectOne(long wikiPageNum){
			string command="SELECT * FROM wikipagehist "
				+"WHERE WikiPageNum = "+POut.Long(wikiPageNum);
			List<WikiPageHist> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one WikiPageHist object from the database using a query.</summary>
		public static WikiPageHist SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<WikiPageHist> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of WikiPageHist objects from the database using a query.</summary>
		public static List<WikiPageHist> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<WikiPageHist> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<WikiPageHist> TableToList(DataTable table){
			List<WikiPageHist> retVal=new List<WikiPageHist>();
			WikiPageHist wikiPageHist;
			foreach(DataRow row in table.Rows) {
				wikiPageHist=new WikiPageHist();
				wikiPageHist.WikiPageNum  = PIn.Long  (row["WikiPageNum"].ToString());
				wikiPageHist.UserNum      = PIn.Long  (row["UserNum"].ToString());
				wikiPageHist.PageTitle    = PIn.String(row["PageTitle"].ToString());
				wikiPageHist.PageContent  = PIn.String(row["PageContent"].ToString());
				wikiPageHist.DateTimeSaved= PIn.DateT (row["DateTimeSaved"].ToString());
				wikiPageHist.IsDeleted    = PIn.Bool  (row["IsDeleted"].ToString());
				retVal.Add(wikiPageHist);
			}
			return retVal;
		}

		///<summary>Converts a list of WikiPageHist into a DataTable.</summary>
		public static DataTable ListToTable(List<WikiPageHist> listWikiPageHists,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="WikiPageHist";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("WikiPageNum");
			table.Columns.Add("UserNum");
			table.Columns.Add("PageTitle");
			table.Columns.Add("PageContent");
			table.Columns.Add("DateTimeSaved");
			table.Columns.Add("IsDeleted");
			foreach(WikiPageHist wikiPageHist in listWikiPageHists) {
				table.Rows.Add(new object[] {
					POut.Long  (wikiPageHist.WikiPageNum),
					POut.Long  (wikiPageHist.UserNum),
					            wikiPageHist.PageTitle,
					            wikiPageHist.PageContent,
					POut.DateT (wikiPageHist.DateTimeSaved,false),
					POut.Bool  (wikiPageHist.IsDeleted),
				});
			}
			return table;
		}

		///<summary>Inserts one WikiPageHist into the database.  Returns the new priKey.</summary>
		public static long Insert(WikiPageHist wikiPageHist){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				wikiPageHist.WikiPageNum=DbHelper.GetNextOracleKey("wikipagehist","WikiPageNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(wikiPageHist,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							wikiPageHist.WikiPageNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(wikiPageHist,false);
			}
		}

		///<summary>Inserts one WikiPageHist into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(WikiPageHist wikiPageHist,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				wikiPageHist.WikiPageNum=ReplicationServers.GetKey("wikipagehist","WikiPageNum");
			}
			string command="INSERT INTO wikipagehist (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="WikiPageNum,";
			}
			command+="UserNum,PageTitle,PageContent,DateTimeSaved,IsDeleted) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(wikiPageHist.WikiPageNum)+",";
			}
			command+=
				     POut.Long  (wikiPageHist.UserNum)+","
				+"'"+POut.String(wikiPageHist.PageTitle)+"',"
				+    DbHelper.ParamChar+"paramPageContent,"
				+    POut.DateT (wikiPageHist.DateTimeSaved)+","
				+    POut.Bool  (wikiPageHist.IsDeleted)+")";
			if(wikiPageHist.PageContent==null) {
				wikiPageHist.PageContent="";
			}
			OdSqlParameter paramPageContent=new OdSqlParameter("paramPageContent",OdDbType.Text,POut.StringParam(wikiPageHist.PageContent));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramPageContent);
			}
			else {
				wikiPageHist.WikiPageNum=Db.NonQ(command,true,"WikiPageNum","wikiPageHist",paramPageContent);
			}
			return wikiPageHist.WikiPageNum;
		}

		///<summary>Inserts one WikiPageHist into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(WikiPageHist wikiPageHist){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(wikiPageHist,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					wikiPageHist.WikiPageNum=DbHelper.GetNextOracleKey("wikipagehist","WikiPageNum"); //Cacheless method
				}
				return InsertNoCache(wikiPageHist,true);
			}
		}

		///<summary>Inserts one WikiPageHist into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(WikiPageHist wikiPageHist,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO wikipagehist (";
			if(!useExistingPK && isRandomKeys) {
				wikiPageHist.WikiPageNum=ReplicationServers.GetKeyNoCache("wikipagehist","WikiPageNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="WikiPageNum,";
			}
			command+="UserNum,PageTitle,PageContent,DateTimeSaved,IsDeleted) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(wikiPageHist.WikiPageNum)+",";
			}
			command+=
				     POut.Long  (wikiPageHist.UserNum)+","
				+"'"+POut.String(wikiPageHist.PageTitle)+"',"
				+    DbHelper.ParamChar+"paramPageContent,"
				+    POut.DateT (wikiPageHist.DateTimeSaved)+","
				+    POut.Bool  (wikiPageHist.IsDeleted)+")";
			if(wikiPageHist.PageContent==null) {
				wikiPageHist.PageContent="";
			}
			OdSqlParameter paramPageContent=new OdSqlParameter("paramPageContent",OdDbType.Text,POut.StringParam(wikiPageHist.PageContent));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramPageContent);
			}
			else {
				wikiPageHist.WikiPageNum=Db.NonQ(command,true,"WikiPageNum","wikiPageHist",paramPageContent);
			}
			return wikiPageHist.WikiPageNum;
		}

		///<summary>Updates one WikiPageHist in the database.</summary>
		public static void Update(WikiPageHist wikiPageHist){
			string command="UPDATE wikipagehist SET "
				+"UserNum      =  "+POut.Long  (wikiPageHist.UserNum)+", "
				+"PageTitle    = '"+POut.String(wikiPageHist.PageTitle)+"', "
				+"PageContent  =  "+DbHelper.ParamChar+"paramPageContent, "
				+"DateTimeSaved=  "+POut.DateT (wikiPageHist.DateTimeSaved)+", "
				+"IsDeleted    =  "+POut.Bool  (wikiPageHist.IsDeleted)+" "
				+"WHERE WikiPageNum = "+POut.Long(wikiPageHist.WikiPageNum);
			if(wikiPageHist.PageContent==null) {
				wikiPageHist.PageContent="";
			}
			OdSqlParameter paramPageContent=new OdSqlParameter("paramPageContent",OdDbType.Text,POut.StringParam(wikiPageHist.PageContent));
			Db.NonQ(command,paramPageContent);
		}

		///<summary>Updates one WikiPageHist in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(WikiPageHist wikiPageHist,WikiPageHist oldWikiPageHist){
			string command="";
			if(wikiPageHist.UserNum != oldWikiPageHist.UserNum) {
				if(command!=""){ command+=",";}
				command+="UserNum = "+POut.Long(wikiPageHist.UserNum)+"";
			}
			if(wikiPageHist.PageTitle != oldWikiPageHist.PageTitle) {
				if(command!=""){ command+=",";}
				command+="PageTitle = '"+POut.String(wikiPageHist.PageTitle)+"'";
			}
			if(wikiPageHist.PageContent != oldWikiPageHist.PageContent) {
				if(command!=""){ command+=",";}
				command+="PageContent = "+DbHelper.ParamChar+"paramPageContent";
			}
			if(wikiPageHist.DateTimeSaved != oldWikiPageHist.DateTimeSaved) {
				if(command!=""){ command+=",";}
				command+="DateTimeSaved = "+POut.DateT(wikiPageHist.DateTimeSaved)+"";
			}
			if(wikiPageHist.IsDeleted != oldWikiPageHist.IsDeleted) {
				if(command!=""){ command+=",";}
				command+="IsDeleted = "+POut.Bool(wikiPageHist.IsDeleted)+"";
			}
			if(command==""){
				return false;
			}
			if(wikiPageHist.PageContent==null) {
				wikiPageHist.PageContent="";
			}
			OdSqlParameter paramPageContent=new OdSqlParameter("paramPageContent",OdDbType.Text,POut.StringParam(wikiPageHist.PageContent));
			command="UPDATE wikipagehist SET "+command
				+" WHERE WikiPageNum = "+POut.Long(wikiPageHist.WikiPageNum);
			Db.NonQ(command,paramPageContent);
			return true;
		}

		///<summary>Returns true if Update(WikiPageHist,WikiPageHist) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(WikiPageHist wikiPageHist,WikiPageHist oldWikiPageHist) {
			if(wikiPageHist.UserNum != oldWikiPageHist.UserNum) {
				return true;
			}
			if(wikiPageHist.PageTitle != oldWikiPageHist.PageTitle) {
				return true;
			}
			if(wikiPageHist.PageContent != oldWikiPageHist.PageContent) {
				return true;
			}
			if(wikiPageHist.DateTimeSaved != oldWikiPageHist.DateTimeSaved) {
				return true;
			}
			if(wikiPageHist.IsDeleted != oldWikiPageHist.IsDeleted) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one WikiPageHist from the database.</summary>
		public static void Delete(long wikiPageNum){
			string command="DELETE FROM wikipagehist "
				+"WHERE WikiPageNum = "+POut.Long(wikiPageNum);
			Db.NonQ(command);
		}

	}
}