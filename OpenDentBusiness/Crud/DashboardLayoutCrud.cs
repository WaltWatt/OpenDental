//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class DashboardLayoutCrud {
		///<summary>Gets one DashboardLayout object from the database using the primary key.  Returns null if not found.</summary>
		public static DashboardLayout SelectOne(long dashboardLayoutNum){
			string command="SELECT * FROM dashboardlayout "
				+"WHERE DashboardLayoutNum = "+POut.Long(dashboardLayoutNum);
			List<DashboardLayout> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one DashboardLayout object from the database using a query.</summary>
		public static DashboardLayout SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<DashboardLayout> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of DashboardLayout objects from the database using a query.</summary>
		public static List<DashboardLayout> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<DashboardLayout> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<DashboardLayout> TableToList(DataTable table){
			List<DashboardLayout> retVal=new List<DashboardLayout>();
			DashboardLayout dashboardLayout;
			foreach(DataRow row in table.Rows) {
				dashboardLayout=new DashboardLayout();
				dashboardLayout.DashboardLayoutNum= PIn.Long  (row["DashboardLayoutNum"].ToString());
				dashboardLayout.UserNum           = PIn.Long  (row["UserNum"].ToString());
				dashboardLayout.UserGroupNum      = PIn.Long  (row["UserGroupNum"].ToString());
				dashboardLayout.DashboardTabName  = PIn.String(row["DashboardTabName"].ToString());
				dashboardLayout.DashboardTabOrder = PIn.Int   (row["DashboardTabOrder"].ToString());
				dashboardLayout.DashboardRows     = PIn.Int   (row["DashboardRows"].ToString());
				dashboardLayout.DashboardColumns  = PIn.Int   (row["DashboardColumns"].ToString());
				dashboardLayout.DashboardGroupName= PIn.String(row["DashboardGroupName"].ToString());
				retVal.Add(dashboardLayout);
			}
			return retVal;
		}

		///<summary>Converts a list of DashboardLayout into a DataTable.</summary>
		public static DataTable ListToTable(List<DashboardLayout> listDashboardLayouts,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="DashboardLayout";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("DashboardLayoutNum");
			table.Columns.Add("UserNum");
			table.Columns.Add("UserGroupNum");
			table.Columns.Add("DashboardTabName");
			table.Columns.Add("DashboardTabOrder");
			table.Columns.Add("DashboardRows");
			table.Columns.Add("DashboardColumns");
			table.Columns.Add("DashboardGroupName");
			foreach(DashboardLayout dashboardLayout in listDashboardLayouts) {
				table.Rows.Add(new object[] {
					POut.Long  (dashboardLayout.DashboardLayoutNum),
					POut.Long  (dashboardLayout.UserNum),
					POut.Long  (dashboardLayout.UserGroupNum),
					            dashboardLayout.DashboardTabName,
					POut.Int   (dashboardLayout.DashboardTabOrder),
					POut.Int   (dashboardLayout.DashboardRows),
					POut.Int   (dashboardLayout.DashboardColumns),
					            dashboardLayout.DashboardGroupName,
				});
			}
			return table;
		}

		///<summary>Inserts one DashboardLayout into the database.  Returns the new priKey.</summary>
		public static long Insert(DashboardLayout dashboardLayout){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				dashboardLayout.DashboardLayoutNum=DbHelper.GetNextOracleKey("dashboardlayout","DashboardLayoutNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(dashboardLayout,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							dashboardLayout.DashboardLayoutNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(dashboardLayout,false);
			}
		}

		///<summary>Inserts one DashboardLayout into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(DashboardLayout dashboardLayout,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				dashboardLayout.DashboardLayoutNum=ReplicationServers.GetKey("dashboardlayout","DashboardLayoutNum");
			}
			string command="INSERT INTO dashboardlayout (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="DashboardLayoutNum,";
			}
			command+="UserNum,UserGroupNum,DashboardTabName,DashboardTabOrder,DashboardRows,DashboardColumns,DashboardGroupName) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(dashboardLayout.DashboardLayoutNum)+",";
			}
			command+=
				     POut.Long  (dashboardLayout.UserNum)+","
				+    POut.Long  (dashboardLayout.UserGroupNum)+","
				+"'"+POut.String(dashboardLayout.DashboardTabName)+"',"
				+    POut.Int   (dashboardLayout.DashboardTabOrder)+","
				+    POut.Int   (dashboardLayout.DashboardRows)+","
				+    POut.Int   (dashboardLayout.DashboardColumns)+","
				+"'"+POut.String(dashboardLayout.DashboardGroupName)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				dashboardLayout.DashboardLayoutNum=Db.NonQ(command,true,"DashboardLayoutNum","dashboardLayout");
			}
			return dashboardLayout.DashboardLayoutNum;
		}

		///<summary>Inserts one DashboardLayout into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(DashboardLayout dashboardLayout){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(dashboardLayout,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					dashboardLayout.DashboardLayoutNum=DbHelper.GetNextOracleKey("dashboardlayout","DashboardLayoutNum"); //Cacheless method
				}
				return InsertNoCache(dashboardLayout,true);
			}
		}

		///<summary>Inserts one DashboardLayout into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(DashboardLayout dashboardLayout,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO dashboardlayout (";
			if(!useExistingPK && isRandomKeys) {
				dashboardLayout.DashboardLayoutNum=ReplicationServers.GetKeyNoCache("dashboardlayout","DashboardLayoutNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="DashboardLayoutNum,";
			}
			command+="UserNum,UserGroupNum,DashboardTabName,DashboardTabOrder,DashboardRows,DashboardColumns,DashboardGroupName) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(dashboardLayout.DashboardLayoutNum)+",";
			}
			command+=
				     POut.Long  (dashboardLayout.UserNum)+","
				+    POut.Long  (dashboardLayout.UserGroupNum)+","
				+"'"+POut.String(dashboardLayout.DashboardTabName)+"',"
				+    POut.Int   (dashboardLayout.DashboardTabOrder)+","
				+    POut.Int   (dashboardLayout.DashboardRows)+","
				+    POut.Int   (dashboardLayout.DashboardColumns)+","
				+"'"+POut.String(dashboardLayout.DashboardGroupName)+"')";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				dashboardLayout.DashboardLayoutNum=Db.NonQ(command,true,"DashboardLayoutNum","dashboardLayout");
			}
			return dashboardLayout.DashboardLayoutNum;
		}

		///<summary>Updates one DashboardLayout in the database.</summary>
		public static void Update(DashboardLayout dashboardLayout){
			string command="UPDATE dashboardlayout SET "
				+"UserNum           =  "+POut.Long  (dashboardLayout.UserNum)+", "
				+"UserGroupNum      =  "+POut.Long  (dashboardLayout.UserGroupNum)+", "
				+"DashboardTabName  = '"+POut.String(dashboardLayout.DashboardTabName)+"', "
				+"DashboardTabOrder =  "+POut.Int   (dashboardLayout.DashboardTabOrder)+", "
				+"DashboardRows     =  "+POut.Int   (dashboardLayout.DashboardRows)+", "
				+"DashboardColumns  =  "+POut.Int   (dashboardLayout.DashboardColumns)+", "
				+"DashboardGroupName= '"+POut.String(dashboardLayout.DashboardGroupName)+"' "
				+"WHERE DashboardLayoutNum = "+POut.Long(dashboardLayout.DashboardLayoutNum);
			Db.NonQ(command);
		}

		///<summary>Updates one DashboardLayout in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(DashboardLayout dashboardLayout,DashboardLayout oldDashboardLayout){
			string command="";
			if(dashboardLayout.UserNum != oldDashboardLayout.UserNum) {
				if(command!=""){ command+=",";}
				command+="UserNum = "+POut.Long(dashboardLayout.UserNum)+"";
			}
			if(dashboardLayout.UserGroupNum != oldDashboardLayout.UserGroupNum) {
				if(command!=""){ command+=",";}
				command+="UserGroupNum = "+POut.Long(dashboardLayout.UserGroupNum)+"";
			}
			if(dashboardLayout.DashboardTabName != oldDashboardLayout.DashboardTabName) {
				if(command!=""){ command+=",";}
				command+="DashboardTabName = '"+POut.String(dashboardLayout.DashboardTabName)+"'";
			}
			if(dashboardLayout.DashboardTabOrder != oldDashboardLayout.DashboardTabOrder) {
				if(command!=""){ command+=",";}
				command+="DashboardTabOrder = "+POut.Int(dashboardLayout.DashboardTabOrder)+"";
			}
			if(dashboardLayout.DashboardRows != oldDashboardLayout.DashboardRows) {
				if(command!=""){ command+=",";}
				command+="DashboardRows = "+POut.Int(dashboardLayout.DashboardRows)+"";
			}
			if(dashboardLayout.DashboardColumns != oldDashboardLayout.DashboardColumns) {
				if(command!=""){ command+=",";}
				command+="DashboardColumns = "+POut.Int(dashboardLayout.DashboardColumns)+"";
			}
			if(dashboardLayout.DashboardGroupName != oldDashboardLayout.DashboardGroupName) {
				if(command!=""){ command+=",";}
				command+="DashboardGroupName = '"+POut.String(dashboardLayout.DashboardGroupName)+"'";
			}
			if(command==""){
				return false;
			}
			command="UPDATE dashboardlayout SET "+command
				+" WHERE DashboardLayoutNum = "+POut.Long(dashboardLayout.DashboardLayoutNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(DashboardLayout,DashboardLayout) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(DashboardLayout dashboardLayout,DashboardLayout oldDashboardLayout) {
			if(dashboardLayout.UserNum != oldDashboardLayout.UserNum) {
				return true;
			}
			if(dashboardLayout.UserGroupNum != oldDashboardLayout.UserGroupNum) {
				return true;
			}
			if(dashboardLayout.DashboardTabName != oldDashboardLayout.DashboardTabName) {
				return true;
			}
			if(dashboardLayout.DashboardTabOrder != oldDashboardLayout.DashboardTabOrder) {
				return true;
			}
			if(dashboardLayout.DashboardRows != oldDashboardLayout.DashboardRows) {
				return true;
			}
			if(dashboardLayout.DashboardColumns != oldDashboardLayout.DashboardColumns) {
				return true;
			}
			if(dashboardLayout.DashboardGroupName != oldDashboardLayout.DashboardGroupName) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one DashboardLayout from the database.</summary>
		public static void Delete(long dashboardLayoutNum){
			string command="DELETE FROM dashboardlayout "
				+"WHERE DashboardLayoutNum = "+POut.Long(dashboardLayoutNum);
			Db.NonQ(command);
		}

	}
}