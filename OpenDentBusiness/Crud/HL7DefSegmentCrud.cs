//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class HL7DefSegmentCrud {
		///<summary>Gets one HL7DefSegment object from the database using the primary key.  Returns null if not found.</summary>
		public static HL7DefSegment SelectOne(long hL7DefSegmentNum){
			string command="SELECT * FROM hl7defsegment "
				+"WHERE HL7DefSegmentNum = "+POut.Long(hL7DefSegmentNum);
			List<HL7DefSegment> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one HL7DefSegment object from the database using a query.</summary>
		public static HL7DefSegment SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<HL7DefSegment> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of HL7DefSegment objects from the database using a query.</summary>
		public static List<HL7DefSegment> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<HL7DefSegment> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<HL7DefSegment> TableToList(DataTable table){
			List<HL7DefSegment> retVal=new List<HL7DefSegment>();
			HL7DefSegment hL7DefSegment;
			foreach(DataRow row in table.Rows) {
				hL7DefSegment=new HL7DefSegment();
				hL7DefSegment.HL7DefSegmentNum= PIn.Long  (row["HL7DefSegmentNum"].ToString());
				hL7DefSegment.HL7DefMessageNum= PIn.Long  (row["HL7DefMessageNum"].ToString());
				hL7DefSegment.ItemOrder       = PIn.Int   (row["ItemOrder"].ToString());
				hL7DefSegment.CanRepeat       = PIn.Bool  (row["CanRepeat"].ToString());
				hL7DefSegment.IsOptional      = PIn.Bool  (row["IsOptional"].ToString());
				string segmentName=row["SegmentName"].ToString();
				if(segmentName==""){
					hL7DefSegment.SegmentName   =(SegmentNameHL7)0;
				}
				else try{
					hL7DefSegment.SegmentName   =(SegmentNameHL7)Enum.Parse(typeof(SegmentNameHL7),segmentName);
				}
				catch{
					hL7DefSegment.SegmentName   =(SegmentNameHL7)0;
				}
				hL7DefSegment.Note            = PIn.String(row["Note"].ToString());
				retVal.Add(hL7DefSegment);
			}
			return retVal;
		}

		///<summary>Converts a list of HL7DefSegment into a DataTable.</summary>
		public static DataTable ListToTable(List<HL7DefSegment> listHL7DefSegments,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="HL7DefSegment";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("HL7DefSegmentNum");
			table.Columns.Add("HL7DefMessageNum");
			table.Columns.Add("ItemOrder");
			table.Columns.Add("CanRepeat");
			table.Columns.Add("IsOptional");
			table.Columns.Add("SegmentName");
			table.Columns.Add("Note");
			foreach(HL7DefSegment hL7DefSegment in listHL7DefSegments) {
				table.Rows.Add(new object[] {
					POut.Long  (hL7DefSegment.HL7DefSegmentNum),
					POut.Long  (hL7DefSegment.HL7DefMessageNum),
					POut.Int   (hL7DefSegment.ItemOrder),
					POut.Bool  (hL7DefSegment.CanRepeat),
					POut.Bool  (hL7DefSegment.IsOptional),
					POut.Int   ((int)hL7DefSegment.SegmentName),
					            hL7DefSegment.Note,
				});
			}
			return table;
		}

		///<summary>Inserts one HL7DefSegment into the database.  Returns the new priKey.</summary>
		public static long Insert(HL7DefSegment hL7DefSegment){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				hL7DefSegment.HL7DefSegmentNum=DbHelper.GetNextOracleKey("hl7defsegment","HL7DefSegmentNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(hL7DefSegment,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							hL7DefSegment.HL7DefSegmentNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(hL7DefSegment,false);
			}
		}

		///<summary>Inserts one HL7DefSegment into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(HL7DefSegment hL7DefSegment,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				hL7DefSegment.HL7DefSegmentNum=ReplicationServers.GetKey("hl7defsegment","HL7DefSegmentNum");
			}
			string command="INSERT INTO hl7defsegment (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="HL7DefSegmentNum,";
			}
			command+="HL7DefMessageNum,ItemOrder,CanRepeat,IsOptional,SegmentName,Note) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(hL7DefSegment.HL7DefSegmentNum)+",";
			}
			command+=
				     POut.Long  (hL7DefSegment.HL7DefMessageNum)+","
				+    POut.Int   (hL7DefSegment.ItemOrder)+","
				+    POut.Bool  (hL7DefSegment.CanRepeat)+","
				+    POut.Bool  (hL7DefSegment.IsOptional)+","
				+"'"+POut.String(hL7DefSegment.SegmentName.ToString())+"',"
				+    DbHelper.ParamChar+"paramNote)";
			if(hL7DefSegment.Note==null) {
				hL7DefSegment.Note="";
			}
			OdSqlParameter paramNote=new OdSqlParameter("paramNote",OdDbType.Text,POut.StringParam(hL7DefSegment.Note));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramNote);
			}
			else {
				hL7DefSegment.HL7DefSegmentNum=Db.NonQ(command,true,"HL7DefSegmentNum","hL7DefSegment",paramNote);
			}
			return hL7DefSegment.HL7DefSegmentNum;
		}

		///<summary>Inserts one HL7DefSegment into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(HL7DefSegment hL7DefSegment){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(hL7DefSegment,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					hL7DefSegment.HL7DefSegmentNum=DbHelper.GetNextOracleKey("hl7defsegment","HL7DefSegmentNum"); //Cacheless method
				}
				return InsertNoCache(hL7DefSegment,true);
			}
		}

		///<summary>Inserts one HL7DefSegment into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(HL7DefSegment hL7DefSegment,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO hl7defsegment (";
			if(!useExistingPK && isRandomKeys) {
				hL7DefSegment.HL7DefSegmentNum=ReplicationServers.GetKeyNoCache("hl7defsegment","HL7DefSegmentNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="HL7DefSegmentNum,";
			}
			command+="HL7DefMessageNum,ItemOrder,CanRepeat,IsOptional,SegmentName,Note) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(hL7DefSegment.HL7DefSegmentNum)+",";
			}
			command+=
				     POut.Long  (hL7DefSegment.HL7DefMessageNum)+","
				+    POut.Int   (hL7DefSegment.ItemOrder)+","
				+    POut.Bool  (hL7DefSegment.CanRepeat)+","
				+    POut.Bool  (hL7DefSegment.IsOptional)+","
				+"'"+POut.String(hL7DefSegment.SegmentName.ToString())+"',"
				+    DbHelper.ParamChar+"paramNote)";
			if(hL7DefSegment.Note==null) {
				hL7DefSegment.Note="";
			}
			OdSqlParameter paramNote=new OdSqlParameter("paramNote",OdDbType.Text,POut.StringParam(hL7DefSegment.Note));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramNote);
			}
			else {
				hL7DefSegment.HL7DefSegmentNum=Db.NonQ(command,true,"HL7DefSegmentNum","hL7DefSegment",paramNote);
			}
			return hL7DefSegment.HL7DefSegmentNum;
		}

		///<summary>Updates one HL7DefSegment in the database.</summary>
		public static void Update(HL7DefSegment hL7DefSegment){
			string command="UPDATE hl7defsegment SET "
				+"HL7DefMessageNum=  "+POut.Long  (hL7DefSegment.HL7DefMessageNum)+", "
				+"ItemOrder       =  "+POut.Int   (hL7DefSegment.ItemOrder)+", "
				+"CanRepeat       =  "+POut.Bool  (hL7DefSegment.CanRepeat)+", "
				+"IsOptional      =  "+POut.Bool  (hL7DefSegment.IsOptional)+", "
				+"SegmentName     = '"+POut.String(hL7DefSegment.SegmentName.ToString())+"', "
				+"Note            =  "+DbHelper.ParamChar+"paramNote "
				+"WHERE HL7DefSegmentNum = "+POut.Long(hL7DefSegment.HL7DefSegmentNum);
			if(hL7DefSegment.Note==null) {
				hL7DefSegment.Note="";
			}
			OdSqlParameter paramNote=new OdSqlParameter("paramNote",OdDbType.Text,POut.StringParam(hL7DefSegment.Note));
			Db.NonQ(command,paramNote);
		}

		///<summary>Updates one HL7DefSegment in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(HL7DefSegment hL7DefSegment,HL7DefSegment oldHL7DefSegment){
			string command="";
			if(hL7DefSegment.HL7DefMessageNum != oldHL7DefSegment.HL7DefMessageNum) {
				if(command!=""){ command+=",";}
				command+="HL7DefMessageNum = "+POut.Long(hL7DefSegment.HL7DefMessageNum)+"";
			}
			if(hL7DefSegment.ItemOrder != oldHL7DefSegment.ItemOrder) {
				if(command!=""){ command+=",";}
				command+="ItemOrder = "+POut.Int(hL7DefSegment.ItemOrder)+"";
			}
			if(hL7DefSegment.CanRepeat != oldHL7DefSegment.CanRepeat) {
				if(command!=""){ command+=",";}
				command+="CanRepeat = "+POut.Bool(hL7DefSegment.CanRepeat)+"";
			}
			if(hL7DefSegment.IsOptional != oldHL7DefSegment.IsOptional) {
				if(command!=""){ command+=",";}
				command+="IsOptional = "+POut.Bool(hL7DefSegment.IsOptional)+"";
			}
			if(hL7DefSegment.SegmentName != oldHL7DefSegment.SegmentName) {
				if(command!=""){ command+=",";}
				command+="SegmentName = '"+POut.String(hL7DefSegment.SegmentName.ToString())+"'";
			}
			if(hL7DefSegment.Note != oldHL7DefSegment.Note) {
				if(command!=""){ command+=",";}
				command+="Note = "+DbHelper.ParamChar+"paramNote";
			}
			if(command==""){
				return false;
			}
			if(hL7DefSegment.Note==null) {
				hL7DefSegment.Note="";
			}
			OdSqlParameter paramNote=new OdSqlParameter("paramNote",OdDbType.Text,POut.StringParam(hL7DefSegment.Note));
			command="UPDATE hl7defsegment SET "+command
				+" WHERE HL7DefSegmentNum = "+POut.Long(hL7DefSegment.HL7DefSegmentNum);
			Db.NonQ(command,paramNote);
			return true;
		}

		///<summary>Returns true if Update(HL7DefSegment,HL7DefSegment) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(HL7DefSegment hL7DefSegment,HL7DefSegment oldHL7DefSegment) {
			if(hL7DefSegment.HL7DefMessageNum != oldHL7DefSegment.HL7DefMessageNum) {
				return true;
			}
			if(hL7DefSegment.ItemOrder != oldHL7DefSegment.ItemOrder) {
				return true;
			}
			if(hL7DefSegment.CanRepeat != oldHL7DefSegment.CanRepeat) {
				return true;
			}
			if(hL7DefSegment.IsOptional != oldHL7DefSegment.IsOptional) {
				return true;
			}
			if(hL7DefSegment.SegmentName != oldHL7DefSegment.SegmentName) {
				return true;
			}
			if(hL7DefSegment.Note != oldHL7DefSegment.Note) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one HL7DefSegment from the database.</summary>
		public static void Delete(long hL7DefSegmentNum){
			string command="DELETE FROM hl7defsegment "
				+"WHERE HL7DefSegmentNum = "+POut.Long(hL7DefSegmentNum);
			Db.NonQ(command);
		}

	}
}