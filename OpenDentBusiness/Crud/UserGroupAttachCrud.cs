//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class UserGroupAttachCrud {
		///<summary>Gets one UserGroupAttach object from the database using the primary key.  Returns null if not found.</summary>
		public static UserGroupAttach SelectOne(long userGroupAttachNum){
			string command="SELECT * FROM usergroupattach "
				+"WHERE UserGroupAttachNum = "+POut.Long(userGroupAttachNum);
			List<UserGroupAttach> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one UserGroupAttach object from the database using a query.</summary>
		public static UserGroupAttach SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<UserGroupAttach> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of UserGroupAttach objects from the database using a query.</summary>
		public static List<UserGroupAttach> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<UserGroupAttach> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<UserGroupAttach> TableToList(DataTable table){
			List<UserGroupAttach> retVal=new List<UserGroupAttach>();
			UserGroupAttach userGroupAttach;
			foreach(DataRow row in table.Rows) {
				userGroupAttach=new UserGroupAttach();
				userGroupAttach.UserGroupAttachNum= PIn.Long  (row["UserGroupAttachNum"].ToString());
				userGroupAttach.UserNum           = PIn.Long  (row["UserNum"].ToString());
				userGroupAttach.UserGroupNum      = PIn.Long  (row["UserGroupNum"].ToString());
				retVal.Add(userGroupAttach);
			}
			return retVal;
		}

		///<summary>Converts a list of UserGroupAttach into a DataTable.</summary>
		public static DataTable ListToTable(List<UserGroupAttach> listUserGroupAttachs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="UserGroupAttach";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("UserGroupAttachNum");
			table.Columns.Add("UserNum");
			table.Columns.Add("UserGroupNum");
			foreach(UserGroupAttach userGroupAttach in listUserGroupAttachs) {
				table.Rows.Add(new object[] {
					POut.Long  (userGroupAttach.UserGroupAttachNum),
					POut.Long  (userGroupAttach.UserNum),
					POut.Long  (userGroupAttach.UserGroupNum),
				});
			}
			return table;
		}

		///<summary>Inserts one UserGroupAttach into the database.  Returns the new priKey.</summary>
		public static long Insert(UserGroupAttach userGroupAttach){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				userGroupAttach.UserGroupAttachNum=DbHelper.GetNextOracleKey("usergroupattach","UserGroupAttachNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(userGroupAttach,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							userGroupAttach.UserGroupAttachNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(userGroupAttach,false);
			}
		}

		///<summary>Inserts one UserGroupAttach into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(UserGroupAttach userGroupAttach,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				userGroupAttach.UserGroupAttachNum=ReplicationServers.GetKey("usergroupattach","UserGroupAttachNum");
			}
			string command="INSERT INTO usergroupattach (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="UserGroupAttachNum,";
			}
			command+="UserNum,UserGroupNum) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(userGroupAttach.UserGroupAttachNum)+",";
			}
			command+=
				     POut.Long  (userGroupAttach.UserNum)+","
				+    POut.Long  (userGroupAttach.UserGroupNum)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				userGroupAttach.UserGroupAttachNum=Db.NonQ(command,true,"UserGroupAttachNum","userGroupAttach");
			}
			return userGroupAttach.UserGroupAttachNum;
		}

		///<summary>Inserts one UserGroupAttach into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(UserGroupAttach userGroupAttach){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(userGroupAttach,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					userGroupAttach.UserGroupAttachNum=DbHelper.GetNextOracleKey("usergroupattach","UserGroupAttachNum"); //Cacheless method
				}
				return InsertNoCache(userGroupAttach,true);
			}
		}

		///<summary>Inserts one UserGroupAttach into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(UserGroupAttach userGroupAttach,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO usergroupattach (";
			if(!useExistingPK && isRandomKeys) {
				userGroupAttach.UserGroupAttachNum=ReplicationServers.GetKeyNoCache("usergroupattach","UserGroupAttachNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="UserGroupAttachNum,";
			}
			command+="UserNum,UserGroupNum) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(userGroupAttach.UserGroupAttachNum)+",";
			}
			command+=
				     POut.Long  (userGroupAttach.UserNum)+","
				+    POut.Long  (userGroupAttach.UserGroupNum)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				userGroupAttach.UserGroupAttachNum=Db.NonQ(command,true,"UserGroupAttachNum","userGroupAttach");
			}
			return userGroupAttach.UserGroupAttachNum;
		}

		///<summary>Updates one UserGroupAttach in the database.</summary>
		public static void Update(UserGroupAttach userGroupAttach){
			string command="UPDATE usergroupattach SET "
				+"UserNum           =  "+POut.Long  (userGroupAttach.UserNum)+", "
				+"UserGroupNum      =  "+POut.Long  (userGroupAttach.UserGroupNum)+" "
				+"WHERE UserGroupAttachNum = "+POut.Long(userGroupAttach.UserGroupAttachNum);
			Db.NonQ(command);
		}

		///<summary>Updates one UserGroupAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(UserGroupAttach userGroupAttach,UserGroupAttach oldUserGroupAttach){
			string command="";
			if(userGroupAttach.UserNum != oldUserGroupAttach.UserNum) {
				if(command!=""){ command+=",";}
				command+="UserNum = "+POut.Long(userGroupAttach.UserNum)+"";
			}
			if(userGroupAttach.UserGroupNum != oldUserGroupAttach.UserGroupNum) {
				if(command!=""){ command+=",";}
				command+="UserGroupNum = "+POut.Long(userGroupAttach.UserGroupNum)+"";
			}
			if(command==""){
				return false;
			}
			command="UPDATE usergroupattach SET "+command
				+" WHERE UserGroupAttachNum = "+POut.Long(userGroupAttach.UserGroupAttachNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(UserGroupAttach,UserGroupAttach) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(UserGroupAttach userGroupAttach,UserGroupAttach oldUserGroupAttach) {
			if(userGroupAttach.UserNum != oldUserGroupAttach.UserNum) {
				return true;
			}
			if(userGroupAttach.UserGroupNum != oldUserGroupAttach.UserGroupNum) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one UserGroupAttach from the database.</summary>
		public static void Delete(long userGroupAttachNum){
			string command="DELETE FROM usergroupattach "
				+"WHERE UserGroupAttachNum = "+POut.Long(userGroupAttachNum);
			Db.NonQ(command);
		}

	}
}