//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class DocumentMiscCrud {
		///<summary>Gets one DocumentMisc object from the database using the primary key.  Returns null if not found.</summary>
		public static DocumentMisc SelectOne(long docMiscNum){
			string command="SELECT * FROM documentmisc "
				+"WHERE DocMiscNum = "+POut.Long(docMiscNum);
			List<DocumentMisc> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one DocumentMisc object from the database using a query.</summary>
		public static DocumentMisc SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<DocumentMisc> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of DocumentMisc objects from the database using a query.</summary>
		public static List<DocumentMisc> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<DocumentMisc> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<DocumentMisc> TableToList(DataTable table){
			List<DocumentMisc> retVal=new List<DocumentMisc>();
			DocumentMisc documentMisc;
			foreach(DataRow row in table.Rows) {
				documentMisc=new DocumentMisc();
				documentMisc.DocMiscNum = PIn.Long  (row["DocMiscNum"].ToString());
				documentMisc.DateCreated= PIn.Date  (row["DateCreated"].ToString());
				documentMisc.FileName   = PIn.String(row["FileName"].ToString());
				documentMisc.DocMiscType= (OpenDentBusiness.DocumentMiscType)PIn.Int(row["DocMiscType"].ToString());
				documentMisc.RawBase64  = PIn.String(row["RawBase64"].ToString());
				retVal.Add(documentMisc);
			}
			return retVal;
		}

		///<summary>Converts a list of DocumentMisc into a DataTable.</summary>
		public static DataTable ListToTable(List<DocumentMisc> listDocumentMiscs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="DocumentMisc";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("DocMiscNum");
			table.Columns.Add("DateCreated");
			table.Columns.Add("FileName");
			table.Columns.Add("DocMiscType");
			table.Columns.Add("RawBase64");
			foreach(DocumentMisc documentMisc in listDocumentMiscs) {
				table.Rows.Add(new object[] {
					POut.Long  (documentMisc.DocMiscNum),
					POut.DateT (documentMisc.DateCreated,false),
					            documentMisc.FileName,
					POut.Int   ((int)documentMisc.DocMiscType),
					            documentMisc.RawBase64,
				});
			}
			return table;
		}

		///<summary>Inserts one DocumentMisc into the database.  Returns the new priKey.</summary>
		public static long Insert(DocumentMisc documentMisc){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				documentMisc.DocMiscNum=DbHelper.GetNextOracleKey("documentmisc","DocMiscNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(documentMisc,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							documentMisc.DocMiscNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(documentMisc,false);
			}
		}

		///<summary>Inserts one DocumentMisc into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(DocumentMisc documentMisc,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				documentMisc.DocMiscNum=ReplicationServers.GetKey("documentmisc","DocMiscNum");
			}
			string command="INSERT INTO documentmisc (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="DocMiscNum,";
			}
			command+="DateCreated,FileName,DocMiscType,RawBase64) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(documentMisc.DocMiscNum)+",";
			}
			command+=
				     POut.Date  (documentMisc.DateCreated)+","
				+"'"+POut.String(documentMisc.FileName)+"',"
				+    POut.Int   ((int)documentMisc.DocMiscType)+","
				+    DbHelper.ParamChar+"paramRawBase64)";
			if(documentMisc.RawBase64==null) {
				documentMisc.RawBase64="";
			}
			OdSqlParameter paramRawBase64=new OdSqlParameter("paramRawBase64",OdDbType.Text,POut.StringParam(documentMisc.RawBase64));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramRawBase64);
			}
			else {
				documentMisc.DocMiscNum=Db.NonQ(command,true,"DocMiscNum","documentMisc",paramRawBase64);
			}
			return documentMisc.DocMiscNum;
		}

		///<summary>Inserts one DocumentMisc into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(DocumentMisc documentMisc){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(documentMisc,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					documentMisc.DocMiscNum=DbHelper.GetNextOracleKey("documentmisc","DocMiscNum"); //Cacheless method
				}
				return InsertNoCache(documentMisc,true);
			}
		}

		///<summary>Inserts one DocumentMisc into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(DocumentMisc documentMisc,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO documentmisc (";
			if(!useExistingPK && isRandomKeys) {
				documentMisc.DocMiscNum=ReplicationServers.GetKeyNoCache("documentmisc","DocMiscNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="DocMiscNum,";
			}
			command+="DateCreated,FileName,DocMiscType,RawBase64) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(documentMisc.DocMiscNum)+",";
			}
			command+=
				     POut.Date  (documentMisc.DateCreated)+","
				+"'"+POut.String(documentMisc.FileName)+"',"
				+    POut.Int   ((int)documentMisc.DocMiscType)+","
				+    DbHelper.ParamChar+"paramRawBase64)";
			if(documentMisc.RawBase64==null) {
				documentMisc.RawBase64="";
			}
			OdSqlParameter paramRawBase64=new OdSqlParameter("paramRawBase64",OdDbType.Text,POut.StringParam(documentMisc.RawBase64));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramRawBase64);
			}
			else {
				documentMisc.DocMiscNum=Db.NonQ(command,true,"DocMiscNum","documentMisc",paramRawBase64);
			}
			return documentMisc.DocMiscNum;
		}

		///<summary>Updates one DocumentMisc in the database.</summary>
		public static void Update(DocumentMisc documentMisc){
			string command="UPDATE documentmisc SET "
				+"DateCreated=  "+POut.Date  (documentMisc.DateCreated)+", "
				+"FileName   = '"+POut.String(documentMisc.FileName)+"', "
				+"DocMiscType=  "+POut.Int   ((int)documentMisc.DocMiscType)+", "
				+"RawBase64  =  "+DbHelper.ParamChar+"paramRawBase64 "
				+"WHERE DocMiscNum = "+POut.Long(documentMisc.DocMiscNum);
			if(documentMisc.RawBase64==null) {
				documentMisc.RawBase64="";
			}
			OdSqlParameter paramRawBase64=new OdSqlParameter("paramRawBase64",OdDbType.Text,POut.StringParam(documentMisc.RawBase64));
			Db.NonQ(command,paramRawBase64);
		}

		///<summary>Updates one DocumentMisc in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(DocumentMisc documentMisc,DocumentMisc oldDocumentMisc){
			string command="";
			if(documentMisc.DateCreated.Date != oldDocumentMisc.DateCreated.Date) {
				if(command!=""){ command+=",";}
				command+="DateCreated = "+POut.Date(documentMisc.DateCreated)+"";
			}
			if(documentMisc.FileName != oldDocumentMisc.FileName) {
				if(command!=""){ command+=",";}
				command+="FileName = '"+POut.String(documentMisc.FileName)+"'";
			}
			if(documentMisc.DocMiscType != oldDocumentMisc.DocMiscType) {
				if(command!=""){ command+=",";}
				command+="DocMiscType = "+POut.Int   ((int)documentMisc.DocMiscType)+"";
			}
			if(documentMisc.RawBase64 != oldDocumentMisc.RawBase64) {
				if(command!=""){ command+=",";}
				command+="RawBase64 = "+DbHelper.ParamChar+"paramRawBase64";
			}
			if(command==""){
				return false;
			}
			if(documentMisc.RawBase64==null) {
				documentMisc.RawBase64="";
			}
			OdSqlParameter paramRawBase64=new OdSqlParameter("paramRawBase64",OdDbType.Text,POut.StringParam(documentMisc.RawBase64));
			command="UPDATE documentmisc SET "+command
				+" WHERE DocMiscNum = "+POut.Long(documentMisc.DocMiscNum);
			Db.NonQ(command,paramRawBase64);
			return true;
		}

		///<summary>Returns true if Update(DocumentMisc,DocumentMisc) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(DocumentMisc documentMisc,DocumentMisc oldDocumentMisc) {
			if(documentMisc.DateCreated.Date != oldDocumentMisc.DateCreated.Date) {
				return true;
			}
			if(documentMisc.FileName != oldDocumentMisc.FileName) {
				return true;
			}
			if(documentMisc.DocMiscType != oldDocumentMisc.DocMiscType) {
				return true;
			}
			if(documentMisc.RawBase64 != oldDocumentMisc.RawBase64) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one DocumentMisc from the database.</summary>
		public static void Delete(long docMiscNum){
			string command="DELETE FROM documentmisc "
				+"WHERE DocMiscNum = "+POut.Long(docMiscNum);
			Db.NonQ(command);
		}

	}
}