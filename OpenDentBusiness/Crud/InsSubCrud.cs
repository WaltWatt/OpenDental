//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class InsSubCrud {
		///<summary>Gets one InsSub object from the database using the primary key.  Returns null if not found.</summary>
		public static InsSub SelectOne(long insSubNum){
			string command="SELECT * FROM inssub "
				+"WHERE InsSubNum = "+POut.Long(insSubNum);
			List<InsSub> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one InsSub object from the database using a query.</summary>
		public static InsSub SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<InsSub> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of InsSub objects from the database using a query.</summary>
		public static List<InsSub> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<InsSub> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<InsSub> TableToList(DataTable table){
			List<InsSub> retVal=new List<InsSub>();
			InsSub insSub;
			foreach(DataRow row in table.Rows) {
				insSub=new InsSub();
				insSub.InsSubNum      = PIn.Long  (row["InsSubNum"].ToString());
				insSub.PlanNum        = PIn.Long  (row["PlanNum"].ToString());
				insSub.Subscriber     = PIn.Long  (row["Subscriber"].ToString());
				insSub.DateEffective  = PIn.Date  (row["DateEffective"].ToString());
				insSub.DateTerm       = PIn.Date  (row["DateTerm"].ToString());
				insSub.ReleaseInfo    = PIn.Bool  (row["ReleaseInfo"].ToString());
				insSub.AssignBen      = PIn.Bool  (row["AssignBen"].ToString());
				insSub.SubscriberID   = PIn.String(row["SubscriberID"].ToString());
				insSub.BenefitNotes   = PIn.String(row["BenefitNotes"].ToString());
				insSub.SubscNote      = PIn.String(row["SubscNote"].ToString());
				insSub.SecUserNumEntry= PIn.Long  (row["SecUserNumEntry"].ToString());
				insSub.SecDateEntry   = PIn.Date  (row["SecDateEntry"].ToString());
				insSub.SecDateTEdit   = PIn.DateT (row["SecDateTEdit"].ToString());
				retVal.Add(insSub);
			}
			return retVal;
		}

		///<summary>Converts a list of InsSub into a DataTable.</summary>
		public static DataTable ListToTable(List<InsSub> listInsSubs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="InsSub";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("InsSubNum");
			table.Columns.Add("PlanNum");
			table.Columns.Add("Subscriber");
			table.Columns.Add("DateEffective");
			table.Columns.Add("DateTerm");
			table.Columns.Add("ReleaseInfo");
			table.Columns.Add("AssignBen");
			table.Columns.Add("SubscriberID");
			table.Columns.Add("BenefitNotes");
			table.Columns.Add("SubscNote");
			table.Columns.Add("SecUserNumEntry");
			table.Columns.Add("SecDateEntry");
			table.Columns.Add("SecDateTEdit");
			foreach(InsSub insSub in listInsSubs) {
				table.Rows.Add(new object[] {
					POut.Long  (insSub.InsSubNum),
					POut.Long  (insSub.PlanNum),
					POut.Long  (insSub.Subscriber),
					POut.DateT (insSub.DateEffective,false),
					POut.DateT (insSub.DateTerm,false),
					POut.Bool  (insSub.ReleaseInfo),
					POut.Bool  (insSub.AssignBen),
					            insSub.SubscriberID,
					            insSub.BenefitNotes,
					            insSub.SubscNote,
					POut.Long  (insSub.SecUserNumEntry),
					POut.DateT (insSub.SecDateEntry,false),
					POut.DateT (insSub.SecDateTEdit,false),
				});
			}
			return table;
		}

		///<summary>Inserts one InsSub into the database.  Returns the new priKey.</summary>
		public static long Insert(InsSub insSub){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				insSub.InsSubNum=DbHelper.GetNextOracleKey("inssub","InsSubNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(insSub,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							insSub.InsSubNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(insSub,false);
			}
		}

		///<summary>Inserts one InsSub into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(InsSub insSub,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				insSub.InsSubNum=ReplicationServers.GetKey("inssub","InsSubNum");
			}
			string command="INSERT INTO inssub (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="InsSubNum,";
			}
			command+="PlanNum,Subscriber,DateEffective,DateTerm,ReleaseInfo,AssignBen,SubscriberID,BenefitNotes,SubscNote,SecUserNumEntry,SecDateEntry) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(insSub.InsSubNum)+",";
			}
			command+=
				     POut.Long  (insSub.PlanNum)+","
				+    POut.Long  (insSub.Subscriber)+","
				+    POut.Date  (insSub.DateEffective)+","
				+    POut.Date  (insSub.DateTerm)+","
				+    POut.Bool  (insSub.ReleaseInfo)+","
				+    POut.Bool  (insSub.AssignBen)+","
				+"'"+POut.String(insSub.SubscriberID)+"',"
				+    DbHelper.ParamChar+"paramBenefitNotes,"
				+    DbHelper.ParamChar+"paramSubscNote,"
				+    POut.Long  (insSub.SecUserNumEntry)+","
				+    DbHelper.Now()+")";
				//SecDateTEdit can only be set by MySQL
			if(insSub.BenefitNotes==null) {
				insSub.BenefitNotes="";
			}
			OdSqlParameter paramBenefitNotes=new OdSqlParameter("paramBenefitNotes",OdDbType.Text,POut.StringParam(insSub.BenefitNotes));
			if(insSub.SubscNote==null) {
				insSub.SubscNote="";
			}
			OdSqlParameter paramSubscNote=new OdSqlParameter("paramSubscNote",OdDbType.Text,POut.StringParam(insSub.SubscNote));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramBenefitNotes,paramSubscNote);
			}
			else {
				insSub.InsSubNum=Db.NonQ(command,true,"InsSubNum","insSub",paramBenefitNotes,paramSubscNote);
			}
			return insSub.InsSubNum;
		}

		///<summary>Inserts one InsSub into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(InsSub insSub){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(insSub,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					insSub.InsSubNum=DbHelper.GetNextOracleKey("inssub","InsSubNum"); //Cacheless method
				}
				return InsertNoCache(insSub,true);
			}
		}

		///<summary>Inserts one InsSub into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(InsSub insSub,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO inssub (";
			if(!useExistingPK && isRandomKeys) {
				insSub.InsSubNum=ReplicationServers.GetKeyNoCache("inssub","InsSubNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="InsSubNum,";
			}
			command+="PlanNum,Subscriber,DateEffective,DateTerm,ReleaseInfo,AssignBen,SubscriberID,BenefitNotes,SubscNote,SecUserNumEntry,SecDateEntry) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(insSub.InsSubNum)+",";
			}
			command+=
				     POut.Long  (insSub.PlanNum)+","
				+    POut.Long  (insSub.Subscriber)+","
				+    POut.Date  (insSub.DateEffective)+","
				+    POut.Date  (insSub.DateTerm)+","
				+    POut.Bool  (insSub.ReleaseInfo)+","
				+    POut.Bool  (insSub.AssignBen)+","
				+"'"+POut.String(insSub.SubscriberID)+"',"
				+    DbHelper.ParamChar+"paramBenefitNotes,"
				+    DbHelper.ParamChar+"paramSubscNote,"
				+    POut.Long  (insSub.SecUserNumEntry)+","
				+    DbHelper.Now()+")";
				//SecDateTEdit can only be set by MySQL
			if(insSub.BenefitNotes==null) {
				insSub.BenefitNotes="";
			}
			OdSqlParameter paramBenefitNotes=new OdSqlParameter("paramBenefitNotes",OdDbType.Text,POut.StringParam(insSub.BenefitNotes));
			if(insSub.SubscNote==null) {
				insSub.SubscNote="";
			}
			OdSqlParameter paramSubscNote=new OdSqlParameter("paramSubscNote",OdDbType.Text,POut.StringParam(insSub.SubscNote));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramBenefitNotes,paramSubscNote);
			}
			else {
				insSub.InsSubNum=Db.NonQ(command,true,"InsSubNum","insSub",paramBenefitNotes,paramSubscNote);
			}
			return insSub.InsSubNum;
		}

		///<summary>Updates one InsSub in the database.</summary>
		public static void Update(InsSub insSub){
			string command="UPDATE inssub SET "
				+"PlanNum        =  "+POut.Long  (insSub.PlanNum)+", "
				+"Subscriber     =  "+POut.Long  (insSub.Subscriber)+", "
				+"DateEffective  =  "+POut.Date  (insSub.DateEffective)+", "
				+"DateTerm       =  "+POut.Date  (insSub.DateTerm)+", "
				+"ReleaseInfo    =  "+POut.Bool  (insSub.ReleaseInfo)+", "
				+"AssignBen      =  "+POut.Bool  (insSub.AssignBen)+", "
				+"SubscriberID   = '"+POut.String(insSub.SubscriberID)+"', "
				+"BenefitNotes   =  "+DbHelper.ParamChar+"paramBenefitNotes, "
				+"SubscNote      =  "+DbHelper.ParamChar+"paramSubscNote "
				//SecUserNumEntry excluded from update
				//SecDateEntry not allowed to change
				//SecDateTEdit can only be set by MySQL
				+"WHERE InsSubNum = "+POut.Long(insSub.InsSubNum);
			if(insSub.BenefitNotes==null) {
				insSub.BenefitNotes="";
			}
			OdSqlParameter paramBenefitNotes=new OdSqlParameter("paramBenefitNotes",OdDbType.Text,POut.StringParam(insSub.BenefitNotes));
			if(insSub.SubscNote==null) {
				insSub.SubscNote="";
			}
			OdSqlParameter paramSubscNote=new OdSqlParameter("paramSubscNote",OdDbType.Text,POut.StringParam(insSub.SubscNote));
			Db.NonQ(command,paramBenefitNotes,paramSubscNote);
		}

		///<summary>Updates one InsSub in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(InsSub insSub,InsSub oldInsSub){
			string command="";
			if(insSub.PlanNum != oldInsSub.PlanNum) {
				if(command!=""){ command+=",";}
				command+="PlanNum = "+POut.Long(insSub.PlanNum)+"";
			}
			if(insSub.Subscriber != oldInsSub.Subscriber) {
				if(command!=""){ command+=",";}
				command+="Subscriber = "+POut.Long(insSub.Subscriber)+"";
			}
			if(insSub.DateEffective.Date != oldInsSub.DateEffective.Date) {
				if(command!=""){ command+=",";}
				command+="DateEffective = "+POut.Date(insSub.DateEffective)+"";
			}
			if(insSub.DateTerm.Date != oldInsSub.DateTerm.Date) {
				if(command!=""){ command+=",";}
				command+="DateTerm = "+POut.Date(insSub.DateTerm)+"";
			}
			if(insSub.ReleaseInfo != oldInsSub.ReleaseInfo) {
				if(command!=""){ command+=",";}
				command+="ReleaseInfo = "+POut.Bool(insSub.ReleaseInfo)+"";
			}
			if(insSub.AssignBen != oldInsSub.AssignBen) {
				if(command!=""){ command+=",";}
				command+="AssignBen = "+POut.Bool(insSub.AssignBen)+"";
			}
			if(insSub.SubscriberID != oldInsSub.SubscriberID) {
				if(command!=""){ command+=",";}
				command+="SubscriberID = '"+POut.String(insSub.SubscriberID)+"'";
			}
			if(insSub.BenefitNotes != oldInsSub.BenefitNotes) {
				if(command!=""){ command+=",";}
				command+="BenefitNotes = "+DbHelper.ParamChar+"paramBenefitNotes";
			}
			if(insSub.SubscNote != oldInsSub.SubscNote) {
				if(command!=""){ command+=",";}
				command+="SubscNote = "+DbHelper.ParamChar+"paramSubscNote";
			}
			//SecUserNumEntry excluded from update
			//SecDateEntry not allowed to change
			//SecDateTEdit can only be set by MySQL
			if(command==""){
				return false;
			}
			if(insSub.BenefitNotes==null) {
				insSub.BenefitNotes="";
			}
			OdSqlParameter paramBenefitNotes=new OdSqlParameter("paramBenefitNotes",OdDbType.Text,POut.StringParam(insSub.BenefitNotes));
			if(insSub.SubscNote==null) {
				insSub.SubscNote="";
			}
			OdSqlParameter paramSubscNote=new OdSqlParameter("paramSubscNote",OdDbType.Text,POut.StringParam(insSub.SubscNote));
			command="UPDATE inssub SET "+command
				+" WHERE InsSubNum = "+POut.Long(insSub.InsSubNum);
			Db.NonQ(command,paramBenefitNotes,paramSubscNote);
			return true;
		}

		///<summary>Returns true if Update(InsSub,InsSub) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(InsSub insSub,InsSub oldInsSub) {
			if(insSub.PlanNum != oldInsSub.PlanNum) {
				return true;
			}
			if(insSub.Subscriber != oldInsSub.Subscriber) {
				return true;
			}
			if(insSub.DateEffective.Date != oldInsSub.DateEffective.Date) {
				return true;
			}
			if(insSub.DateTerm.Date != oldInsSub.DateTerm.Date) {
				return true;
			}
			if(insSub.ReleaseInfo != oldInsSub.ReleaseInfo) {
				return true;
			}
			if(insSub.AssignBen != oldInsSub.AssignBen) {
				return true;
			}
			if(insSub.SubscriberID != oldInsSub.SubscriberID) {
				return true;
			}
			if(insSub.BenefitNotes != oldInsSub.BenefitNotes) {
				return true;
			}
			if(insSub.SubscNote != oldInsSub.SubscNote) {
				return true;
			}
			//SecUserNumEntry excluded from update
			//SecDateEntry not allowed to change
			//SecDateTEdit can only be set by MySQL
			return false;
		}

		///<summary>Deletes one InsSub from the database.</summary>
		public static void Delete(long insSubNum){
			ClearFkey(insSubNum);
			string command="DELETE FROM inssub "
				+"WHERE InsSubNum = "+POut.Long(insSubNum);
			Db.NonQ(command);
		}

		///<summary>Zeros securitylog FKey column for rows that are using the matching insSubNum as FKey and are related to InsSub.
		///Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the InsSub table type.</summary>
		public static void ClearFkey(long insSubNum) {
			if(insSubNum==0) {
				return;
			}
			string command="UPDATE securitylog SET FKey=0 WHERE FKey="+POut.Long(insSubNum)+" AND PermType IN (155)";
			Db.NonQ(command);
		}

		///<summary>Zeros securitylog FKey column for rows that are using the matching insSubNums as FKey and are related to InsSub.
		///Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the InsSub table type.</summary>
		public static void ClearFkey(List<long> listInsSubNums) {
			if(listInsSubNums==null || listInsSubNums.FindAll(x => x != 0).Count==0) {
				return;
			}
			string command="UPDATE securitylog SET FKey=0 WHERE FKey IN("+String.Join(",",listInsSubNums.FindAll(x => x != 0))+") AND PermType IN (155)";
			Db.NonQ(command);
		}

	}
}