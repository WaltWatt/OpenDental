//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class InterventionCrud {
		///<summary>Gets one Intervention object from the database using the primary key.  Returns null if not found.</summary>
		public static Intervention SelectOne(long interventionNum){
			string command="SELECT * FROM intervention "
				+"WHERE InterventionNum = "+POut.Long(interventionNum);
			List<Intervention> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Intervention object from the database using a query.</summary>
		public static Intervention SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Intervention> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Intervention objects from the database using a query.</summary>
		public static List<Intervention> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Intervention> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<Intervention> TableToList(DataTable table){
			List<Intervention> retVal=new List<Intervention>();
			Intervention intervention;
			foreach(DataRow row in table.Rows) {
				intervention=new Intervention();
				intervention.InterventionNum= PIn.Long  (row["InterventionNum"].ToString());
				intervention.PatNum         = PIn.Long  (row["PatNum"].ToString());
				intervention.ProvNum        = PIn.Long  (row["ProvNum"].ToString());
				intervention.CodeValue      = PIn.String(row["CodeValue"].ToString());
				intervention.CodeSystem     = PIn.String(row["CodeSystem"].ToString());
				intervention.Note           = PIn.String(row["Note"].ToString());
				intervention.DateEntry      = PIn.Date  (row["DateEntry"].ToString());
				intervention.CodeSet        = (OpenDentBusiness.InterventionCodeSet)PIn.Int(row["CodeSet"].ToString());
				intervention.IsPatDeclined  = PIn.Bool  (row["IsPatDeclined"].ToString());
				retVal.Add(intervention);
			}
			return retVal;
		}

		///<summary>Converts a list of Intervention into a DataTable.</summary>
		public static DataTable ListToTable(List<Intervention> listInterventions,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="Intervention";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("InterventionNum");
			table.Columns.Add("PatNum");
			table.Columns.Add("ProvNum");
			table.Columns.Add("CodeValue");
			table.Columns.Add("CodeSystem");
			table.Columns.Add("Note");
			table.Columns.Add("DateEntry");
			table.Columns.Add("CodeSet");
			table.Columns.Add("IsPatDeclined");
			foreach(Intervention intervention in listInterventions) {
				table.Rows.Add(new object[] {
					POut.Long  (intervention.InterventionNum),
					POut.Long  (intervention.PatNum),
					POut.Long  (intervention.ProvNum),
					            intervention.CodeValue,
					            intervention.CodeSystem,
					            intervention.Note,
					POut.DateT (intervention.DateEntry,false),
					POut.Int   ((int)intervention.CodeSet),
					POut.Bool  (intervention.IsPatDeclined),
				});
			}
			return table;
		}

		///<summary>Inserts one Intervention into the database.  Returns the new priKey.</summary>
		public static long Insert(Intervention intervention){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				intervention.InterventionNum=DbHelper.GetNextOracleKey("intervention","InterventionNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(intervention,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							intervention.InterventionNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(intervention,false);
			}
		}

		///<summary>Inserts one Intervention into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(Intervention intervention,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				intervention.InterventionNum=ReplicationServers.GetKey("intervention","InterventionNum");
			}
			string command="INSERT INTO intervention (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="InterventionNum,";
			}
			command+="PatNum,ProvNum,CodeValue,CodeSystem,Note,DateEntry,CodeSet,IsPatDeclined) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(intervention.InterventionNum)+",";
			}
			command+=
				     POut.Long  (intervention.PatNum)+","
				+    POut.Long  (intervention.ProvNum)+","
				+"'"+POut.String(intervention.CodeValue)+"',"
				+"'"+POut.String(intervention.CodeSystem)+"',"
				+    DbHelper.ParamChar+"paramNote,"
				+    POut.Date  (intervention.DateEntry)+","
				+    POut.Int   ((int)intervention.CodeSet)+","
				+    POut.Bool  (intervention.IsPatDeclined)+")";
			if(intervention.Note==null) {
				intervention.Note="";
			}
			OdSqlParameter paramNote=new OdSqlParameter("paramNote",OdDbType.Text,POut.StringParam(intervention.Note));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramNote);
			}
			else {
				intervention.InterventionNum=Db.NonQ(command,true,"InterventionNum","intervention",paramNote);
			}
			return intervention.InterventionNum;
		}

		///<summary>Inserts one Intervention into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Intervention intervention){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(intervention,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					intervention.InterventionNum=DbHelper.GetNextOracleKey("intervention","InterventionNum"); //Cacheless method
				}
				return InsertNoCache(intervention,true);
			}
		}

		///<summary>Inserts one Intervention into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Intervention intervention,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO intervention (";
			if(!useExistingPK && isRandomKeys) {
				intervention.InterventionNum=ReplicationServers.GetKeyNoCache("intervention","InterventionNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="InterventionNum,";
			}
			command+="PatNum,ProvNum,CodeValue,CodeSystem,Note,DateEntry,CodeSet,IsPatDeclined) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(intervention.InterventionNum)+",";
			}
			command+=
				     POut.Long  (intervention.PatNum)+","
				+    POut.Long  (intervention.ProvNum)+","
				+"'"+POut.String(intervention.CodeValue)+"',"
				+"'"+POut.String(intervention.CodeSystem)+"',"
				+    DbHelper.ParamChar+"paramNote,"
				+    POut.Date  (intervention.DateEntry)+","
				+    POut.Int   ((int)intervention.CodeSet)+","
				+    POut.Bool  (intervention.IsPatDeclined)+")";
			if(intervention.Note==null) {
				intervention.Note="";
			}
			OdSqlParameter paramNote=new OdSqlParameter("paramNote",OdDbType.Text,POut.StringParam(intervention.Note));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramNote);
			}
			else {
				intervention.InterventionNum=Db.NonQ(command,true,"InterventionNum","intervention",paramNote);
			}
			return intervention.InterventionNum;
		}

		///<summary>Updates one Intervention in the database.</summary>
		public static void Update(Intervention intervention){
			string command="UPDATE intervention SET "
				+"PatNum         =  "+POut.Long  (intervention.PatNum)+", "
				+"ProvNum        =  "+POut.Long  (intervention.ProvNum)+", "
				+"CodeValue      = '"+POut.String(intervention.CodeValue)+"', "
				+"CodeSystem     = '"+POut.String(intervention.CodeSystem)+"', "
				+"Note           =  "+DbHelper.ParamChar+"paramNote, "
				+"DateEntry      =  "+POut.Date  (intervention.DateEntry)+", "
				+"CodeSet        =  "+POut.Int   ((int)intervention.CodeSet)+", "
				+"IsPatDeclined  =  "+POut.Bool  (intervention.IsPatDeclined)+" "
				+"WHERE InterventionNum = "+POut.Long(intervention.InterventionNum);
			if(intervention.Note==null) {
				intervention.Note="";
			}
			OdSqlParameter paramNote=new OdSqlParameter("paramNote",OdDbType.Text,POut.StringParam(intervention.Note));
			Db.NonQ(command,paramNote);
		}

		///<summary>Updates one Intervention in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(Intervention intervention,Intervention oldIntervention){
			string command="";
			if(intervention.PatNum != oldIntervention.PatNum) {
				if(command!=""){ command+=",";}
				command+="PatNum = "+POut.Long(intervention.PatNum)+"";
			}
			if(intervention.ProvNum != oldIntervention.ProvNum) {
				if(command!=""){ command+=",";}
				command+="ProvNum = "+POut.Long(intervention.ProvNum)+"";
			}
			if(intervention.CodeValue != oldIntervention.CodeValue) {
				if(command!=""){ command+=",";}
				command+="CodeValue = '"+POut.String(intervention.CodeValue)+"'";
			}
			if(intervention.CodeSystem != oldIntervention.CodeSystem) {
				if(command!=""){ command+=",";}
				command+="CodeSystem = '"+POut.String(intervention.CodeSystem)+"'";
			}
			if(intervention.Note != oldIntervention.Note) {
				if(command!=""){ command+=",";}
				command+="Note = "+DbHelper.ParamChar+"paramNote";
			}
			if(intervention.DateEntry.Date != oldIntervention.DateEntry.Date) {
				if(command!=""){ command+=",";}
				command+="DateEntry = "+POut.Date(intervention.DateEntry)+"";
			}
			if(intervention.CodeSet != oldIntervention.CodeSet) {
				if(command!=""){ command+=",";}
				command+="CodeSet = "+POut.Int   ((int)intervention.CodeSet)+"";
			}
			if(intervention.IsPatDeclined != oldIntervention.IsPatDeclined) {
				if(command!=""){ command+=",";}
				command+="IsPatDeclined = "+POut.Bool(intervention.IsPatDeclined)+"";
			}
			if(command==""){
				return false;
			}
			if(intervention.Note==null) {
				intervention.Note="";
			}
			OdSqlParameter paramNote=new OdSqlParameter("paramNote",OdDbType.Text,POut.StringParam(intervention.Note));
			command="UPDATE intervention SET "+command
				+" WHERE InterventionNum = "+POut.Long(intervention.InterventionNum);
			Db.NonQ(command,paramNote);
			return true;
		}

		///<summary>Returns true if Update(Intervention,Intervention) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(Intervention intervention,Intervention oldIntervention) {
			if(intervention.PatNum != oldIntervention.PatNum) {
				return true;
			}
			if(intervention.ProvNum != oldIntervention.ProvNum) {
				return true;
			}
			if(intervention.CodeValue != oldIntervention.CodeValue) {
				return true;
			}
			if(intervention.CodeSystem != oldIntervention.CodeSystem) {
				return true;
			}
			if(intervention.Note != oldIntervention.Note) {
				return true;
			}
			if(intervention.DateEntry.Date != oldIntervention.DateEntry.Date) {
				return true;
			}
			if(intervention.CodeSet != oldIntervention.CodeSet) {
				return true;
			}
			if(intervention.IsPatDeclined != oldIntervention.IsPatDeclined) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one Intervention from the database.</summary>
		public static void Delete(long interventionNum){
			string command="DELETE FROM intervention "
				+"WHERE InterventionNum = "+POut.Long(interventionNum);
			Db.NonQ(command);
		}

	}
}