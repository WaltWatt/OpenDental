//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class PatientCrud {
		///<summary>Gets one Patient object from the database using the primary key.  Returns null if not found.</summary>
		public static Patient SelectOne(long patNum){
			string command="SELECT * FROM patient "
				+"WHERE PatNum = "+POut.Long(patNum);
			List<Patient> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Patient object from the database using a query.</summary>
		public static Patient SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Patient> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Patient objects from the database using a query.</summary>
		public static List<Patient> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Patient> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<Patient> TableToList(DataTable table){
			List<Patient> retVal=new List<Patient>();
			Patient patient;
			foreach(DataRow row in table.Rows) {
				patient=new Patient();
				patient.PatNum                   = PIn.Long  (row["PatNum"].ToString());
				patient.LName                    = PIn.String(row["LName"].ToString());
				patient.FName                    = PIn.String(row["FName"].ToString());
				patient.MiddleI                  = PIn.String(row["MiddleI"].ToString());
				patient.Preferred                = PIn.String(row["Preferred"].ToString());
				patient.PatStatus                = (OpenDentBusiness.PatientStatus)PIn.Int(row["PatStatus"].ToString());
				patient.Gender                   = (OpenDentBusiness.PatientGender)PIn.Int(row["Gender"].ToString());
				patient.Position                 = (OpenDentBusiness.PatientPosition)PIn.Int(row["Position"].ToString());
				patient.Birthdate                = PIn.Date  (row["Birthdate"].ToString());
				patient.SSN                      = PIn.String(row["SSN"].ToString());
				patient.Address                  = PIn.String(row["Address"].ToString());
				patient.Address2                 = PIn.String(row["Address2"].ToString());
				patient.City                     = PIn.String(row["City"].ToString());
				patient.State                    = PIn.String(row["State"].ToString());
				patient.Zip                      = PIn.String(row["Zip"].ToString());
				patient.HmPhone                  = PIn.String(row["HmPhone"].ToString());
				patient.WkPhone                  = PIn.String(row["WkPhone"].ToString());
				patient.WirelessPhone            = PIn.String(row["WirelessPhone"].ToString());
				patient.Guarantor                = PIn.Long  (row["Guarantor"].ToString());
				patient.CreditType               = PIn.String(row["CreditType"].ToString());
				patient.Email                    = PIn.String(row["Email"].ToString());
				patient.Salutation               = PIn.String(row["Salutation"].ToString());
				patient.EstBalance               = PIn.Double(row["EstBalance"].ToString());
				patient.PriProv                  = PIn.Long  (row["PriProv"].ToString());
				patient.SecProv                  = PIn.Long  (row["SecProv"].ToString());
				patient.FeeSched                 = PIn.Long  (row["FeeSched"].ToString());
				patient.BillingType              = PIn.Long  (row["BillingType"].ToString());
				patient.ImageFolder              = PIn.String(row["ImageFolder"].ToString());
				patient.AddrNote                 = PIn.String(row["AddrNote"].ToString());
				patient.FamFinUrgNote            = PIn.String(row["FamFinUrgNote"].ToString());
				patient.MedUrgNote               = PIn.String(row["MedUrgNote"].ToString());
				patient.ApptModNote              = PIn.String(row["ApptModNote"].ToString());
				patient.StudentStatus            = PIn.String(row["StudentStatus"].ToString());
				patient.SchoolName               = PIn.String(row["SchoolName"].ToString());
				patient.ChartNumber              = PIn.String(row["ChartNumber"].ToString());
				patient.MedicaidID               = PIn.String(row["MedicaidID"].ToString());
				patient.Bal_0_30                 = PIn.Double(row["Bal_0_30"].ToString());
				patient.Bal_31_60                = PIn.Double(row["Bal_31_60"].ToString());
				patient.Bal_61_90                = PIn.Double(row["Bal_61_90"].ToString());
				patient.BalOver90                = PIn.Double(row["BalOver90"].ToString());
				patient.InsEst                   = PIn.Double(row["InsEst"].ToString());
				patient.BalTotal                 = PIn.Double(row["BalTotal"].ToString());
				patient.EmployerNum              = PIn.Long  (row["EmployerNum"].ToString());
				patient.EmploymentNote           = PIn.String(row["EmploymentNote"].ToString());
				patient.County                   = PIn.String(row["County"].ToString());
				patient.GradeLevel               = (OpenDentBusiness.PatientGrade)PIn.Int(row["GradeLevel"].ToString());
				patient.Urgency                  = (OpenDentBusiness.TreatmentUrgency)PIn.Int(row["Urgency"].ToString());
				patient.DateFirstVisit           = PIn.Date  (row["DateFirstVisit"].ToString());
				patient.ClinicNum                = PIn.Long  (row["ClinicNum"].ToString());
				patient.HasIns                   = PIn.String(row["HasIns"].ToString());
				patient.TrophyFolder             = PIn.String(row["TrophyFolder"].ToString());
				patient.PlannedIsDone            = PIn.Bool  (row["PlannedIsDone"].ToString());
				patient.Premed                   = PIn.Bool  (row["Premed"].ToString());
				patient.Ward                     = PIn.String(row["Ward"].ToString());
				patient.PreferConfirmMethod      = (OpenDentBusiness.ContactMethod)PIn.Int(row["PreferConfirmMethod"].ToString());
				patient.PreferContactMethod      = (OpenDentBusiness.ContactMethod)PIn.Int(row["PreferContactMethod"].ToString());
				patient.PreferRecallMethod       = (OpenDentBusiness.ContactMethod)PIn.Int(row["PreferRecallMethod"].ToString());
				patient.SchedBeforeTime          = PIn.Time(row["SchedBeforeTime"].ToString());
				patient.SchedAfterTime           = PIn.Time(row["SchedAfterTime"].ToString());
				patient.SchedDayOfWeek           = PIn.Byte  (row["SchedDayOfWeek"].ToString());
				patient.Language                 = PIn.String(row["Language"].ToString());
				patient.AdmitDate                = PIn.Date  (row["AdmitDate"].ToString());
				patient.Title                    = PIn.String(row["Title"].ToString());
				patient.PayPlanDue               = PIn.Double(row["PayPlanDue"].ToString());
				patient.SiteNum                  = PIn.Long  (row["SiteNum"].ToString());
				patient.DateTStamp               = PIn.DateT (row["DateTStamp"].ToString());
				patient.ResponsParty             = PIn.Long  (row["ResponsParty"].ToString());
				patient.CanadianEligibilityCode  = PIn.Byte  (row["CanadianEligibilityCode"].ToString());
				patient.AskToArriveEarly         = PIn.Int   (row["AskToArriveEarly"].ToString());
				patient.PreferContactConfidential= (OpenDentBusiness.ContactMethod)PIn.Int(row["PreferContactConfidential"].ToString());
				patient.SuperFamily              = PIn.Long  (row["SuperFamily"].ToString());
				patient.TxtMsgOk                 = (OpenDentBusiness.YN)PIn.Int(row["TxtMsgOk"].ToString());
				patient.SmokingSnoMed            = PIn.String(row["SmokingSnoMed"].ToString());
				patient.Country                  = PIn.String(row["Country"].ToString());
				patient.DateTimeDeceased         = PIn.DateT (row["DateTimeDeceased"].ToString());
				patient.BillingCycleDay          = PIn.Int   (row["BillingCycleDay"].ToString());
				patient.SecUserNumEntry          = PIn.Long  (row["SecUserNumEntry"].ToString());
				patient.SecDateEntry             = PIn.Date  (row["SecDateEntry"].ToString());
				patient.HasSuperBilling          = PIn.Bool  (row["HasSuperBilling"].ToString());
				patient.PatNumCloneFrom          = PIn.Long  (row["PatNumCloneFrom"].ToString());
				patient.DiscountPlanNum          = PIn.Long  (row["DiscountPlanNum"].ToString());
				retVal.Add(patient);
			}
			return retVal;
		}

		///<summary>Converts a list of Patient into a DataTable.</summary>
		public static DataTable ListToTable(List<Patient> listPatients,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="Patient";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("PatNum");
			table.Columns.Add("LName");
			table.Columns.Add("FName");
			table.Columns.Add("MiddleI");
			table.Columns.Add("Preferred");
			table.Columns.Add("PatStatus");
			table.Columns.Add("Gender");
			table.Columns.Add("Position");
			table.Columns.Add("Birthdate");
			table.Columns.Add("SSN");
			table.Columns.Add("Address");
			table.Columns.Add("Address2");
			table.Columns.Add("City");
			table.Columns.Add("State");
			table.Columns.Add("Zip");
			table.Columns.Add("HmPhone");
			table.Columns.Add("WkPhone");
			table.Columns.Add("WirelessPhone");
			table.Columns.Add("Guarantor");
			table.Columns.Add("CreditType");
			table.Columns.Add("Email");
			table.Columns.Add("Salutation");
			table.Columns.Add("EstBalance");
			table.Columns.Add("PriProv");
			table.Columns.Add("SecProv");
			table.Columns.Add("FeeSched");
			table.Columns.Add("BillingType");
			table.Columns.Add("ImageFolder");
			table.Columns.Add("AddrNote");
			table.Columns.Add("FamFinUrgNote");
			table.Columns.Add("MedUrgNote");
			table.Columns.Add("ApptModNote");
			table.Columns.Add("StudentStatus");
			table.Columns.Add("SchoolName");
			table.Columns.Add("ChartNumber");
			table.Columns.Add("MedicaidID");
			table.Columns.Add("Bal_0_30");
			table.Columns.Add("Bal_31_60");
			table.Columns.Add("Bal_61_90");
			table.Columns.Add("BalOver90");
			table.Columns.Add("InsEst");
			table.Columns.Add("BalTotal");
			table.Columns.Add("EmployerNum");
			table.Columns.Add("EmploymentNote");
			table.Columns.Add("County");
			table.Columns.Add("GradeLevel");
			table.Columns.Add("Urgency");
			table.Columns.Add("DateFirstVisit");
			table.Columns.Add("ClinicNum");
			table.Columns.Add("HasIns");
			table.Columns.Add("TrophyFolder");
			table.Columns.Add("PlannedIsDone");
			table.Columns.Add("Premed");
			table.Columns.Add("Ward");
			table.Columns.Add("PreferConfirmMethod");
			table.Columns.Add("PreferContactMethod");
			table.Columns.Add("PreferRecallMethod");
			table.Columns.Add("SchedBeforeTime");
			table.Columns.Add("SchedAfterTime");
			table.Columns.Add("SchedDayOfWeek");
			table.Columns.Add("Language");
			table.Columns.Add("AdmitDate");
			table.Columns.Add("Title");
			table.Columns.Add("PayPlanDue");
			table.Columns.Add("SiteNum");
			table.Columns.Add("DateTStamp");
			table.Columns.Add("ResponsParty");
			table.Columns.Add("CanadianEligibilityCode");
			table.Columns.Add("AskToArriveEarly");
			table.Columns.Add("PreferContactConfidential");
			table.Columns.Add("SuperFamily");
			table.Columns.Add("TxtMsgOk");
			table.Columns.Add("SmokingSnoMed");
			table.Columns.Add("Country");
			table.Columns.Add("DateTimeDeceased");
			table.Columns.Add("BillingCycleDay");
			table.Columns.Add("SecUserNumEntry");
			table.Columns.Add("SecDateEntry");
			table.Columns.Add("HasSuperBilling");
			table.Columns.Add("PatNumCloneFrom");
			table.Columns.Add("DiscountPlanNum");
			foreach(Patient patient in listPatients) {
				table.Rows.Add(new object[] {
					POut.Long  (patient.PatNum),
					            patient.LName,
					            patient.FName,
					            patient.MiddleI,
					            patient.Preferred,
					POut.Int   ((int)patient.PatStatus),
					POut.Int   ((int)patient.Gender),
					POut.Int   ((int)patient.Position),
					POut.DateT (patient.Birthdate,false),
					            patient.SSN,
					            patient.Address,
					            patient.Address2,
					            patient.City,
					            patient.State,
					            patient.Zip,
					            patient.HmPhone,
					            patient.WkPhone,
					            patient.WirelessPhone,
					POut.Long  (patient.Guarantor),
					            patient.CreditType,
					            patient.Email,
					            patient.Salutation,
					POut.Double(patient.EstBalance),
					POut.Long  (patient.PriProv),
					POut.Long  (patient.SecProv),
					POut.Long  (patient.FeeSched),
					POut.Long  (patient.BillingType),
					            patient.ImageFolder,
					            patient.AddrNote,
					            patient.FamFinUrgNote,
					            patient.MedUrgNote,
					            patient.ApptModNote,
					            patient.StudentStatus,
					            patient.SchoolName,
					            patient.ChartNumber,
					            patient.MedicaidID,
					POut.Double(patient.Bal_0_30),
					POut.Double(patient.Bal_31_60),
					POut.Double(patient.Bal_61_90),
					POut.Double(patient.BalOver90),
					POut.Double(patient.InsEst),
					POut.Double(patient.BalTotal),
					POut.Long  (patient.EmployerNum),
					            patient.EmploymentNote,
					            patient.County,
					POut.Int   ((int)patient.GradeLevel),
					POut.Int   ((int)patient.Urgency),
					POut.DateT (patient.DateFirstVisit,false),
					POut.Long  (patient.ClinicNum),
					            patient.HasIns,
					            patient.TrophyFolder,
					POut.Bool  (patient.PlannedIsDone),
					POut.Bool  (patient.Premed),
					            patient.Ward,
					POut.Int   ((int)patient.PreferConfirmMethod),
					POut.Int   ((int)patient.PreferContactMethod),
					POut.Int   ((int)patient.PreferRecallMethod),
					POut.Time  (patient.SchedBeforeTime),
					POut.Time  (patient.SchedAfterTime),
					POut.Byte  (patient.SchedDayOfWeek),
					            patient.Language,
					POut.DateT (patient.AdmitDate,false),
					            patient.Title,
					POut.Double(patient.PayPlanDue),
					POut.Long  (patient.SiteNum),
					POut.DateT (patient.DateTStamp,false),
					POut.Long  (patient.ResponsParty),
					POut.Byte  (patient.CanadianEligibilityCode),
					POut.Int   (patient.AskToArriveEarly),
					POut.Int   ((int)patient.PreferContactConfidential),
					POut.Long  (patient.SuperFamily),
					POut.Int   ((int)patient.TxtMsgOk),
					            patient.SmokingSnoMed,
					            patient.Country,
					POut.DateT (patient.DateTimeDeceased,false),
					POut.Int   (patient.BillingCycleDay),
					POut.Long  (patient.SecUserNumEntry),
					POut.DateT (patient.SecDateEntry,false),
					POut.Bool  (patient.HasSuperBilling),
					POut.Long  (patient.PatNumCloneFrom),
					POut.Long  (patient.DiscountPlanNum),
				});
			}
			return table;
		}

		///<summary>Inserts one Patient into the database.  Returns the new priKey.</summary>
		public static long Insert(Patient patient){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				patient.PatNum=DbHelper.GetNextOracleKey("patient","PatNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(patient,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							patient.PatNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(patient,false);
			}
		}

		///<summary>Inserts one Patient into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(Patient patient,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				patient.PatNum=ReplicationServers.GetKey("patient","PatNum");
			}
			string command="INSERT INTO patient (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="PatNum,";
			}
			command+="LName,FName,MiddleI,Preferred,PatStatus,Gender,Position,Birthdate,SSN,Address,Address2,City,State,Zip,HmPhone,WkPhone,WirelessPhone,Guarantor,CreditType,Email,Salutation,EstBalance,PriProv,SecProv,FeeSched,BillingType,ImageFolder,AddrNote,FamFinUrgNote,MedUrgNote,ApptModNote,StudentStatus,SchoolName,ChartNumber,MedicaidID,Bal_0_30,Bal_31_60,Bal_61_90,BalOver90,InsEst,BalTotal,EmployerNum,EmploymentNote,County,GradeLevel,Urgency,DateFirstVisit,ClinicNum,HasIns,TrophyFolder,PlannedIsDone,Premed,Ward,PreferConfirmMethod,PreferContactMethod,PreferRecallMethod,SchedBeforeTime,SchedAfterTime,SchedDayOfWeek,Language,AdmitDate,Title,PayPlanDue,SiteNum,ResponsParty,CanadianEligibilityCode,AskToArriveEarly,PreferContactConfidential,SuperFamily,TxtMsgOk,SmokingSnoMed,Country,DateTimeDeceased,BillingCycleDay,SecUserNumEntry,SecDateEntry,HasSuperBilling,PatNumCloneFrom,DiscountPlanNum) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(patient.PatNum)+",";
			}
			command+=
				 "'"+POut.String(patient.LName)+"',"
				+"'"+POut.String(patient.FName)+"',"
				+"'"+POut.String(patient.MiddleI)+"',"
				+"'"+POut.String(patient.Preferred)+"',"
				+    POut.Int   ((int)patient.PatStatus)+","
				+    POut.Int   ((int)patient.Gender)+","
				+    POut.Int   ((int)patient.Position)+","
				+    POut.Date  (patient.Birthdate)+","
				+"'"+POut.String(patient.SSN)+"',"
				+"'"+POut.StringNote(patient.Address,true)+"',"
				+"'"+POut.StringNote(patient.Address2,true)+"',"
				+"'"+POut.String(patient.City)+"',"
				+"'"+POut.String(patient.State)+"',"
				+"'"+POut.String(patient.Zip)+"',"
				+"'"+POut.String(patient.HmPhone)+"',"
				+"'"+POut.String(patient.WkPhone)+"',"
				+"'"+POut.String(patient.WirelessPhone)+"',"
				+    POut.Long  (patient.Guarantor)+","
				+"'"+POut.String(patient.CreditType)+"',"
				+"'"+POut.String(patient.Email)+"',"
				+"'"+POut.String(patient.Salutation)+"',"
				+"'"+POut.Double(patient.EstBalance)+"',"
				+    POut.Long  (patient.PriProv)+","
				+    POut.Long  (patient.SecProv)+","
				+    POut.Long  (patient.FeeSched)+","
				+    POut.Long  (patient.BillingType)+","
				+"'"+POut.String(patient.ImageFolder)+"',"
				+    DbHelper.ParamChar+"paramAddrNote,"
				+    DbHelper.ParamChar+"paramFamFinUrgNote,"
				+"'"+POut.StringNote(patient.MedUrgNote,true)+"',"
				+"'"+POut.String(patient.ApptModNote)+"',"
				+"'"+POut.String(patient.StudentStatus)+"',"
				+"'"+POut.String(patient.SchoolName)+"',"
				+"'"+POut.String(patient.ChartNumber)+"',"
				+"'"+POut.String(patient.MedicaidID)+"',"
				+"'"+POut.Double(patient.Bal_0_30)+"',"
				+"'"+POut.Double(patient.Bal_31_60)+"',"
				+"'"+POut.Double(patient.Bal_61_90)+"',"
				+"'"+POut.Double(patient.BalOver90)+"',"
				+"'"+POut.Double(patient.InsEst)+"',"
				+"'"+POut.Double(patient.BalTotal)+"',"
				+    POut.Long  (patient.EmployerNum)+","
				+"'"+POut.String(patient.EmploymentNote)+"',"
				+"'"+POut.String(patient.County)+"',"
				+    POut.Int   ((int)patient.GradeLevel)+","
				+    POut.Int   ((int)patient.Urgency)+","
				+    POut.Date  (patient.DateFirstVisit)+","
				+    POut.Long  (patient.ClinicNum)+","
				+"'"+POut.String(patient.HasIns)+"',"
				+"'"+POut.String(patient.TrophyFolder)+"',"
				+    POut.Bool  (patient.PlannedIsDone)+","
				+    POut.Bool  (patient.Premed)+","
				+"'"+POut.String(patient.Ward)+"',"
				+    POut.Int   ((int)patient.PreferConfirmMethod)+","
				+    POut.Int   ((int)patient.PreferContactMethod)+","
				+    POut.Int   ((int)patient.PreferRecallMethod)+","
				+    POut.Time  (patient.SchedBeforeTime)+","
				+    POut.Time  (patient.SchedAfterTime)+","
				+    POut.Byte  (patient.SchedDayOfWeek)+","
				+"'"+POut.String(patient.Language)+"',"
				+    POut.Date  (patient.AdmitDate)+","
				+"'"+POut.String(patient.Title)+"',"
				+"'"+POut.Double(patient.PayPlanDue)+"',"
				+    POut.Long  (patient.SiteNum)+","
				//DateTStamp can only be set by MySQL
				+    POut.Long  (patient.ResponsParty)+","
				+    POut.Byte  (patient.CanadianEligibilityCode)+","
				+    POut.Int   (patient.AskToArriveEarly)+","
				+    POut.Int   ((int)patient.PreferContactConfidential)+","
				+    POut.Long  (patient.SuperFamily)+","
				+    POut.Int   ((int)patient.TxtMsgOk)+","
				+"'"+POut.String(patient.SmokingSnoMed)+"',"
				+"'"+POut.String(patient.Country)+"',"
				+    POut.DateT (patient.DateTimeDeceased)+","
				+    POut.Int   (patient.BillingCycleDay)+","
				+    POut.Long  (patient.SecUserNumEntry)+","
				+    DbHelper.Now()+","
				+    POut.Bool  (patient.HasSuperBilling)+","
				+    POut.Long  (patient.PatNumCloneFrom)+","
				+    POut.Long  (patient.DiscountPlanNum)+")";
			if(patient.AddrNote==null) {
				patient.AddrNote="";
			}
			OdSqlParameter paramAddrNote=new OdSqlParameter("paramAddrNote",OdDbType.Text,POut.StringNote(patient.AddrNote));
			if(patient.FamFinUrgNote==null) {
				patient.FamFinUrgNote="";
			}
			OdSqlParameter paramFamFinUrgNote=new OdSqlParameter("paramFamFinUrgNote",OdDbType.Text,POut.StringNote(patient.FamFinUrgNote));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramAddrNote,paramFamFinUrgNote);
			}
			else {
				patient.PatNum=Db.NonQ(command,true,"PatNum","patient",paramAddrNote,paramFamFinUrgNote);
			}
			return patient.PatNum;
		}

		///<summary>Inserts one Patient into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Patient patient){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(patient,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					patient.PatNum=DbHelper.GetNextOracleKey("patient","PatNum"); //Cacheless method
				}
				return InsertNoCache(patient,true);
			}
		}

		///<summary>Inserts one Patient into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Patient patient,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO patient (";
			if(!useExistingPK && isRandomKeys) {
				patient.PatNum=ReplicationServers.GetKeyNoCache("patient","PatNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="PatNum,";
			}
			command+="LName,FName,MiddleI,Preferred,PatStatus,Gender,Position,Birthdate,SSN,Address,Address2,City,State,Zip,HmPhone,WkPhone,WirelessPhone,Guarantor,CreditType,Email,Salutation,EstBalance,PriProv,SecProv,FeeSched,BillingType,ImageFolder,AddrNote,FamFinUrgNote,MedUrgNote,ApptModNote,StudentStatus,SchoolName,ChartNumber,MedicaidID,Bal_0_30,Bal_31_60,Bal_61_90,BalOver90,InsEst,BalTotal,EmployerNum,EmploymentNote,County,GradeLevel,Urgency,DateFirstVisit,ClinicNum,HasIns,TrophyFolder,PlannedIsDone,Premed,Ward,PreferConfirmMethod,PreferContactMethod,PreferRecallMethod,SchedBeforeTime,SchedAfterTime,SchedDayOfWeek,Language,AdmitDate,Title,PayPlanDue,SiteNum,ResponsParty,CanadianEligibilityCode,AskToArriveEarly,PreferContactConfidential,SuperFamily,TxtMsgOk,SmokingSnoMed,Country,DateTimeDeceased,BillingCycleDay,SecUserNumEntry,SecDateEntry,HasSuperBilling,PatNumCloneFrom,DiscountPlanNum) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(patient.PatNum)+",";
			}
			command+=
				 "'"+POut.String(patient.LName)+"',"
				+"'"+POut.String(patient.FName)+"',"
				+"'"+POut.String(patient.MiddleI)+"',"
				+"'"+POut.String(patient.Preferred)+"',"
				+    POut.Int   ((int)patient.PatStatus)+","
				+    POut.Int   ((int)patient.Gender)+","
				+    POut.Int   ((int)patient.Position)+","
				+    POut.Date  (patient.Birthdate)+","
				+"'"+POut.String(patient.SSN)+"',"
				+"'"+POut.StringNote(patient.Address,true)+"',"
				+"'"+POut.StringNote(patient.Address2,true)+"',"
				+"'"+POut.String(patient.City)+"',"
				+"'"+POut.String(patient.State)+"',"
				+"'"+POut.String(patient.Zip)+"',"
				+"'"+POut.String(patient.HmPhone)+"',"
				+"'"+POut.String(patient.WkPhone)+"',"
				+"'"+POut.String(patient.WirelessPhone)+"',"
				+    POut.Long  (patient.Guarantor)+","
				+"'"+POut.String(patient.CreditType)+"',"
				+"'"+POut.String(patient.Email)+"',"
				+"'"+POut.String(patient.Salutation)+"',"
				+"'"+POut.Double(patient.EstBalance)+"',"
				+    POut.Long  (patient.PriProv)+","
				+    POut.Long  (patient.SecProv)+","
				+    POut.Long  (patient.FeeSched)+","
				+    POut.Long  (patient.BillingType)+","
				+"'"+POut.String(patient.ImageFolder)+"',"
				+    DbHelper.ParamChar+"paramAddrNote,"
				+    DbHelper.ParamChar+"paramFamFinUrgNote,"
				+"'"+POut.StringNote(patient.MedUrgNote,true)+"',"
				+"'"+POut.String(patient.ApptModNote)+"',"
				+"'"+POut.String(patient.StudentStatus)+"',"
				+"'"+POut.String(patient.SchoolName)+"',"
				+"'"+POut.String(patient.ChartNumber)+"',"
				+"'"+POut.String(patient.MedicaidID)+"',"
				+"'"+POut.Double(patient.Bal_0_30)+"',"
				+"'"+POut.Double(patient.Bal_31_60)+"',"
				+"'"+POut.Double(patient.Bal_61_90)+"',"
				+"'"+POut.Double(patient.BalOver90)+"',"
				+"'"+POut.Double(patient.InsEst)+"',"
				+"'"+POut.Double(patient.BalTotal)+"',"
				+    POut.Long  (patient.EmployerNum)+","
				+"'"+POut.String(patient.EmploymentNote)+"',"
				+"'"+POut.String(patient.County)+"',"
				+    POut.Int   ((int)patient.GradeLevel)+","
				+    POut.Int   ((int)patient.Urgency)+","
				+    POut.Date  (patient.DateFirstVisit)+","
				+    POut.Long  (patient.ClinicNum)+","
				+"'"+POut.String(patient.HasIns)+"',"
				+"'"+POut.String(patient.TrophyFolder)+"',"
				+    POut.Bool  (patient.PlannedIsDone)+","
				+    POut.Bool  (patient.Premed)+","
				+"'"+POut.String(patient.Ward)+"',"
				+    POut.Int   ((int)patient.PreferConfirmMethod)+","
				+    POut.Int   ((int)patient.PreferContactMethod)+","
				+    POut.Int   ((int)patient.PreferRecallMethod)+","
				+    POut.Time  (patient.SchedBeforeTime)+","
				+    POut.Time  (patient.SchedAfterTime)+","
				+    POut.Byte  (patient.SchedDayOfWeek)+","
				+"'"+POut.String(patient.Language)+"',"
				+    POut.Date  (patient.AdmitDate)+","
				+"'"+POut.String(patient.Title)+"',"
				+"'"+POut.Double(patient.PayPlanDue)+"',"
				+    POut.Long  (patient.SiteNum)+","
				//DateTStamp can only be set by MySQL
				+    POut.Long  (patient.ResponsParty)+","
				+    POut.Byte  (patient.CanadianEligibilityCode)+","
				+    POut.Int   (patient.AskToArriveEarly)+","
				+    POut.Int   ((int)patient.PreferContactConfidential)+","
				+    POut.Long  (patient.SuperFamily)+","
				+    POut.Int   ((int)patient.TxtMsgOk)+","
				+"'"+POut.String(patient.SmokingSnoMed)+"',"
				+"'"+POut.String(patient.Country)+"',"
				+    POut.DateT (patient.DateTimeDeceased)+","
				+    POut.Int   (patient.BillingCycleDay)+","
				+    POut.Long  (patient.SecUserNumEntry)+","
				+    DbHelper.Now()+","
				+    POut.Bool  (patient.HasSuperBilling)+","
				+    POut.Long  (patient.PatNumCloneFrom)+","
				+    POut.Long  (patient.DiscountPlanNum)+")";
			if(patient.AddrNote==null) {
				patient.AddrNote="";
			}
			OdSqlParameter paramAddrNote=new OdSqlParameter("paramAddrNote",OdDbType.Text,POut.StringNote(patient.AddrNote));
			if(patient.FamFinUrgNote==null) {
				patient.FamFinUrgNote="";
			}
			OdSqlParameter paramFamFinUrgNote=new OdSqlParameter("paramFamFinUrgNote",OdDbType.Text,POut.StringNote(patient.FamFinUrgNote));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramAddrNote,paramFamFinUrgNote);
			}
			else {
				patient.PatNum=Db.NonQ(command,true,"PatNum","patient",paramAddrNote,paramFamFinUrgNote);
			}
			return patient.PatNum;
		}

		///<summary>Updates one Patient in the database.</summary>
		public static void Update(Patient patient){
			string command="UPDATE patient SET "
				+"LName                    = '"+POut.String(patient.LName)+"', "
				+"FName                    = '"+POut.String(patient.FName)+"', "
				+"MiddleI                  = '"+POut.String(patient.MiddleI)+"', "
				+"Preferred                = '"+POut.String(patient.Preferred)+"', "
				+"PatStatus                =  "+POut.Int   ((int)patient.PatStatus)+", "
				+"Gender                   =  "+POut.Int   ((int)patient.Gender)+", "
				+"Position                 =  "+POut.Int   ((int)patient.Position)+", "
				+"Birthdate                =  "+POut.Date  (patient.Birthdate)+", "
				+"SSN                      = '"+POut.String(patient.SSN)+"', "
				+"Address                  = '"+POut.StringNote(patient.Address,true)+"', "
				+"Address2                 = '"+POut.StringNote(patient.Address2,true)+"', "
				+"City                     = '"+POut.String(patient.City)+"', "
				+"State                    = '"+POut.String(patient.State)+"', "
				+"Zip                      = '"+POut.String(patient.Zip)+"', "
				+"HmPhone                  = '"+POut.String(patient.HmPhone)+"', "
				+"WkPhone                  = '"+POut.String(patient.WkPhone)+"', "
				+"WirelessPhone            = '"+POut.String(patient.WirelessPhone)+"', "
				+"Guarantor                =  "+POut.Long  (patient.Guarantor)+", "
				+"CreditType               = '"+POut.String(patient.CreditType)+"', "
				+"Email                    = '"+POut.String(patient.Email)+"', "
				+"Salutation               = '"+POut.String(patient.Salutation)+"', "
				+"EstBalance               = '"+POut.Double(patient.EstBalance)+"', "
				+"PriProv                  =  "+POut.Long  (patient.PriProv)+", "
				+"SecProv                  =  "+POut.Long  (patient.SecProv)+", "
				+"FeeSched                 =  "+POut.Long  (patient.FeeSched)+", "
				+"BillingType              =  "+POut.Long  (patient.BillingType)+", "
				+"ImageFolder              = '"+POut.String(patient.ImageFolder)+"', "
				+"AddrNote                 =  "+DbHelper.ParamChar+"paramAddrNote, "
				+"FamFinUrgNote            =  "+DbHelper.ParamChar+"paramFamFinUrgNote, "
				+"MedUrgNote               = '"+POut.StringNote(patient.MedUrgNote,true)+"', "
				+"ApptModNote              = '"+POut.String(patient.ApptModNote)+"', "
				+"StudentStatus            = '"+POut.String(patient.StudentStatus)+"', "
				+"SchoolName               = '"+POut.String(patient.SchoolName)+"', "
				+"ChartNumber              = '"+POut.String(patient.ChartNumber)+"', "
				+"MedicaidID               = '"+POut.String(patient.MedicaidID)+"', "
				+"Bal_0_30                 = '"+POut.Double(patient.Bal_0_30)+"', "
				+"Bal_31_60                = '"+POut.Double(patient.Bal_31_60)+"', "
				+"Bal_61_90                = '"+POut.Double(patient.Bal_61_90)+"', "
				+"BalOver90                = '"+POut.Double(patient.BalOver90)+"', "
				+"InsEst                   = '"+POut.Double(patient.InsEst)+"', "
				+"BalTotal                 = '"+POut.Double(patient.BalTotal)+"', "
				+"EmployerNum              =  "+POut.Long  (patient.EmployerNum)+", "
				+"EmploymentNote           = '"+POut.String(patient.EmploymentNote)+"', "
				+"County                   = '"+POut.String(patient.County)+"', "
				+"GradeLevel               =  "+POut.Int   ((int)patient.GradeLevel)+", "
				+"Urgency                  =  "+POut.Int   ((int)patient.Urgency)+", "
				+"DateFirstVisit           =  "+POut.Date  (patient.DateFirstVisit)+", "
				+"ClinicNum                =  "+POut.Long  (patient.ClinicNum)+", "
				+"HasIns                   = '"+POut.String(patient.HasIns)+"', "
				+"TrophyFolder             = '"+POut.String(patient.TrophyFolder)+"', "
				+"PlannedIsDone            =  "+POut.Bool  (patient.PlannedIsDone)+", "
				+"Premed                   =  "+POut.Bool  (patient.Premed)+", "
				+"Ward                     = '"+POut.String(patient.Ward)+"', "
				+"PreferConfirmMethod      =  "+POut.Int   ((int)patient.PreferConfirmMethod)+", "
				+"PreferContactMethod      =  "+POut.Int   ((int)patient.PreferContactMethod)+", "
				+"PreferRecallMethod       =  "+POut.Int   ((int)patient.PreferRecallMethod)+", "
				+"SchedBeforeTime          =  "+POut.Time  (patient.SchedBeforeTime)+", "
				+"SchedAfterTime           =  "+POut.Time  (patient.SchedAfterTime)+", "
				+"SchedDayOfWeek           =  "+POut.Byte  (patient.SchedDayOfWeek)+", "
				+"Language                 = '"+POut.String(patient.Language)+"', "
				+"AdmitDate                =  "+POut.Date  (patient.AdmitDate)+", "
				+"Title                    = '"+POut.String(patient.Title)+"', "
				+"PayPlanDue               = '"+POut.Double(patient.PayPlanDue)+"', "
				+"SiteNum                  =  "+POut.Long  (patient.SiteNum)+", "
				//DateTStamp can only be set by MySQL
				+"ResponsParty             =  "+POut.Long  (patient.ResponsParty)+", "
				+"CanadianEligibilityCode  =  "+POut.Byte  (patient.CanadianEligibilityCode)+", "
				+"AskToArriveEarly         =  "+POut.Int   (patient.AskToArriveEarly)+", "
				+"PreferContactConfidential=  "+POut.Int   ((int)patient.PreferContactConfidential)+", "
				+"SuperFamily              =  "+POut.Long  (patient.SuperFamily)+", "
				+"TxtMsgOk                 =  "+POut.Int   ((int)patient.TxtMsgOk)+", "
				+"SmokingSnoMed            = '"+POut.String(patient.SmokingSnoMed)+"', "
				+"Country                  = '"+POut.String(patient.Country)+"', "
				+"DateTimeDeceased         =  "+POut.DateT (patient.DateTimeDeceased)+", "
				+"BillingCycleDay          =  "+POut.Int   (patient.BillingCycleDay)+", "
				//SecUserNumEntry excluded from update
				//SecDateEntry not allowed to change
				+"HasSuperBilling          =  "+POut.Bool  (patient.HasSuperBilling)+", "
				+"PatNumCloneFrom          =  "+POut.Long  (patient.PatNumCloneFrom)+", "
				+"DiscountPlanNum          =  "+POut.Long  (patient.DiscountPlanNum)+" "
				+"WHERE PatNum = "+POut.Long(patient.PatNum);
			if(patient.AddrNote==null) {
				patient.AddrNote="";
			}
			OdSqlParameter paramAddrNote=new OdSqlParameter("paramAddrNote",OdDbType.Text,POut.StringNote(patient.AddrNote));
			if(patient.FamFinUrgNote==null) {
				patient.FamFinUrgNote="";
			}
			OdSqlParameter paramFamFinUrgNote=new OdSqlParameter("paramFamFinUrgNote",OdDbType.Text,POut.StringNote(patient.FamFinUrgNote));
			Db.NonQ(command,paramAddrNote,paramFamFinUrgNote);
		}

		///<summary>Updates one Patient in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(Patient patient,Patient oldPatient){
			string command="";
			if(patient.LName != oldPatient.LName) {
				if(command!=""){ command+=",";}
				command+="LName = '"+POut.String(patient.LName)+"'";
			}
			if(patient.FName != oldPatient.FName) {
				if(command!=""){ command+=",";}
				command+="FName = '"+POut.String(patient.FName)+"'";
			}
			if(patient.MiddleI != oldPatient.MiddleI) {
				if(command!=""){ command+=",";}
				command+="MiddleI = '"+POut.String(patient.MiddleI)+"'";
			}
			if(patient.Preferred != oldPatient.Preferred) {
				if(command!=""){ command+=",";}
				command+="Preferred = '"+POut.String(patient.Preferred)+"'";
			}
			if(patient.PatStatus != oldPatient.PatStatus) {
				if(command!=""){ command+=",";}
				command+="PatStatus = "+POut.Int   ((int)patient.PatStatus)+"";
			}
			if(patient.Gender != oldPatient.Gender) {
				if(command!=""){ command+=",";}
				command+="Gender = "+POut.Int   ((int)patient.Gender)+"";
			}
			if(patient.Position != oldPatient.Position) {
				if(command!=""){ command+=",";}
				command+="Position = "+POut.Int   ((int)patient.Position)+"";
			}
			if(patient.Birthdate.Date != oldPatient.Birthdate.Date) {
				if(command!=""){ command+=",";}
				command+="Birthdate = "+POut.Date(patient.Birthdate)+"";
			}
			if(patient.SSN != oldPatient.SSN) {
				if(command!=""){ command+=",";}
				command+="SSN = '"+POut.String(patient.SSN)+"'";
			}
			if(patient.Address != oldPatient.Address) {
				if(command!=""){ command+=",";}
				command+="Address = '"+POut.StringNote(patient.Address,true)+"'";
			}
			if(patient.Address2 != oldPatient.Address2) {
				if(command!=""){ command+=",";}
				command+="Address2 = '"+POut.StringNote(patient.Address2,true)+"'";
			}
			if(patient.City != oldPatient.City) {
				if(command!=""){ command+=",";}
				command+="City = '"+POut.String(patient.City)+"'";
			}
			if(patient.State != oldPatient.State) {
				if(command!=""){ command+=",";}
				command+="State = '"+POut.String(patient.State)+"'";
			}
			if(patient.Zip != oldPatient.Zip) {
				if(command!=""){ command+=",";}
				command+="Zip = '"+POut.String(patient.Zip)+"'";
			}
			if(patient.HmPhone != oldPatient.HmPhone) {
				if(command!=""){ command+=",";}
				command+="HmPhone = '"+POut.String(patient.HmPhone)+"'";
			}
			if(patient.WkPhone != oldPatient.WkPhone) {
				if(command!=""){ command+=",";}
				command+="WkPhone = '"+POut.String(patient.WkPhone)+"'";
			}
			if(patient.WirelessPhone != oldPatient.WirelessPhone) {
				if(command!=""){ command+=",";}
				command+="WirelessPhone = '"+POut.String(patient.WirelessPhone)+"'";
			}
			if(patient.Guarantor != oldPatient.Guarantor) {
				if(command!=""){ command+=",";}
				command+="Guarantor = "+POut.Long(patient.Guarantor)+"";
			}
			if(patient.CreditType != oldPatient.CreditType) {
				if(command!=""){ command+=",";}
				command+="CreditType = '"+POut.String(patient.CreditType)+"'";
			}
			if(patient.Email != oldPatient.Email) {
				if(command!=""){ command+=",";}
				command+="Email = '"+POut.String(patient.Email)+"'";
			}
			if(patient.Salutation != oldPatient.Salutation) {
				if(command!=""){ command+=",";}
				command+="Salutation = '"+POut.String(patient.Salutation)+"'";
			}
			if(patient.EstBalance != oldPatient.EstBalance) {
				if(command!=""){ command+=",";}
				command+="EstBalance = '"+POut.Double(patient.EstBalance)+"'";
			}
			if(patient.PriProv != oldPatient.PriProv) {
				if(command!=""){ command+=",";}
				command+="PriProv = "+POut.Long(patient.PriProv)+"";
			}
			if(patient.SecProv != oldPatient.SecProv) {
				if(command!=""){ command+=",";}
				command+="SecProv = "+POut.Long(patient.SecProv)+"";
			}
			if(patient.FeeSched != oldPatient.FeeSched) {
				if(command!=""){ command+=",";}
				command+="FeeSched = "+POut.Long(patient.FeeSched)+"";
			}
			if(patient.BillingType != oldPatient.BillingType) {
				if(command!=""){ command+=",";}
				command+="BillingType = "+POut.Long(patient.BillingType)+"";
			}
			if(patient.ImageFolder != oldPatient.ImageFolder) {
				if(command!=""){ command+=",";}
				command+="ImageFolder = '"+POut.String(patient.ImageFolder)+"'";
			}
			if(patient.AddrNote != oldPatient.AddrNote) {
				if(command!=""){ command+=",";}
				command+="AddrNote = "+DbHelper.ParamChar+"paramAddrNote";
			}
			if(patient.FamFinUrgNote != oldPatient.FamFinUrgNote) {
				if(command!=""){ command+=",";}
				command+="FamFinUrgNote = "+DbHelper.ParamChar+"paramFamFinUrgNote";
			}
			if(patient.MedUrgNote != oldPatient.MedUrgNote) {
				if(command!=""){ command+=",";}
				command+="MedUrgNote = '"+POut.StringNote(patient.MedUrgNote,true)+"'";
			}
			if(patient.ApptModNote != oldPatient.ApptModNote) {
				if(command!=""){ command+=",";}
				command+="ApptModNote = '"+POut.String(patient.ApptModNote)+"'";
			}
			if(patient.StudentStatus != oldPatient.StudentStatus) {
				if(command!=""){ command+=",";}
				command+="StudentStatus = '"+POut.String(patient.StudentStatus)+"'";
			}
			if(patient.SchoolName != oldPatient.SchoolName) {
				if(command!=""){ command+=",";}
				command+="SchoolName = '"+POut.String(patient.SchoolName)+"'";
			}
			if(patient.ChartNumber != oldPatient.ChartNumber) {
				if(command!=""){ command+=",";}
				command+="ChartNumber = '"+POut.String(patient.ChartNumber)+"'";
			}
			if(patient.MedicaidID != oldPatient.MedicaidID) {
				if(command!=""){ command+=",";}
				command+="MedicaidID = '"+POut.String(patient.MedicaidID)+"'";
			}
			if(patient.Bal_0_30 != oldPatient.Bal_0_30) {
				if(command!=""){ command+=",";}
				command+="Bal_0_30 = '"+POut.Double(patient.Bal_0_30)+"'";
			}
			if(patient.Bal_31_60 != oldPatient.Bal_31_60) {
				if(command!=""){ command+=",";}
				command+="Bal_31_60 = '"+POut.Double(patient.Bal_31_60)+"'";
			}
			if(patient.Bal_61_90 != oldPatient.Bal_61_90) {
				if(command!=""){ command+=",";}
				command+="Bal_61_90 = '"+POut.Double(patient.Bal_61_90)+"'";
			}
			if(patient.BalOver90 != oldPatient.BalOver90) {
				if(command!=""){ command+=",";}
				command+="BalOver90 = '"+POut.Double(patient.BalOver90)+"'";
			}
			if(patient.InsEst != oldPatient.InsEst) {
				if(command!=""){ command+=",";}
				command+="InsEst = '"+POut.Double(patient.InsEst)+"'";
			}
			if(patient.BalTotal != oldPatient.BalTotal) {
				if(command!=""){ command+=",";}
				command+="BalTotal = '"+POut.Double(patient.BalTotal)+"'";
			}
			if(patient.EmployerNum != oldPatient.EmployerNum) {
				if(command!=""){ command+=",";}
				command+="EmployerNum = "+POut.Long(patient.EmployerNum)+"";
			}
			if(patient.EmploymentNote != oldPatient.EmploymentNote) {
				if(command!=""){ command+=",";}
				command+="EmploymentNote = '"+POut.String(patient.EmploymentNote)+"'";
			}
			if(patient.County != oldPatient.County) {
				if(command!=""){ command+=",";}
				command+="County = '"+POut.String(patient.County)+"'";
			}
			if(patient.GradeLevel != oldPatient.GradeLevel) {
				if(command!=""){ command+=",";}
				command+="GradeLevel = "+POut.Int   ((int)patient.GradeLevel)+"";
			}
			if(patient.Urgency != oldPatient.Urgency) {
				if(command!=""){ command+=",";}
				command+="Urgency = "+POut.Int   ((int)patient.Urgency)+"";
			}
			if(patient.DateFirstVisit.Date != oldPatient.DateFirstVisit.Date) {
				if(command!=""){ command+=",";}
				command+="DateFirstVisit = "+POut.Date(patient.DateFirstVisit)+"";
			}
			if(patient.ClinicNum != oldPatient.ClinicNum) {
				if(command!=""){ command+=",";}
				command+="ClinicNum = "+POut.Long(patient.ClinicNum)+"";
			}
			if(patient.HasIns != oldPatient.HasIns) {
				if(command!=""){ command+=",";}
				command+="HasIns = '"+POut.String(patient.HasIns)+"'";
			}
			if(patient.TrophyFolder != oldPatient.TrophyFolder) {
				if(command!=""){ command+=",";}
				command+="TrophyFolder = '"+POut.String(patient.TrophyFolder)+"'";
			}
			if(patient.PlannedIsDone != oldPatient.PlannedIsDone) {
				if(command!=""){ command+=",";}
				command+="PlannedIsDone = "+POut.Bool(patient.PlannedIsDone)+"";
			}
			if(patient.Premed != oldPatient.Premed) {
				if(command!=""){ command+=",";}
				command+="Premed = "+POut.Bool(patient.Premed)+"";
			}
			if(patient.Ward != oldPatient.Ward) {
				if(command!=""){ command+=",";}
				command+="Ward = '"+POut.String(patient.Ward)+"'";
			}
			if(patient.PreferConfirmMethod != oldPatient.PreferConfirmMethod) {
				if(command!=""){ command+=",";}
				command+="PreferConfirmMethod = "+POut.Int   ((int)patient.PreferConfirmMethod)+"";
			}
			if(patient.PreferContactMethod != oldPatient.PreferContactMethod) {
				if(command!=""){ command+=",";}
				command+="PreferContactMethod = "+POut.Int   ((int)patient.PreferContactMethod)+"";
			}
			if(patient.PreferRecallMethod != oldPatient.PreferRecallMethod) {
				if(command!=""){ command+=",";}
				command+="PreferRecallMethod = "+POut.Int   ((int)patient.PreferRecallMethod)+"";
			}
			if(patient.SchedBeforeTime != oldPatient.SchedBeforeTime) {
				if(command!=""){ command+=",";}
				command+="SchedBeforeTime = "+POut.Time  (patient.SchedBeforeTime)+"";
			}
			if(patient.SchedAfterTime != oldPatient.SchedAfterTime) {
				if(command!=""){ command+=",";}
				command+="SchedAfterTime = "+POut.Time  (patient.SchedAfterTime)+"";
			}
			if(patient.SchedDayOfWeek != oldPatient.SchedDayOfWeek) {
				if(command!=""){ command+=",";}
				command+="SchedDayOfWeek = "+POut.Byte(patient.SchedDayOfWeek)+"";
			}
			if(patient.Language != oldPatient.Language) {
				if(command!=""){ command+=",";}
				command+="Language = '"+POut.String(patient.Language)+"'";
			}
			if(patient.AdmitDate.Date != oldPatient.AdmitDate.Date) {
				if(command!=""){ command+=",";}
				command+="AdmitDate = "+POut.Date(patient.AdmitDate)+"";
			}
			if(patient.Title != oldPatient.Title) {
				if(command!=""){ command+=",";}
				command+="Title = '"+POut.String(patient.Title)+"'";
			}
			if(patient.PayPlanDue != oldPatient.PayPlanDue) {
				if(command!=""){ command+=",";}
				command+="PayPlanDue = '"+POut.Double(patient.PayPlanDue)+"'";
			}
			if(patient.SiteNum != oldPatient.SiteNum) {
				if(command!=""){ command+=",";}
				command+="SiteNum = "+POut.Long(patient.SiteNum)+"";
			}
			//DateTStamp can only be set by MySQL
			if(patient.ResponsParty != oldPatient.ResponsParty) {
				if(command!=""){ command+=",";}
				command+="ResponsParty = "+POut.Long(patient.ResponsParty)+"";
			}
			if(patient.CanadianEligibilityCode != oldPatient.CanadianEligibilityCode) {
				if(command!=""){ command+=",";}
				command+="CanadianEligibilityCode = "+POut.Byte(patient.CanadianEligibilityCode)+"";
			}
			if(patient.AskToArriveEarly != oldPatient.AskToArriveEarly) {
				if(command!=""){ command+=",";}
				command+="AskToArriveEarly = "+POut.Int(patient.AskToArriveEarly)+"";
			}
			if(patient.PreferContactConfidential != oldPatient.PreferContactConfidential) {
				if(command!=""){ command+=",";}
				command+="PreferContactConfidential = "+POut.Int   ((int)patient.PreferContactConfidential)+"";
			}
			if(patient.SuperFamily != oldPatient.SuperFamily) {
				if(command!=""){ command+=",";}
				command+="SuperFamily = "+POut.Long(patient.SuperFamily)+"";
			}
			if(patient.TxtMsgOk != oldPatient.TxtMsgOk) {
				if(command!=""){ command+=",";}
				command+="TxtMsgOk = "+POut.Int   ((int)patient.TxtMsgOk)+"";
			}
			if(patient.SmokingSnoMed != oldPatient.SmokingSnoMed) {
				if(command!=""){ command+=",";}
				command+="SmokingSnoMed = '"+POut.String(patient.SmokingSnoMed)+"'";
			}
			if(patient.Country != oldPatient.Country) {
				if(command!=""){ command+=",";}
				command+="Country = '"+POut.String(patient.Country)+"'";
			}
			if(patient.DateTimeDeceased != oldPatient.DateTimeDeceased) {
				if(command!=""){ command+=",";}
				command+="DateTimeDeceased = "+POut.DateT(patient.DateTimeDeceased)+"";
			}
			if(patient.BillingCycleDay != oldPatient.BillingCycleDay) {
				if(command!=""){ command+=",";}
				command+="BillingCycleDay = "+POut.Int(patient.BillingCycleDay)+"";
			}
			//SecUserNumEntry excluded from update
			//SecDateEntry not allowed to change
			if(patient.HasSuperBilling != oldPatient.HasSuperBilling) {
				if(command!=""){ command+=",";}
				command+="HasSuperBilling = "+POut.Bool(patient.HasSuperBilling)+"";
			}
			if(patient.PatNumCloneFrom != oldPatient.PatNumCloneFrom) {
				if(command!=""){ command+=",";}
				command+="PatNumCloneFrom = "+POut.Long(patient.PatNumCloneFrom)+"";
			}
			if(patient.DiscountPlanNum != oldPatient.DiscountPlanNum) {
				if(command!=""){ command+=",";}
				command+="DiscountPlanNum = "+POut.Long(patient.DiscountPlanNum)+"";
			}
			if(command==""){
				return false;
			}
			if(patient.AddrNote==null) {
				patient.AddrNote="";
			}
			OdSqlParameter paramAddrNote=new OdSqlParameter("paramAddrNote",OdDbType.Text,POut.StringNote(patient.AddrNote));
			if(patient.FamFinUrgNote==null) {
				patient.FamFinUrgNote="";
			}
			OdSqlParameter paramFamFinUrgNote=new OdSqlParameter("paramFamFinUrgNote",OdDbType.Text,POut.StringNote(patient.FamFinUrgNote));
			command="UPDATE patient SET "+command
				+" WHERE PatNum = "+POut.Long(patient.PatNum);
			Db.NonQ(command,paramAddrNote,paramFamFinUrgNote);
			return true;
		}

		///<summary>Returns true if Update(Patient,Patient) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(Patient patient,Patient oldPatient) {
			if(patient.LName != oldPatient.LName) {
				return true;
			}
			if(patient.FName != oldPatient.FName) {
				return true;
			}
			if(patient.MiddleI != oldPatient.MiddleI) {
				return true;
			}
			if(patient.Preferred != oldPatient.Preferred) {
				return true;
			}
			if(patient.PatStatus != oldPatient.PatStatus) {
				return true;
			}
			if(patient.Gender != oldPatient.Gender) {
				return true;
			}
			if(patient.Position != oldPatient.Position) {
				return true;
			}
			if(patient.Birthdate.Date != oldPatient.Birthdate.Date) {
				return true;
			}
			if(patient.SSN != oldPatient.SSN) {
				return true;
			}
			if(patient.Address != oldPatient.Address) {
				return true;
			}
			if(patient.Address2 != oldPatient.Address2) {
				return true;
			}
			if(patient.City != oldPatient.City) {
				return true;
			}
			if(patient.State != oldPatient.State) {
				return true;
			}
			if(patient.Zip != oldPatient.Zip) {
				return true;
			}
			if(patient.HmPhone != oldPatient.HmPhone) {
				return true;
			}
			if(patient.WkPhone != oldPatient.WkPhone) {
				return true;
			}
			if(patient.WirelessPhone != oldPatient.WirelessPhone) {
				return true;
			}
			if(patient.Guarantor != oldPatient.Guarantor) {
				return true;
			}
			if(patient.CreditType != oldPatient.CreditType) {
				return true;
			}
			if(patient.Email != oldPatient.Email) {
				return true;
			}
			if(patient.Salutation != oldPatient.Salutation) {
				return true;
			}
			if(patient.EstBalance != oldPatient.EstBalance) {
				return true;
			}
			if(patient.PriProv != oldPatient.PriProv) {
				return true;
			}
			if(patient.SecProv != oldPatient.SecProv) {
				return true;
			}
			if(patient.FeeSched != oldPatient.FeeSched) {
				return true;
			}
			if(patient.BillingType != oldPatient.BillingType) {
				return true;
			}
			if(patient.ImageFolder != oldPatient.ImageFolder) {
				return true;
			}
			if(patient.AddrNote != oldPatient.AddrNote) {
				return true;
			}
			if(patient.FamFinUrgNote != oldPatient.FamFinUrgNote) {
				return true;
			}
			if(patient.MedUrgNote != oldPatient.MedUrgNote) {
				return true;
			}
			if(patient.ApptModNote != oldPatient.ApptModNote) {
				return true;
			}
			if(patient.StudentStatus != oldPatient.StudentStatus) {
				return true;
			}
			if(patient.SchoolName != oldPatient.SchoolName) {
				return true;
			}
			if(patient.ChartNumber != oldPatient.ChartNumber) {
				return true;
			}
			if(patient.MedicaidID != oldPatient.MedicaidID) {
				return true;
			}
			if(patient.Bal_0_30 != oldPatient.Bal_0_30) {
				return true;
			}
			if(patient.Bal_31_60 != oldPatient.Bal_31_60) {
				return true;
			}
			if(patient.Bal_61_90 != oldPatient.Bal_61_90) {
				return true;
			}
			if(patient.BalOver90 != oldPatient.BalOver90) {
				return true;
			}
			if(patient.InsEst != oldPatient.InsEst) {
				return true;
			}
			if(patient.BalTotal != oldPatient.BalTotal) {
				return true;
			}
			if(patient.EmployerNum != oldPatient.EmployerNum) {
				return true;
			}
			if(patient.EmploymentNote != oldPatient.EmploymentNote) {
				return true;
			}
			if(patient.County != oldPatient.County) {
				return true;
			}
			if(patient.GradeLevel != oldPatient.GradeLevel) {
				return true;
			}
			if(patient.Urgency != oldPatient.Urgency) {
				return true;
			}
			if(patient.DateFirstVisit.Date != oldPatient.DateFirstVisit.Date) {
				return true;
			}
			if(patient.ClinicNum != oldPatient.ClinicNum) {
				return true;
			}
			if(patient.HasIns != oldPatient.HasIns) {
				return true;
			}
			if(patient.TrophyFolder != oldPatient.TrophyFolder) {
				return true;
			}
			if(patient.PlannedIsDone != oldPatient.PlannedIsDone) {
				return true;
			}
			if(patient.Premed != oldPatient.Premed) {
				return true;
			}
			if(patient.Ward != oldPatient.Ward) {
				return true;
			}
			if(patient.PreferConfirmMethod != oldPatient.PreferConfirmMethod) {
				return true;
			}
			if(patient.PreferContactMethod != oldPatient.PreferContactMethod) {
				return true;
			}
			if(patient.PreferRecallMethod != oldPatient.PreferRecallMethod) {
				return true;
			}
			if(patient.SchedBeforeTime != oldPatient.SchedBeforeTime) {
				return true;
			}
			if(patient.SchedAfterTime != oldPatient.SchedAfterTime) {
				return true;
			}
			if(patient.SchedDayOfWeek != oldPatient.SchedDayOfWeek) {
				return true;
			}
			if(patient.Language != oldPatient.Language) {
				return true;
			}
			if(patient.AdmitDate.Date != oldPatient.AdmitDate.Date) {
				return true;
			}
			if(patient.Title != oldPatient.Title) {
				return true;
			}
			if(patient.PayPlanDue != oldPatient.PayPlanDue) {
				return true;
			}
			if(patient.SiteNum != oldPatient.SiteNum) {
				return true;
			}
			//DateTStamp can only be set by MySQL
			if(patient.ResponsParty != oldPatient.ResponsParty) {
				return true;
			}
			if(patient.CanadianEligibilityCode != oldPatient.CanadianEligibilityCode) {
				return true;
			}
			if(patient.AskToArriveEarly != oldPatient.AskToArriveEarly) {
				return true;
			}
			if(patient.PreferContactConfidential != oldPatient.PreferContactConfidential) {
				return true;
			}
			if(patient.SuperFamily != oldPatient.SuperFamily) {
				return true;
			}
			if(patient.TxtMsgOk != oldPatient.TxtMsgOk) {
				return true;
			}
			if(patient.SmokingSnoMed != oldPatient.SmokingSnoMed) {
				return true;
			}
			if(patient.Country != oldPatient.Country) {
				return true;
			}
			if(patient.DateTimeDeceased != oldPatient.DateTimeDeceased) {
				return true;
			}
			if(patient.BillingCycleDay != oldPatient.BillingCycleDay) {
				return true;
			}
			//SecUserNumEntry excluded from update
			//SecDateEntry not allowed to change
			if(patient.HasSuperBilling != oldPatient.HasSuperBilling) {
				return true;
			}
			if(patient.PatNumCloneFrom != oldPatient.PatNumCloneFrom) {
				return true;
			}
			if(patient.DiscountPlanNum != oldPatient.DiscountPlanNum) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one Patient from the database.</summary>
		public static void Delete(long patNum){
			ClearFkey(patNum);
			string command="DELETE FROM patient "
				+"WHERE PatNum = "+POut.Long(patNum);
			Db.NonQ(command);
		}

		///<summary>Zeros securitylog FKey column for rows that are using the matching patNum as FKey and are related to Patient.
		///Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Patient table type.</summary>
		public static void ClearFkey(long patNum) {
			if(patNum==0) {
				return;
			}
			string command="UPDATE securitylog SET FKey=0 WHERE FKey="+POut.Long(patNum)+" AND PermType IN (75)";
			Db.NonQ(command);
		}

		///<summary>Zeros securitylog FKey column for rows that are using the matching patNums as FKey and are related to Patient.
		///Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Patient table type.</summary>
		public static void ClearFkey(List<long> listPatNums) {
			if(listPatNums==null || listPatNums.FindAll(x => x != 0).Count==0) {
				return;
			}
			string command="UPDATE securitylog SET FKey=0 WHERE FKey IN("+String.Join(",",listPatNums.FindAll(x => x != 0))+") AND PermType IN (75)";
			Db.NonQ(command);
		}

	}
}