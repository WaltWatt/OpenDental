//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class WikiListHistCrud {
		///<summary>Gets one WikiListHist object from the database using the primary key.  Returns null if not found.</summary>
		public static WikiListHist SelectOne(long wikiListHistNum){
			string command="SELECT * FROM wikilisthist "
				+"WHERE WikiListHistNum = "+POut.Long(wikiListHistNum);
			List<WikiListHist> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one WikiListHist object from the database using a query.</summary>
		public static WikiListHist SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<WikiListHist> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of WikiListHist objects from the database using a query.</summary>
		public static List<WikiListHist> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<WikiListHist> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<WikiListHist> TableToList(DataTable table){
			List<WikiListHist> retVal=new List<WikiListHist>();
			WikiListHist wikiListHist;
			foreach(DataRow row in table.Rows) {
				wikiListHist=new WikiListHist();
				wikiListHist.WikiListHistNum= PIn.Long  (row["WikiListHistNum"].ToString());
				wikiListHist.UserNum        = PIn.Long  (row["UserNum"].ToString());
				wikiListHist.ListName       = PIn.String(row["ListName"].ToString());
				wikiListHist.ListHeaders    = PIn.String(row["ListHeaders"].ToString());
				wikiListHist.ListContent    = PIn.String(row["ListContent"].ToString());
				wikiListHist.DateTimeSaved  = PIn.DateT (row["DateTimeSaved"].ToString());
				retVal.Add(wikiListHist);
			}
			return retVal;
		}

		///<summary>Converts a list of WikiListHist into a DataTable.</summary>
		public static DataTable ListToTable(List<WikiListHist> listWikiListHists,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="WikiListHist";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("WikiListHistNum");
			table.Columns.Add("UserNum");
			table.Columns.Add("ListName");
			table.Columns.Add("ListHeaders");
			table.Columns.Add("ListContent");
			table.Columns.Add("DateTimeSaved");
			foreach(WikiListHist wikiListHist in listWikiListHists) {
				table.Rows.Add(new object[] {
					POut.Long  (wikiListHist.WikiListHistNum),
					POut.Long  (wikiListHist.UserNum),
					            wikiListHist.ListName,
					            wikiListHist.ListHeaders,
					            wikiListHist.ListContent,
					POut.DateT (wikiListHist.DateTimeSaved,false),
				});
			}
			return table;
		}

		///<summary>Inserts one WikiListHist into the database.  Returns the new priKey.</summary>
		public static long Insert(WikiListHist wikiListHist){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				wikiListHist.WikiListHistNum=DbHelper.GetNextOracleKey("wikilisthist","WikiListHistNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(wikiListHist,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							wikiListHist.WikiListHistNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(wikiListHist,false);
			}
		}

		///<summary>Inserts one WikiListHist into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(WikiListHist wikiListHist,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				wikiListHist.WikiListHistNum=ReplicationServers.GetKey("wikilisthist","WikiListHistNum");
			}
			string command="INSERT INTO wikilisthist (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="WikiListHistNum,";
			}
			command+="UserNum,ListName,ListHeaders,ListContent,DateTimeSaved) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(wikiListHist.WikiListHistNum)+",";
			}
			command+=
				     POut.Long  (wikiListHist.UserNum)+","
				+"'"+POut.String(wikiListHist.ListName)+"',"
				+    DbHelper.ParamChar+"paramListHeaders,"
				+    DbHelper.ParamChar+"paramListContent,"
				+    POut.DateT (wikiListHist.DateTimeSaved)+")";
			if(wikiListHist.ListHeaders==null) {
				wikiListHist.ListHeaders="";
			}
			OdSqlParameter paramListHeaders=new OdSqlParameter("paramListHeaders",OdDbType.Text,POut.StringParam(wikiListHist.ListHeaders));
			if(wikiListHist.ListContent==null) {
				wikiListHist.ListContent="";
			}
			OdSqlParameter paramListContent=new OdSqlParameter("paramListContent",OdDbType.Text,POut.StringParam(wikiListHist.ListContent));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramListHeaders,paramListContent);
			}
			else {
				wikiListHist.WikiListHistNum=Db.NonQ(command,true,"WikiListHistNum","wikiListHist",paramListHeaders,paramListContent);
			}
			return wikiListHist.WikiListHistNum;
		}

		///<summary>Inserts one WikiListHist into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(WikiListHist wikiListHist){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(wikiListHist,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					wikiListHist.WikiListHistNum=DbHelper.GetNextOracleKey("wikilisthist","WikiListHistNum"); //Cacheless method
				}
				return InsertNoCache(wikiListHist,true);
			}
		}

		///<summary>Inserts one WikiListHist into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(WikiListHist wikiListHist,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO wikilisthist (";
			if(!useExistingPK && isRandomKeys) {
				wikiListHist.WikiListHistNum=ReplicationServers.GetKeyNoCache("wikilisthist","WikiListHistNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="WikiListHistNum,";
			}
			command+="UserNum,ListName,ListHeaders,ListContent,DateTimeSaved) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(wikiListHist.WikiListHistNum)+",";
			}
			command+=
				     POut.Long  (wikiListHist.UserNum)+","
				+"'"+POut.String(wikiListHist.ListName)+"',"
				+    DbHelper.ParamChar+"paramListHeaders,"
				+    DbHelper.ParamChar+"paramListContent,"
				+    POut.DateT (wikiListHist.DateTimeSaved)+")";
			if(wikiListHist.ListHeaders==null) {
				wikiListHist.ListHeaders="";
			}
			OdSqlParameter paramListHeaders=new OdSqlParameter("paramListHeaders",OdDbType.Text,POut.StringParam(wikiListHist.ListHeaders));
			if(wikiListHist.ListContent==null) {
				wikiListHist.ListContent="";
			}
			OdSqlParameter paramListContent=new OdSqlParameter("paramListContent",OdDbType.Text,POut.StringParam(wikiListHist.ListContent));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramListHeaders,paramListContent);
			}
			else {
				wikiListHist.WikiListHistNum=Db.NonQ(command,true,"WikiListHistNum","wikiListHist",paramListHeaders,paramListContent);
			}
			return wikiListHist.WikiListHistNum;
		}

		///<summary>Updates one WikiListHist in the database.</summary>
		public static void Update(WikiListHist wikiListHist){
			string command="UPDATE wikilisthist SET "
				+"UserNum        =  "+POut.Long  (wikiListHist.UserNum)+", "
				+"ListName       = '"+POut.String(wikiListHist.ListName)+"', "
				+"ListHeaders    =  "+DbHelper.ParamChar+"paramListHeaders, "
				+"ListContent    =  "+DbHelper.ParamChar+"paramListContent, "
				+"DateTimeSaved  =  "+POut.DateT (wikiListHist.DateTimeSaved)+" "
				+"WHERE WikiListHistNum = "+POut.Long(wikiListHist.WikiListHistNum);
			if(wikiListHist.ListHeaders==null) {
				wikiListHist.ListHeaders="";
			}
			OdSqlParameter paramListHeaders=new OdSqlParameter("paramListHeaders",OdDbType.Text,POut.StringParam(wikiListHist.ListHeaders));
			if(wikiListHist.ListContent==null) {
				wikiListHist.ListContent="";
			}
			OdSqlParameter paramListContent=new OdSqlParameter("paramListContent",OdDbType.Text,POut.StringParam(wikiListHist.ListContent));
			Db.NonQ(command,paramListHeaders,paramListContent);
		}

		///<summary>Updates one WikiListHist in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(WikiListHist wikiListHist,WikiListHist oldWikiListHist){
			string command="";
			if(wikiListHist.UserNum != oldWikiListHist.UserNum) {
				if(command!=""){ command+=",";}
				command+="UserNum = "+POut.Long(wikiListHist.UserNum)+"";
			}
			if(wikiListHist.ListName != oldWikiListHist.ListName) {
				if(command!=""){ command+=",";}
				command+="ListName = '"+POut.String(wikiListHist.ListName)+"'";
			}
			if(wikiListHist.ListHeaders != oldWikiListHist.ListHeaders) {
				if(command!=""){ command+=",";}
				command+="ListHeaders = "+DbHelper.ParamChar+"paramListHeaders";
			}
			if(wikiListHist.ListContent != oldWikiListHist.ListContent) {
				if(command!=""){ command+=",";}
				command+="ListContent = "+DbHelper.ParamChar+"paramListContent";
			}
			if(wikiListHist.DateTimeSaved != oldWikiListHist.DateTimeSaved) {
				if(command!=""){ command+=",";}
				command+="DateTimeSaved = "+POut.DateT(wikiListHist.DateTimeSaved)+"";
			}
			if(command==""){
				return false;
			}
			if(wikiListHist.ListHeaders==null) {
				wikiListHist.ListHeaders="";
			}
			OdSqlParameter paramListHeaders=new OdSqlParameter("paramListHeaders",OdDbType.Text,POut.StringParam(wikiListHist.ListHeaders));
			if(wikiListHist.ListContent==null) {
				wikiListHist.ListContent="";
			}
			OdSqlParameter paramListContent=new OdSqlParameter("paramListContent",OdDbType.Text,POut.StringParam(wikiListHist.ListContent));
			command="UPDATE wikilisthist SET "+command
				+" WHERE WikiListHistNum = "+POut.Long(wikiListHist.WikiListHistNum);
			Db.NonQ(command,paramListHeaders,paramListContent);
			return true;
		}

		///<summary>Returns true if Update(WikiListHist,WikiListHist) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(WikiListHist wikiListHist,WikiListHist oldWikiListHist) {
			if(wikiListHist.UserNum != oldWikiListHist.UserNum) {
				return true;
			}
			if(wikiListHist.ListName != oldWikiListHist.ListName) {
				return true;
			}
			if(wikiListHist.ListHeaders != oldWikiListHist.ListHeaders) {
				return true;
			}
			if(wikiListHist.ListContent != oldWikiListHist.ListContent) {
				return true;
			}
			if(wikiListHist.DateTimeSaved != oldWikiListHist.DateTimeSaved) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one WikiListHist from the database.</summary>
		public static void Delete(long wikiListHistNum){
			string command="DELETE FROM wikilisthist "
				+"WHERE WikiListHistNum = "+POut.Long(wikiListHistNum);
			Db.NonQ(command);
		}

	}
}