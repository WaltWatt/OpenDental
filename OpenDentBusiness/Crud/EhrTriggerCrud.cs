//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class EhrTriggerCrud {
		///<summary>Gets one EhrTrigger object from the database using the primary key.  Returns null if not found.</summary>
		public static EhrTrigger SelectOne(long ehrTriggerNum){
			string command="SELECT * FROM ehrtrigger "
				+"WHERE EhrTriggerNum = "+POut.Long(ehrTriggerNum);
			List<EhrTrigger> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one EhrTrigger object from the database using a query.</summary>
		public static EhrTrigger SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EhrTrigger> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of EhrTrigger objects from the database using a query.</summary>
		public static List<EhrTrigger> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EhrTrigger> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<EhrTrigger> TableToList(DataTable table){
			List<EhrTrigger> retVal=new List<EhrTrigger>();
			EhrTrigger ehrTrigger;
			foreach(DataRow row in table.Rows) {
				ehrTrigger=new EhrTrigger();
				ehrTrigger.EhrTriggerNum    = PIn.Long  (row["EhrTriggerNum"].ToString());
				ehrTrigger.Description      = PIn.String(row["Description"].ToString());
				ehrTrigger.ProblemSnomedList= PIn.String(row["ProblemSnomedList"].ToString());
				ehrTrigger.ProblemIcd9List  = PIn.String(row["ProblemIcd9List"].ToString());
				ehrTrigger.ProblemIcd10List = PIn.String(row["ProblemIcd10List"].ToString());
				ehrTrigger.ProblemDefNumList= PIn.String(row["ProblemDefNumList"].ToString());
				ehrTrigger.MedicationNumList= PIn.String(row["MedicationNumList"].ToString());
				ehrTrigger.RxCuiList        = PIn.String(row["RxCuiList"].ToString());
				ehrTrigger.CvxList          = PIn.String(row["CvxList"].ToString());
				ehrTrigger.AllergyDefNumList= PIn.String(row["AllergyDefNumList"].ToString());
				ehrTrigger.DemographicsList = PIn.String(row["DemographicsList"].ToString());
				ehrTrigger.LabLoincList     = PIn.String(row["LabLoincList"].ToString());
				ehrTrigger.VitalLoincList   = PIn.String(row["VitalLoincList"].ToString());
				ehrTrigger.Instructions     = PIn.String(row["Instructions"].ToString());
				ehrTrigger.Bibliography     = PIn.String(row["Bibliography"].ToString());
				ehrTrigger.Cardinality      = (OpenDentBusiness.MatchCardinality)PIn.Int(row["Cardinality"].ToString());
				retVal.Add(ehrTrigger);
			}
			return retVal;
		}

		///<summary>Converts a list of EhrTrigger into a DataTable.</summary>
		public static DataTable ListToTable(List<EhrTrigger> listEhrTriggers,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="EhrTrigger";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("EhrTriggerNum");
			table.Columns.Add("Description");
			table.Columns.Add("ProblemSnomedList");
			table.Columns.Add("ProblemIcd9List");
			table.Columns.Add("ProblemIcd10List");
			table.Columns.Add("ProblemDefNumList");
			table.Columns.Add("MedicationNumList");
			table.Columns.Add("RxCuiList");
			table.Columns.Add("CvxList");
			table.Columns.Add("AllergyDefNumList");
			table.Columns.Add("DemographicsList");
			table.Columns.Add("LabLoincList");
			table.Columns.Add("VitalLoincList");
			table.Columns.Add("Instructions");
			table.Columns.Add("Bibliography");
			table.Columns.Add("Cardinality");
			foreach(EhrTrigger ehrTrigger in listEhrTriggers) {
				table.Rows.Add(new object[] {
					POut.Long  (ehrTrigger.EhrTriggerNum),
					            ehrTrigger.Description,
					            ehrTrigger.ProblemSnomedList,
					            ehrTrigger.ProblemIcd9List,
					            ehrTrigger.ProblemIcd10List,
					            ehrTrigger.ProblemDefNumList,
					            ehrTrigger.MedicationNumList,
					            ehrTrigger.RxCuiList,
					            ehrTrigger.CvxList,
					            ehrTrigger.AllergyDefNumList,
					            ehrTrigger.DemographicsList,
					            ehrTrigger.LabLoincList,
					            ehrTrigger.VitalLoincList,
					            ehrTrigger.Instructions,
					            ehrTrigger.Bibliography,
					POut.Int   ((int)ehrTrigger.Cardinality),
				});
			}
			return table;
		}

		///<summary>Inserts one EhrTrigger into the database.  Returns the new priKey.</summary>
		public static long Insert(EhrTrigger ehrTrigger){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				ehrTrigger.EhrTriggerNum=DbHelper.GetNextOracleKey("ehrtrigger","EhrTriggerNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(ehrTrigger,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							ehrTrigger.EhrTriggerNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(ehrTrigger,false);
			}
		}

		///<summary>Inserts one EhrTrigger into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(EhrTrigger ehrTrigger,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				ehrTrigger.EhrTriggerNum=ReplicationServers.GetKey("ehrtrigger","EhrTriggerNum");
			}
			string command="INSERT INTO ehrtrigger (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="EhrTriggerNum,";
			}
			command+="Description,ProblemSnomedList,ProblemIcd9List,ProblemIcd10List,ProblemDefNumList,MedicationNumList,RxCuiList,CvxList,AllergyDefNumList,DemographicsList,LabLoincList,VitalLoincList,Instructions,Bibliography,Cardinality) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(ehrTrigger.EhrTriggerNum)+",";
			}
			command+=
				 "'"+POut.String(ehrTrigger.Description)+"',"
				+    DbHelper.ParamChar+"paramProblemSnomedList,"
				+    DbHelper.ParamChar+"paramProblemIcd9List,"
				+    DbHelper.ParamChar+"paramProblemIcd10List,"
				+    DbHelper.ParamChar+"paramProblemDefNumList,"
				+    DbHelper.ParamChar+"paramMedicationNumList,"
				+    DbHelper.ParamChar+"paramRxCuiList,"
				+    DbHelper.ParamChar+"paramCvxList,"
				+    DbHelper.ParamChar+"paramAllergyDefNumList,"
				+    DbHelper.ParamChar+"paramDemographicsList,"
				+    DbHelper.ParamChar+"paramLabLoincList,"
				+    DbHelper.ParamChar+"paramVitalLoincList,"
				+    DbHelper.ParamChar+"paramInstructions,"
				+    DbHelper.ParamChar+"paramBibliography,"
				+    POut.Int   ((int)ehrTrigger.Cardinality)+")";
			if(ehrTrigger.ProblemSnomedList==null) {
				ehrTrigger.ProblemSnomedList="";
			}
			OdSqlParameter paramProblemSnomedList=new OdSqlParameter("paramProblemSnomedList",OdDbType.Text,POut.StringParam(ehrTrigger.ProblemSnomedList));
			if(ehrTrigger.ProblemIcd9List==null) {
				ehrTrigger.ProblemIcd9List="";
			}
			OdSqlParameter paramProblemIcd9List=new OdSqlParameter("paramProblemIcd9List",OdDbType.Text,POut.StringParam(ehrTrigger.ProblemIcd9List));
			if(ehrTrigger.ProblemIcd10List==null) {
				ehrTrigger.ProblemIcd10List="";
			}
			OdSqlParameter paramProblemIcd10List=new OdSqlParameter("paramProblemIcd10List",OdDbType.Text,POut.StringParam(ehrTrigger.ProblemIcd10List));
			if(ehrTrigger.ProblemDefNumList==null) {
				ehrTrigger.ProblemDefNumList="";
			}
			OdSqlParameter paramProblemDefNumList=new OdSqlParameter("paramProblemDefNumList",OdDbType.Text,POut.StringParam(ehrTrigger.ProblemDefNumList));
			if(ehrTrigger.MedicationNumList==null) {
				ehrTrigger.MedicationNumList="";
			}
			OdSqlParameter paramMedicationNumList=new OdSqlParameter("paramMedicationNumList",OdDbType.Text,POut.StringParam(ehrTrigger.MedicationNumList));
			if(ehrTrigger.RxCuiList==null) {
				ehrTrigger.RxCuiList="";
			}
			OdSqlParameter paramRxCuiList=new OdSqlParameter("paramRxCuiList",OdDbType.Text,POut.StringParam(ehrTrigger.RxCuiList));
			if(ehrTrigger.CvxList==null) {
				ehrTrigger.CvxList="";
			}
			OdSqlParameter paramCvxList=new OdSqlParameter("paramCvxList",OdDbType.Text,POut.StringParam(ehrTrigger.CvxList));
			if(ehrTrigger.AllergyDefNumList==null) {
				ehrTrigger.AllergyDefNumList="";
			}
			OdSqlParameter paramAllergyDefNumList=new OdSqlParameter("paramAllergyDefNumList",OdDbType.Text,POut.StringParam(ehrTrigger.AllergyDefNumList));
			if(ehrTrigger.DemographicsList==null) {
				ehrTrigger.DemographicsList="";
			}
			OdSqlParameter paramDemographicsList=new OdSqlParameter("paramDemographicsList",OdDbType.Text,POut.StringParam(ehrTrigger.DemographicsList));
			if(ehrTrigger.LabLoincList==null) {
				ehrTrigger.LabLoincList="";
			}
			OdSqlParameter paramLabLoincList=new OdSqlParameter("paramLabLoincList",OdDbType.Text,POut.StringParam(ehrTrigger.LabLoincList));
			if(ehrTrigger.VitalLoincList==null) {
				ehrTrigger.VitalLoincList="";
			}
			OdSqlParameter paramVitalLoincList=new OdSqlParameter("paramVitalLoincList",OdDbType.Text,POut.StringParam(ehrTrigger.VitalLoincList));
			if(ehrTrigger.Instructions==null) {
				ehrTrigger.Instructions="";
			}
			OdSqlParameter paramInstructions=new OdSqlParameter("paramInstructions",OdDbType.Text,POut.StringParam(ehrTrigger.Instructions));
			if(ehrTrigger.Bibliography==null) {
				ehrTrigger.Bibliography="";
			}
			OdSqlParameter paramBibliography=new OdSqlParameter("paramBibliography",OdDbType.Text,POut.StringParam(ehrTrigger.Bibliography));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramProblemSnomedList,paramProblemIcd9List,paramProblemIcd10List,paramProblemDefNumList,paramMedicationNumList,paramRxCuiList,paramCvxList,paramAllergyDefNumList,paramDemographicsList,paramLabLoincList,paramVitalLoincList,paramInstructions,paramBibliography);
			}
			else {
				ehrTrigger.EhrTriggerNum=Db.NonQ(command,true,"EhrTriggerNum","ehrTrigger",paramProblemSnomedList,paramProblemIcd9List,paramProblemIcd10List,paramProblemDefNumList,paramMedicationNumList,paramRxCuiList,paramCvxList,paramAllergyDefNumList,paramDemographicsList,paramLabLoincList,paramVitalLoincList,paramInstructions,paramBibliography);
			}
			return ehrTrigger.EhrTriggerNum;
		}

		///<summary>Inserts one EhrTrigger into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(EhrTrigger ehrTrigger){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(ehrTrigger,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					ehrTrigger.EhrTriggerNum=DbHelper.GetNextOracleKey("ehrtrigger","EhrTriggerNum"); //Cacheless method
				}
				return InsertNoCache(ehrTrigger,true);
			}
		}

		///<summary>Inserts one EhrTrigger into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(EhrTrigger ehrTrigger,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO ehrtrigger (";
			if(!useExistingPK && isRandomKeys) {
				ehrTrigger.EhrTriggerNum=ReplicationServers.GetKeyNoCache("ehrtrigger","EhrTriggerNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="EhrTriggerNum,";
			}
			command+="Description,ProblemSnomedList,ProblemIcd9List,ProblemIcd10List,ProblemDefNumList,MedicationNumList,RxCuiList,CvxList,AllergyDefNumList,DemographicsList,LabLoincList,VitalLoincList,Instructions,Bibliography,Cardinality) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(ehrTrigger.EhrTriggerNum)+",";
			}
			command+=
				 "'"+POut.String(ehrTrigger.Description)+"',"
				+    DbHelper.ParamChar+"paramProblemSnomedList,"
				+    DbHelper.ParamChar+"paramProblemIcd9List,"
				+    DbHelper.ParamChar+"paramProblemIcd10List,"
				+    DbHelper.ParamChar+"paramProblemDefNumList,"
				+    DbHelper.ParamChar+"paramMedicationNumList,"
				+    DbHelper.ParamChar+"paramRxCuiList,"
				+    DbHelper.ParamChar+"paramCvxList,"
				+    DbHelper.ParamChar+"paramAllergyDefNumList,"
				+    DbHelper.ParamChar+"paramDemographicsList,"
				+    DbHelper.ParamChar+"paramLabLoincList,"
				+    DbHelper.ParamChar+"paramVitalLoincList,"
				+    DbHelper.ParamChar+"paramInstructions,"
				+    DbHelper.ParamChar+"paramBibliography,"
				+    POut.Int   ((int)ehrTrigger.Cardinality)+")";
			if(ehrTrigger.ProblemSnomedList==null) {
				ehrTrigger.ProblemSnomedList="";
			}
			OdSqlParameter paramProblemSnomedList=new OdSqlParameter("paramProblemSnomedList",OdDbType.Text,POut.StringParam(ehrTrigger.ProblemSnomedList));
			if(ehrTrigger.ProblemIcd9List==null) {
				ehrTrigger.ProblemIcd9List="";
			}
			OdSqlParameter paramProblemIcd9List=new OdSqlParameter("paramProblemIcd9List",OdDbType.Text,POut.StringParam(ehrTrigger.ProblemIcd9List));
			if(ehrTrigger.ProblemIcd10List==null) {
				ehrTrigger.ProblemIcd10List="";
			}
			OdSqlParameter paramProblemIcd10List=new OdSqlParameter("paramProblemIcd10List",OdDbType.Text,POut.StringParam(ehrTrigger.ProblemIcd10List));
			if(ehrTrigger.ProblemDefNumList==null) {
				ehrTrigger.ProblemDefNumList="";
			}
			OdSqlParameter paramProblemDefNumList=new OdSqlParameter("paramProblemDefNumList",OdDbType.Text,POut.StringParam(ehrTrigger.ProblemDefNumList));
			if(ehrTrigger.MedicationNumList==null) {
				ehrTrigger.MedicationNumList="";
			}
			OdSqlParameter paramMedicationNumList=new OdSqlParameter("paramMedicationNumList",OdDbType.Text,POut.StringParam(ehrTrigger.MedicationNumList));
			if(ehrTrigger.RxCuiList==null) {
				ehrTrigger.RxCuiList="";
			}
			OdSqlParameter paramRxCuiList=new OdSqlParameter("paramRxCuiList",OdDbType.Text,POut.StringParam(ehrTrigger.RxCuiList));
			if(ehrTrigger.CvxList==null) {
				ehrTrigger.CvxList="";
			}
			OdSqlParameter paramCvxList=new OdSqlParameter("paramCvxList",OdDbType.Text,POut.StringParam(ehrTrigger.CvxList));
			if(ehrTrigger.AllergyDefNumList==null) {
				ehrTrigger.AllergyDefNumList="";
			}
			OdSqlParameter paramAllergyDefNumList=new OdSqlParameter("paramAllergyDefNumList",OdDbType.Text,POut.StringParam(ehrTrigger.AllergyDefNumList));
			if(ehrTrigger.DemographicsList==null) {
				ehrTrigger.DemographicsList="";
			}
			OdSqlParameter paramDemographicsList=new OdSqlParameter("paramDemographicsList",OdDbType.Text,POut.StringParam(ehrTrigger.DemographicsList));
			if(ehrTrigger.LabLoincList==null) {
				ehrTrigger.LabLoincList="";
			}
			OdSqlParameter paramLabLoincList=new OdSqlParameter("paramLabLoincList",OdDbType.Text,POut.StringParam(ehrTrigger.LabLoincList));
			if(ehrTrigger.VitalLoincList==null) {
				ehrTrigger.VitalLoincList="";
			}
			OdSqlParameter paramVitalLoincList=new OdSqlParameter("paramVitalLoincList",OdDbType.Text,POut.StringParam(ehrTrigger.VitalLoincList));
			if(ehrTrigger.Instructions==null) {
				ehrTrigger.Instructions="";
			}
			OdSqlParameter paramInstructions=new OdSqlParameter("paramInstructions",OdDbType.Text,POut.StringParam(ehrTrigger.Instructions));
			if(ehrTrigger.Bibliography==null) {
				ehrTrigger.Bibliography="";
			}
			OdSqlParameter paramBibliography=new OdSqlParameter("paramBibliography",OdDbType.Text,POut.StringParam(ehrTrigger.Bibliography));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramProblemSnomedList,paramProblemIcd9List,paramProblemIcd10List,paramProblemDefNumList,paramMedicationNumList,paramRxCuiList,paramCvxList,paramAllergyDefNumList,paramDemographicsList,paramLabLoincList,paramVitalLoincList,paramInstructions,paramBibliography);
			}
			else {
				ehrTrigger.EhrTriggerNum=Db.NonQ(command,true,"EhrTriggerNum","ehrTrigger",paramProblemSnomedList,paramProblemIcd9List,paramProblemIcd10List,paramProblemDefNumList,paramMedicationNumList,paramRxCuiList,paramCvxList,paramAllergyDefNumList,paramDemographicsList,paramLabLoincList,paramVitalLoincList,paramInstructions,paramBibliography);
			}
			return ehrTrigger.EhrTriggerNum;
		}

		///<summary>Updates one EhrTrigger in the database.</summary>
		public static void Update(EhrTrigger ehrTrigger){
			string command="UPDATE ehrtrigger SET "
				+"Description      = '"+POut.String(ehrTrigger.Description)+"', "
				+"ProblemSnomedList=  "+DbHelper.ParamChar+"paramProblemSnomedList, "
				+"ProblemIcd9List  =  "+DbHelper.ParamChar+"paramProblemIcd9List, "
				+"ProblemIcd10List =  "+DbHelper.ParamChar+"paramProblemIcd10List, "
				+"ProblemDefNumList=  "+DbHelper.ParamChar+"paramProblemDefNumList, "
				+"MedicationNumList=  "+DbHelper.ParamChar+"paramMedicationNumList, "
				+"RxCuiList        =  "+DbHelper.ParamChar+"paramRxCuiList, "
				+"CvxList          =  "+DbHelper.ParamChar+"paramCvxList, "
				+"AllergyDefNumList=  "+DbHelper.ParamChar+"paramAllergyDefNumList, "
				+"DemographicsList =  "+DbHelper.ParamChar+"paramDemographicsList, "
				+"LabLoincList     =  "+DbHelper.ParamChar+"paramLabLoincList, "
				+"VitalLoincList   =  "+DbHelper.ParamChar+"paramVitalLoincList, "
				+"Instructions     =  "+DbHelper.ParamChar+"paramInstructions, "
				+"Bibliography     =  "+DbHelper.ParamChar+"paramBibliography, "
				+"Cardinality      =  "+POut.Int   ((int)ehrTrigger.Cardinality)+" "
				+"WHERE EhrTriggerNum = "+POut.Long(ehrTrigger.EhrTriggerNum);
			if(ehrTrigger.ProblemSnomedList==null) {
				ehrTrigger.ProblemSnomedList="";
			}
			OdSqlParameter paramProblemSnomedList=new OdSqlParameter("paramProblemSnomedList",OdDbType.Text,POut.StringParam(ehrTrigger.ProblemSnomedList));
			if(ehrTrigger.ProblemIcd9List==null) {
				ehrTrigger.ProblemIcd9List="";
			}
			OdSqlParameter paramProblemIcd9List=new OdSqlParameter("paramProblemIcd9List",OdDbType.Text,POut.StringParam(ehrTrigger.ProblemIcd9List));
			if(ehrTrigger.ProblemIcd10List==null) {
				ehrTrigger.ProblemIcd10List="";
			}
			OdSqlParameter paramProblemIcd10List=new OdSqlParameter("paramProblemIcd10List",OdDbType.Text,POut.StringParam(ehrTrigger.ProblemIcd10List));
			if(ehrTrigger.ProblemDefNumList==null) {
				ehrTrigger.ProblemDefNumList="";
			}
			OdSqlParameter paramProblemDefNumList=new OdSqlParameter("paramProblemDefNumList",OdDbType.Text,POut.StringParam(ehrTrigger.ProblemDefNumList));
			if(ehrTrigger.MedicationNumList==null) {
				ehrTrigger.MedicationNumList="";
			}
			OdSqlParameter paramMedicationNumList=new OdSqlParameter("paramMedicationNumList",OdDbType.Text,POut.StringParam(ehrTrigger.MedicationNumList));
			if(ehrTrigger.RxCuiList==null) {
				ehrTrigger.RxCuiList="";
			}
			OdSqlParameter paramRxCuiList=new OdSqlParameter("paramRxCuiList",OdDbType.Text,POut.StringParam(ehrTrigger.RxCuiList));
			if(ehrTrigger.CvxList==null) {
				ehrTrigger.CvxList="";
			}
			OdSqlParameter paramCvxList=new OdSqlParameter("paramCvxList",OdDbType.Text,POut.StringParam(ehrTrigger.CvxList));
			if(ehrTrigger.AllergyDefNumList==null) {
				ehrTrigger.AllergyDefNumList="";
			}
			OdSqlParameter paramAllergyDefNumList=new OdSqlParameter("paramAllergyDefNumList",OdDbType.Text,POut.StringParam(ehrTrigger.AllergyDefNumList));
			if(ehrTrigger.DemographicsList==null) {
				ehrTrigger.DemographicsList="";
			}
			OdSqlParameter paramDemographicsList=new OdSqlParameter("paramDemographicsList",OdDbType.Text,POut.StringParam(ehrTrigger.DemographicsList));
			if(ehrTrigger.LabLoincList==null) {
				ehrTrigger.LabLoincList="";
			}
			OdSqlParameter paramLabLoincList=new OdSqlParameter("paramLabLoincList",OdDbType.Text,POut.StringParam(ehrTrigger.LabLoincList));
			if(ehrTrigger.VitalLoincList==null) {
				ehrTrigger.VitalLoincList="";
			}
			OdSqlParameter paramVitalLoincList=new OdSqlParameter("paramVitalLoincList",OdDbType.Text,POut.StringParam(ehrTrigger.VitalLoincList));
			if(ehrTrigger.Instructions==null) {
				ehrTrigger.Instructions="";
			}
			OdSqlParameter paramInstructions=new OdSqlParameter("paramInstructions",OdDbType.Text,POut.StringParam(ehrTrigger.Instructions));
			if(ehrTrigger.Bibliography==null) {
				ehrTrigger.Bibliography="";
			}
			OdSqlParameter paramBibliography=new OdSqlParameter("paramBibliography",OdDbType.Text,POut.StringParam(ehrTrigger.Bibliography));
			Db.NonQ(command,paramProblemSnomedList,paramProblemIcd9List,paramProblemIcd10List,paramProblemDefNumList,paramMedicationNumList,paramRxCuiList,paramCvxList,paramAllergyDefNumList,paramDemographicsList,paramLabLoincList,paramVitalLoincList,paramInstructions,paramBibliography);
		}

		///<summary>Updates one EhrTrigger in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(EhrTrigger ehrTrigger,EhrTrigger oldEhrTrigger){
			string command="";
			if(ehrTrigger.Description != oldEhrTrigger.Description) {
				if(command!=""){ command+=",";}
				command+="Description = '"+POut.String(ehrTrigger.Description)+"'";
			}
			if(ehrTrigger.ProblemSnomedList != oldEhrTrigger.ProblemSnomedList) {
				if(command!=""){ command+=",";}
				command+="ProblemSnomedList = "+DbHelper.ParamChar+"paramProblemSnomedList";
			}
			if(ehrTrigger.ProblemIcd9List != oldEhrTrigger.ProblemIcd9List) {
				if(command!=""){ command+=",";}
				command+="ProblemIcd9List = "+DbHelper.ParamChar+"paramProblemIcd9List";
			}
			if(ehrTrigger.ProblemIcd10List != oldEhrTrigger.ProblemIcd10List) {
				if(command!=""){ command+=",";}
				command+="ProblemIcd10List = "+DbHelper.ParamChar+"paramProblemIcd10List";
			}
			if(ehrTrigger.ProblemDefNumList != oldEhrTrigger.ProblemDefNumList) {
				if(command!=""){ command+=",";}
				command+="ProblemDefNumList = "+DbHelper.ParamChar+"paramProblemDefNumList";
			}
			if(ehrTrigger.MedicationNumList != oldEhrTrigger.MedicationNumList) {
				if(command!=""){ command+=",";}
				command+="MedicationNumList = "+DbHelper.ParamChar+"paramMedicationNumList";
			}
			if(ehrTrigger.RxCuiList != oldEhrTrigger.RxCuiList) {
				if(command!=""){ command+=",";}
				command+="RxCuiList = "+DbHelper.ParamChar+"paramRxCuiList";
			}
			if(ehrTrigger.CvxList != oldEhrTrigger.CvxList) {
				if(command!=""){ command+=",";}
				command+="CvxList = "+DbHelper.ParamChar+"paramCvxList";
			}
			if(ehrTrigger.AllergyDefNumList != oldEhrTrigger.AllergyDefNumList) {
				if(command!=""){ command+=",";}
				command+="AllergyDefNumList = "+DbHelper.ParamChar+"paramAllergyDefNumList";
			}
			if(ehrTrigger.DemographicsList != oldEhrTrigger.DemographicsList) {
				if(command!=""){ command+=",";}
				command+="DemographicsList = "+DbHelper.ParamChar+"paramDemographicsList";
			}
			if(ehrTrigger.LabLoincList != oldEhrTrigger.LabLoincList) {
				if(command!=""){ command+=",";}
				command+="LabLoincList = "+DbHelper.ParamChar+"paramLabLoincList";
			}
			if(ehrTrigger.VitalLoincList != oldEhrTrigger.VitalLoincList) {
				if(command!=""){ command+=",";}
				command+="VitalLoincList = "+DbHelper.ParamChar+"paramVitalLoincList";
			}
			if(ehrTrigger.Instructions != oldEhrTrigger.Instructions) {
				if(command!=""){ command+=",";}
				command+="Instructions = "+DbHelper.ParamChar+"paramInstructions";
			}
			if(ehrTrigger.Bibliography != oldEhrTrigger.Bibliography) {
				if(command!=""){ command+=",";}
				command+="Bibliography = "+DbHelper.ParamChar+"paramBibliography";
			}
			if(ehrTrigger.Cardinality != oldEhrTrigger.Cardinality) {
				if(command!=""){ command+=",";}
				command+="Cardinality = "+POut.Int   ((int)ehrTrigger.Cardinality)+"";
			}
			if(command==""){
				return false;
			}
			if(ehrTrigger.ProblemSnomedList==null) {
				ehrTrigger.ProblemSnomedList="";
			}
			OdSqlParameter paramProblemSnomedList=new OdSqlParameter("paramProblemSnomedList",OdDbType.Text,POut.StringParam(ehrTrigger.ProblemSnomedList));
			if(ehrTrigger.ProblemIcd9List==null) {
				ehrTrigger.ProblemIcd9List="";
			}
			OdSqlParameter paramProblemIcd9List=new OdSqlParameter("paramProblemIcd9List",OdDbType.Text,POut.StringParam(ehrTrigger.ProblemIcd9List));
			if(ehrTrigger.ProblemIcd10List==null) {
				ehrTrigger.ProblemIcd10List="";
			}
			OdSqlParameter paramProblemIcd10List=new OdSqlParameter("paramProblemIcd10List",OdDbType.Text,POut.StringParam(ehrTrigger.ProblemIcd10List));
			if(ehrTrigger.ProblemDefNumList==null) {
				ehrTrigger.ProblemDefNumList="";
			}
			OdSqlParameter paramProblemDefNumList=new OdSqlParameter("paramProblemDefNumList",OdDbType.Text,POut.StringParam(ehrTrigger.ProblemDefNumList));
			if(ehrTrigger.MedicationNumList==null) {
				ehrTrigger.MedicationNumList="";
			}
			OdSqlParameter paramMedicationNumList=new OdSqlParameter("paramMedicationNumList",OdDbType.Text,POut.StringParam(ehrTrigger.MedicationNumList));
			if(ehrTrigger.RxCuiList==null) {
				ehrTrigger.RxCuiList="";
			}
			OdSqlParameter paramRxCuiList=new OdSqlParameter("paramRxCuiList",OdDbType.Text,POut.StringParam(ehrTrigger.RxCuiList));
			if(ehrTrigger.CvxList==null) {
				ehrTrigger.CvxList="";
			}
			OdSqlParameter paramCvxList=new OdSqlParameter("paramCvxList",OdDbType.Text,POut.StringParam(ehrTrigger.CvxList));
			if(ehrTrigger.AllergyDefNumList==null) {
				ehrTrigger.AllergyDefNumList="";
			}
			OdSqlParameter paramAllergyDefNumList=new OdSqlParameter("paramAllergyDefNumList",OdDbType.Text,POut.StringParam(ehrTrigger.AllergyDefNumList));
			if(ehrTrigger.DemographicsList==null) {
				ehrTrigger.DemographicsList="";
			}
			OdSqlParameter paramDemographicsList=new OdSqlParameter("paramDemographicsList",OdDbType.Text,POut.StringParam(ehrTrigger.DemographicsList));
			if(ehrTrigger.LabLoincList==null) {
				ehrTrigger.LabLoincList="";
			}
			OdSqlParameter paramLabLoincList=new OdSqlParameter("paramLabLoincList",OdDbType.Text,POut.StringParam(ehrTrigger.LabLoincList));
			if(ehrTrigger.VitalLoincList==null) {
				ehrTrigger.VitalLoincList="";
			}
			OdSqlParameter paramVitalLoincList=new OdSqlParameter("paramVitalLoincList",OdDbType.Text,POut.StringParam(ehrTrigger.VitalLoincList));
			if(ehrTrigger.Instructions==null) {
				ehrTrigger.Instructions="";
			}
			OdSqlParameter paramInstructions=new OdSqlParameter("paramInstructions",OdDbType.Text,POut.StringParam(ehrTrigger.Instructions));
			if(ehrTrigger.Bibliography==null) {
				ehrTrigger.Bibliography="";
			}
			OdSqlParameter paramBibliography=new OdSqlParameter("paramBibliography",OdDbType.Text,POut.StringParam(ehrTrigger.Bibliography));
			command="UPDATE ehrtrigger SET "+command
				+" WHERE EhrTriggerNum = "+POut.Long(ehrTrigger.EhrTriggerNum);
			Db.NonQ(command,paramProblemSnomedList,paramProblemIcd9List,paramProblemIcd10List,paramProblemDefNumList,paramMedicationNumList,paramRxCuiList,paramCvxList,paramAllergyDefNumList,paramDemographicsList,paramLabLoincList,paramVitalLoincList,paramInstructions,paramBibliography);
			return true;
		}

		///<summary>Returns true if Update(EhrTrigger,EhrTrigger) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(EhrTrigger ehrTrigger,EhrTrigger oldEhrTrigger) {
			if(ehrTrigger.Description != oldEhrTrigger.Description) {
				return true;
			}
			if(ehrTrigger.ProblemSnomedList != oldEhrTrigger.ProblemSnomedList) {
				return true;
			}
			if(ehrTrigger.ProblemIcd9List != oldEhrTrigger.ProblemIcd9List) {
				return true;
			}
			if(ehrTrigger.ProblemIcd10List != oldEhrTrigger.ProblemIcd10List) {
				return true;
			}
			if(ehrTrigger.ProblemDefNumList != oldEhrTrigger.ProblemDefNumList) {
				return true;
			}
			if(ehrTrigger.MedicationNumList != oldEhrTrigger.MedicationNumList) {
				return true;
			}
			if(ehrTrigger.RxCuiList != oldEhrTrigger.RxCuiList) {
				return true;
			}
			if(ehrTrigger.CvxList != oldEhrTrigger.CvxList) {
				return true;
			}
			if(ehrTrigger.AllergyDefNumList != oldEhrTrigger.AllergyDefNumList) {
				return true;
			}
			if(ehrTrigger.DemographicsList != oldEhrTrigger.DemographicsList) {
				return true;
			}
			if(ehrTrigger.LabLoincList != oldEhrTrigger.LabLoincList) {
				return true;
			}
			if(ehrTrigger.VitalLoincList != oldEhrTrigger.VitalLoincList) {
				return true;
			}
			if(ehrTrigger.Instructions != oldEhrTrigger.Instructions) {
				return true;
			}
			if(ehrTrigger.Bibliography != oldEhrTrigger.Bibliography) {
				return true;
			}
			if(ehrTrigger.Cardinality != oldEhrTrigger.Cardinality) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one EhrTrigger from the database.</summary>
		public static void Delete(long ehrTriggerNum){
			string command="DELETE FROM ehrtrigger "
				+"WHERE EhrTriggerNum = "+POut.Long(ehrTriggerNum);
			Db.NonQ(command);
		}

	}
}