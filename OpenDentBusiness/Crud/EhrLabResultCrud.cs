//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using EhrLaboratories;

namespace OpenDentBusiness.Crud{
	public class EhrLabResultCrud {
		///<summary>Gets one EhrLabResult object from the database using the primary key.  Returns null if not found.</summary>
		public static EhrLabResult SelectOne(long ehrLabResultNum){
			string command="SELECT * FROM ehrlabresult "
				+"WHERE EhrLabResultNum = "+POut.Long(ehrLabResultNum);
			List<EhrLabResult> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one EhrLabResult object from the database using a query.</summary>
		public static EhrLabResult SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EhrLabResult> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of EhrLabResult objects from the database using a query.</summary>
		public static List<EhrLabResult> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EhrLabResult> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<EhrLabResult> TableToList(DataTable table){
			List<EhrLabResult> retVal=new List<EhrLabResult>();
			EhrLabResult ehrLabResult;
			foreach(DataRow row in table.Rows) {
				ehrLabResult=new EhrLabResult();
				ehrLabResult.EhrLabResultNum                                            = PIn.Long  (row["EhrLabResultNum"].ToString());
				ehrLabResult.EhrLabNum                                                  = PIn.Long  (row["EhrLabNum"].ToString());
				ehrLabResult.SetIdOBX                                                   = PIn.Long  (row["SetIdOBX"].ToString());
				string valueType=row["ValueType"].ToString();
				if(valueType==""){
					ehrLabResult.ValueType                                                =(HL70125)0;
				}
				else try{
					ehrLabResult.ValueType                                                =(HL70125)Enum.Parse(typeof(HL70125),valueType);
				}
				catch{
					ehrLabResult.ValueType                                                =(HL70125)0;
				}
				ehrLabResult.ObservationIdentifierID                                    = PIn.String(row["ObservationIdentifierID"].ToString());
				ehrLabResult.ObservationIdentifierText                                  = PIn.String(row["ObservationIdentifierText"].ToString());
				ehrLabResult.ObservationIdentifierCodeSystemName                        = PIn.String(row["ObservationIdentifierCodeSystemName"].ToString());
				ehrLabResult.ObservationIdentifierIDAlt                                 = PIn.String(row["ObservationIdentifierIDAlt"].ToString());
				ehrLabResult.ObservationIdentifierTextAlt                               = PIn.String(row["ObservationIdentifierTextAlt"].ToString());
				ehrLabResult.ObservationIdentifierCodeSystemNameAlt                     = PIn.String(row["ObservationIdentifierCodeSystemNameAlt"].ToString());
				ehrLabResult.ObservationIdentifierTextOriginal                          = PIn.String(row["ObservationIdentifierTextOriginal"].ToString());
				ehrLabResult.ObservationIdentifierSub                                   = PIn.String(row["ObservationIdentifierSub"].ToString());
				ehrLabResult.ObservationValueCodedElementID                             = PIn.String(row["ObservationValueCodedElementID"].ToString());
				ehrLabResult.ObservationValueCodedElementText                           = PIn.String(row["ObservationValueCodedElementText"].ToString());
				ehrLabResult.ObservationValueCodedElementCodeSystemName                 = PIn.String(row["ObservationValueCodedElementCodeSystemName"].ToString());
				ehrLabResult.ObservationValueCodedElementIDAlt                          = PIn.String(row["ObservationValueCodedElementIDAlt"].ToString());
				ehrLabResult.ObservationValueCodedElementTextAlt                        = PIn.String(row["ObservationValueCodedElementTextAlt"].ToString());
				ehrLabResult.ObservationValueCodedElementCodeSystemNameAlt              = PIn.String(row["ObservationValueCodedElementCodeSystemNameAlt"].ToString());
				ehrLabResult.ObservationValueCodedElementTextOriginal                   = PIn.String(row["ObservationValueCodedElementTextOriginal"].ToString());
				ehrLabResult.ObservationValueDateTime                                   = PIn.String(row["ObservationValueDateTime"].ToString());
				ehrLabResult.ObservationValueTime                                       = PIn.Time(row["ObservationValueTime"].ToString());
				ehrLabResult.ObservationValueComparator                                 = PIn.String(row["ObservationValueComparator"].ToString());
				ehrLabResult.ObservationValueNumber1                                    = PIn.Double(row["ObservationValueNumber1"].ToString());
				ehrLabResult.ObservationValueSeparatorOrSuffix                          = PIn.String(row["ObservationValueSeparatorOrSuffix"].ToString());
				ehrLabResult.ObservationValueNumber2                                    = PIn.Double(row["ObservationValueNumber2"].ToString());
				ehrLabResult.ObservationValueNumeric                                    = PIn.Double(row["ObservationValueNumeric"].ToString());
				ehrLabResult.ObservationValueText                                       = PIn.String(row["ObservationValueText"].ToString());
				ehrLabResult.UnitsID                                                    = PIn.String(row["UnitsID"].ToString());
				ehrLabResult.UnitsText                                                  = PIn.String(row["UnitsText"].ToString());
				ehrLabResult.UnitsCodeSystemName                                        = PIn.String(row["UnitsCodeSystemName"].ToString());
				ehrLabResult.UnitsIDAlt                                                 = PIn.String(row["UnitsIDAlt"].ToString());
				ehrLabResult.UnitsTextAlt                                               = PIn.String(row["UnitsTextAlt"].ToString());
				ehrLabResult.UnitsCodeSystemNameAlt                                     = PIn.String(row["UnitsCodeSystemNameAlt"].ToString());
				ehrLabResult.UnitsTextOriginal                                          = PIn.String(row["UnitsTextOriginal"].ToString());
				ehrLabResult.referenceRange                                             = PIn.String(row["referenceRange"].ToString());
				ehrLabResult.AbnormalFlags                                              = PIn.String(row["AbnormalFlags"].ToString());
				string observationResultStatus=row["ObservationResultStatus"].ToString();
				if(observationResultStatus==""){
					ehrLabResult.ObservationResultStatus                                  =(HL70085)0;
				}
				else try{
					ehrLabResult.ObservationResultStatus                                  =(HL70085)Enum.Parse(typeof(HL70085),observationResultStatus);
				}
				catch{
					ehrLabResult.ObservationResultStatus                                  =(HL70085)0;
				}
				ehrLabResult.ObservationDateTime                                        = PIn.String(row["ObservationDateTime"].ToString());
				ehrLabResult.AnalysisDateTime                                           = PIn.String(row["AnalysisDateTime"].ToString());
				ehrLabResult.PerformingOrganizationName                                 = PIn.String(row["PerformingOrganizationName"].ToString());
				ehrLabResult.PerformingOrganizationNameAssigningAuthorityNamespaceId    = PIn.String(row["PerformingOrganizationNameAssigningAuthorityNamespaceId"].ToString());
				ehrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalId    = PIn.String(row["PerformingOrganizationNameAssigningAuthorityUniversalId"].ToString());
				ehrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalIdType= PIn.String(row["PerformingOrganizationNameAssigningAuthorityUniversalIdType"].ToString());
				string performingOrganizationIdentifierTypeCode=row["PerformingOrganizationIdentifierTypeCode"].ToString();
				if(performingOrganizationIdentifierTypeCode==""){
					ehrLabResult.PerformingOrganizationIdentifierTypeCode                 =(HL70203)0;
				}
				else try{
					ehrLabResult.PerformingOrganizationIdentifierTypeCode                 =(HL70203)Enum.Parse(typeof(HL70203),performingOrganizationIdentifierTypeCode);
				}
				catch{
					ehrLabResult.PerformingOrganizationIdentifierTypeCode                 =(HL70203)0;
				}
				ehrLabResult.PerformingOrganizationIdentifier                           = PIn.String(row["PerformingOrganizationIdentifier"].ToString());
				ehrLabResult.PerformingOrganizationAddressStreet                        = PIn.String(row["PerformingOrganizationAddressStreet"].ToString());
				ehrLabResult.PerformingOrganizationAddressOtherDesignation              = PIn.String(row["PerformingOrganizationAddressOtherDesignation"].ToString());
				ehrLabResult.PerformingOrganizationAddressCity                          = PIn.String(row["PerformingOrganizationAddressCity"].ToString());
				string performingOrganizationAddressStateOrProvince=row["PerformingOrganizationAddressStateOrProvince"].ToString();
				if(performingOrganizationAddressStateOrProvince==""){
					ehrLabResult.PerformingOrganizationAddressStateOrProvince             =(USPSAlphaStateCode)0;
				}
				else try{
					ehrLabResult.PerformingOrganizationAddressStateOrProvince             =(USPSAlphaStateCode)Enum.Parse(typeof(USPSAlphaStateCode),performingOrganizationAddressStateOrProvince);
				}
				catch{
					ehrLabResult.PerformingOrganizationAddressStateOrProvince             =(USPSAlphaStateCode)0;
				}
				ehrLabResult.PerformingOrganizationAddressZipOrPostalCode               = PIn.String(row["PerformingOrganizationAddressZipOrPostalCode"].ToString());
				ehrLabResult.PerformingOrganizationAddressCountryCode                   = PIn.String(row["PerformingOrganizationAddressCountryCode"].ToString());
				string performingOrganizationAddressAddressType=row["PerformingOrganizationAddressAddressType"].ToString();
				if(performingOrganizationAddressAddressType==""){
					ehrLabResult.PerformingOrganizationAddressAddressType                 =(HL70190)0;
				}
				else try{
					ehrLabResult.PerformingOrganizationAddressAddressType                 =(HL70190)Enum.Parse(typeof(HL70190),performingOrganizationAddressAddressType);
				}
				catch{
					ehrLabResult.PerformingOrganizationAddressAddressType                 =(HL70190)0;
				}
				ehrLabResult.PerformingOrganizationAddressCountyOrParishCode            = PIn.String(row["PerformingOrganizationAddressCountyOrParishCode"].ToString());
				ehrLabResult.MedicalDirectorID                                          = PIn.String(row["MedicalDirectorID"].ToString());
				ehrLabResult.MedicalDirectorLName                                       = PIn.String(row["MedicalDirectorLName"].ToString());
				ehrLabResult.MedicalDirectorFName                                       = PIn.String(row["MedicalDirectorFName"].ToString());
				ehrLabResult.MedicalDirectorMiddleNames                                 = PIn.String(row["MedicalDirectorMiddleNames"].ToString());
				ehrLabResult.MedicalDirectorSuffix                                      = PIn.String(row["MedicalDirectorSuffix"].ToString());
				ehrLabResult.MedicalDirectorPrefix                                      = PIn.String(row["MedicalDirectorPrefix"].ToString());
				ehrLabResult.MedicalDirectorAssigningAuthorityNamespaceID               = PIn.String(row["MedicalDirectorAssigningAuthorityNamespaceID"].ToString());
				ehrLabResult.MedicalDirectorAssigningAuthorityUniversalID               = PIn.String(row["MedicalDirectorAssigningAuthorityUniversalID"].ToString());
				ehrLabResult.MedicalDirectorAssigningAuthorityIDType                    = PIn.String(row["MedicalDirectorAssigningAuthorityIDType"].ToString());
				string medicalDirectorNameTypeCode=row["MedicalDirectorNameTypeCode"].ToString();
				if(medicalDirectorNameTypeCode==""){
					ehrLabResult.MedicalDirectorNameTypeCode                              =(HL70200)0;
				}
				else try{
					ehrLabResult.MedicalDirectorNameTypeCode                              =(HL70200)Enum.Parse(typeof(HL70200),medicalDirectorNameTypeCode);
				}
				catch{
					ehrLabResult.MedicalDirectorNameTypeCode                              =(HL70200)0;
				}
				string medicalDirectorIdentifierTypeCode=row["MedicalDirectorIdentifierTypeCode"].ToString();
				if(medicalDirectorIdentifierTypeCode==""){
					ehrLabResult.MedicalDirectorIdentifierTypeCode                        =(HL70203)0;
				}
				else try{
					ehrLabResult.MedicalDirectorIdentifierTypeCode                        =(HL70203)Enum.Parse(typeof(HL70203),medicalDirectorIdentifierTypeCode);
				}
				catch{
					ehrLabResult.MedicalDirectorIdentifierTypeCode                        =(HL70203)0;
				}
				retVal.Add(ehrLabResult);
			}
			return retVal;
		}

		///<summary>Converts a list of EhrLabResult into a DataTable.</summary>
		public static DataTable ListToTable(List<EhrLabResult> listEhrLabResults,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="EhrLabResult";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("EhrLabResultNum");
			table.Columns.Add("EhrLabNum");
			table.Columns.Add("SetIdOBX");
			table.Columns.Add("ValueType");
			table.Columns.Add("ObservationIdentifierID");
			table.Columns.Add("ObservationIdentifierText");
			table.Columns.Add("ObservationIdentifierCodeSystemName");
			table.Columns.Add("ObservationIdentifierIDAlt");
			table.Columns.Add("ObservationIdentifierTextAlt");
			table.Columns.Add("ObservationIdentifierCodeSystemNameAlt");
			table.Columns.Add("ObservationIdentifierTextOriginal");
			table.Columns.Add("ObservationIdentifierSub");
			table.Columns.Add("ObservationValueCodedElementID");
			table.Columns.Add("ObservationValueCodedElementText");
			table.Columns.Add("ObservationValueCodedElementCodeSystemName");
			table.Columns.Add("ObservationValueCodedElementIDAlt");
			table.Columns.Add("ObservationValueCodedElementTextAlt");
			table.Columns.Add("ObservationValueCodedElementCodeSystemNameAlt");
			table.Columns.Add("ObservationValueCodedElementTextOriginal");
			table.Columns.Add("ObservationValueDateTime");
			table.Columns.Add("ObservationValueTime");
			table.Columns.Add("ObservationValueComparator");
			table.Columns.Add("ObservationValueNumber1");
			table.Columns.Add("ObservationValueSeparatorOrSuffix");
			table.Columns.Add("ObservationValueNumber2");
			table.Columns.Add("ObservationValueNumeric");
			table.Columns.Add("ObservationValueText");
			table.Columns.Add("UnitsID");
			table.Columns.Add("UnitsText");
			table.Columns.Add("UnitsCodeSystemName");
			table.Columns.Add("UnitsIDAlt");
			table.Columns.Add("UnitsTextAlt");
			table.Columns.Add("UnitsCodeSystemNameAlt");
			table.Columns.Add("UnitsTextOriginal");
			table.Columns.Add("referenceRange");
			table.Columns.Add("AbnormalFlags");
			table.Columns.Add("ObservationResultStatus");
			table.Columns.Add("ObservationDateTime");
			table.Columns.Add("AnalysisDateTime");
			table.Columns.Add("PerformingOrganizationName");
			table.Columns.Add("PerformingOrganizationNameAssigningAuthorityNamespaceId");
			table.Columns.Add("PerformingOrganizationNameAssigningAuthorityUniversalId");
			table.Columns.Add("PerformingOrganizationNameAssigningAuthorityUniversalIdType");
			table.Columns.Add("PerformingOrganizationIdentifierTypeCode");
			table.Columns.Add("PerformingOrganizationIdentifier");
			table.Columns.Add("PerformingOrganizationAddressStreet");
			table.Columns.Add("PerformingOrganizationAddressOtherDesignation");
			table.Columns.Add("PerformingOrganizationAddressCity");
			table.Columns.Add("PerformingOrganizationAddressStateOrProvince");
			table.Columns.Add("PerformingOrganizationAddressZipOrPostalCode");
			table.Columns.Add("PerformingOrganizationAddressCountryCode");
			table.Columns.Add("PerformingOrganizationAddressAddressType");
			table.Columns.Add("PerformingOrganizationAddressCountyOrParishCode");
			table.Columns.Add("MedicalDirectorID");
			table.Columns.Add("MedicalDirectorLName");
			table.Columns.Add("MedicalDirectorFName");
			table.Columns.Add("MedicalDirectorMiddleNames");
			table.Columns.Add("MedicalDirectorSuffix");
			table.Columns.Add("MedicalDirectorPrefix");
			table.Columns.Add("MedicalDirectorAssigningAuthorityNamespaceID");
			table.Columns.Add("MedicalDirectorAssigningAuthorityUniversalID");
			table.Columns.Add("MedicalDirectorAssigningAuthorityIDType");
			table.Columns.Add("MedicalDirectorNameTypeCode");
			table.Columns.Add("MedicalDirectorIdentifierTypeCode");
			foreach(EhrLabResult ehrLabResult in listEhrLabResults) {
				table.Rows.Add(new object[] {
					POut.Long  (ehrLabResult.EhrLabResultNum),
					POut.Long  (ehrLabResult.EhrLabNum),
					POut.Long  (ehrLabResult.SetIdOBX),
					POut.Int   ((int)ehrLabResult.ValueType),
					            ehrLabResult.ObservationIdentifierID,
					            ehrLabResult.ObservationIdentifierText,
					            ehrLabResult.ObservationIdentifierCodeSystemName,
					            ehrLabResult.ObservationIdentifierIDAlt,
					            ehrLabResult.ObservationIdentifierTextAlt,
					            ehrLabResult.ObservationIdentifierCodeSystemNameAlt,
					            ehrLabResult.ObservationIdentifierTextOriginal,
					            ehrLabResult.ObservationIdentifierSub,
					            ehrLabResult.ObservationValueCodedElementID,
					            ehrLabResult.ObservationValueCodedElementText,
					            ehrLabResult.ObservationValueCodedElementCodeSystemName,
					            ehrLabResult.ObservationValueCodedElementIDAlt,
					            ehrLabResult.ObservationValueCodedElementTextAlt,
					            ehrLabResult.ObservationValueCodedElementCodeSystemNameAlt,
					            ehrLabResult.ObservationValueCodedElementTextOriginal,
					            ehrLabResult.ObservationValueDateTime,
					POut.Time  (ehrLabResult.ObservationValueTime,false),
					            ehrLabResult.ObservationValueComparator,
					POut.Double(ehrLabResult.ObservationValueNumber1),
					            ehrLabResult.ObservationValueSeparatorOrSuffix,
					POut.Double(ehrLabResult.ObservationValueNumber2),
					POut.Double(ehrLabResult.ObservationValueNumeric),
					            ehrLabResult.ObservationValueText,
					            ehrLabResult.UnitsID,
					            ehrLabResult.UnitsText,
					            ehrLabResult.UnitsCodeSystemName,
					            ehrLabResult.UnitsIDAlt,
					            ehrLabResult.UnitsTextAlt,
					            ehrLabResult.UnitsCodeSystemNameAlt,
					            ehrLabResult.UnitsTextOriginal,
					            ehrLabResult.referenceRange,
					            ehrLabResult.AbnormalFlags,
					POut.Int   ((int)ehrLabResult.ObservationResultStatus),
					            ehrLabResult.ObservationDateTime,
					            ehrLabResult.AnalysisDateTime,
					            ehrLabResult.PerformingOrganizationName,
					            ehrLabResult.PerformingOrganizationNameAssigningAuthorityNamespaceId,
					            ehrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalId,
					            ehrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalIdType,
					POut.Int   ((int)ehrLabResult.PerformingOrganizationIdentifierTypeCode),
					            ehrLabResult.PerformingOrganizationIdentifier,
					            ehrLabResult.PerformingOrganizationAddressStreet,
					            ehrLabResult.PerformingOrganizationAddressOtherDesignation,
					            ehrLabResult.PerformingOrganizationAddressCity,
					POut.Int   ((int)ehrLabResult.PerformingOrganizationAddressStateOrProvince),
					            ehrLabResult.PerformingOrganizationAddressZipOrPostalCode,
					            ehrLabResult.PerformingOrganizationAddressCountryCode,
					POut.Int   ((int)ehrLabResult.PerformingOrganizationAddressAddressType),
					            ehrLabResult.PerformingOrganizationAddressCountyOrParishCode,
					            ehrLabResult.MedicalDirectorID,
					            ehrLabResult.MedicalDirectorLName,
					            ehrLabResult.MedicalDirectorFName,
					            ehrLabResult.MedicalDirectorMiddleNames,
					            ehrLabResult.MedicalDirectorSuffix,
					            ehrLabResult.MedicalDirectorPrefix,
					            ehrLabResult.MedicalDirectorAssigningAuthorityNamespaceID,
					            ehrLabResult.MedicalDirectorAssigningAuthorityUniversalID,
					            ehrLabResult.MedicalDirectorAssigningAuthorityIDType,
					POut.Int   ((int)ehrLabResult.MedicalDirectorNameTypeCode),
					POut.Int   ((int)ehrLabResult.MedicalDirectorIdentifierTypeCode),
				});
			}
			return table;
		}

		///<summary>Inserts one EhrLabResult into the database.  Returns the new priKey.</summary>
		public static long Insert(EhrLabResult ehrLabResult){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				ehrLabResult.EhrLabResultNum=DbHelper.GetNextOracleKey("ehrlabresult","EhrLabResultNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(ehrLabResult,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							ehrLabResult.EhrLabResultNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(ehrLabResult,false);
			}
		}

		///<summary>Inserts one EhrLabResult into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(EhrLabResult ehrLabResult,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				ehrLabResult.EhrLabResultNum=ReplicationServers.GetKey("ehrlabresult","EhrLabResultNum");
			}
			string command="INSERT INTO ehrlabresult (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="EhrLabResultNum,";
			}
			command+="EhrLabNum,SetIdOBX,ValueType,ObservationIdentifierID,ObservationIdentifierText,ObservationIdentifierCodeSystemName,ObservationIdentifierIDAlt,ObservationIdentifierTextAlt,ObservationIdentifierCodeSystemNameAlt,ObservationIdentifierTextOriginal,ObservationIdentifierSub,ObservationValueCodedElementID,ObservationValueCodedElementText,ObservationValueCodedElementCodeSystemName,ObservationValueCodedElementIDAlt,ObservationValueCodedElementTextAlt,ObservationValueCodedElementCodeSystemNameAlt,ObservationValueCodedElementTextOriginal,ObservationValueDateTime,ObservationValueTime,ObservationValueComparator,ObservationValueNumber1,ObservationValueSeparatorOrSuffix,ObservationValueNumber2,ObservationValueNumeric,ObservationValueText,UnitsID,UnitsText,UnitsCodeSystemName,UnitsIDAlt,UnitsTextAlt,UnitsCodeSystemNameAlt,UnitsTextOriginal,referenceRange,AbnormalFlags,ObservationResultStatus,ObservationDateTime,AnalysisDateTime,PerformingOrganizationName,PerformingOrganizationNameAssigningAuthorityNamespaceId,PerformingOrganizationNameAssigningAuthorityUniversalId,PerformingOrganizationNameAssigningAuthorityUniversalIdType,PerformingOrganizationIdentifierTypeCode,PerformingOrganizationIdentifier,PerformingOrganizationAddressStreet,PerformingOrganizationAddressOtherDesignation,PerformingOrganizationAddressCity,PerformingOrganizationAddressStateOrProvince,PerformingOrganizationAddressZipOrPostalCode,PerformingOrganizationAddressCountryCode,PerformingOrganizationAddressAddressType,PerformingOrganizationAddressCountyOrParishCode,MedicalDirectorID,MedicalDirectorLName,MedicalDirectorFName,MedicalDirectorMiddleNames,MedicalDirectorSuffix,MedicalDirectorPrefix,MedicalDirectorAssigningAuthorityNamespaceID,MedicalDirectorAssigningAuthorityUniversalID,MedicalDirectorAssigningAuthorityIDType,MedicalDirectorNameTypeCode,MedicalDirectorIdentifierTypeCode) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(ehrLabResult.EhrLabResultNum)+",";
			}
			command+=
				     POut.Long  (ehrLabResult.EhrLabNum)+","
				+    POut.Long  (ehrLabResult.SetIdOBX)+","
				+"'"+POut.String(ehrLabResult.ValueType.ToString())+"',"
				+"'"+POut.String(ehrLabResult.ObservationIdentifierID)+"',"
				+"'"+POut.String(ehrLabResult.ObservationIdentifierText)+"',"
				+"'"+POut.String(ehrLabResult.ObservationIdentifierCodeSystemName)+"',"
				+"'"+POut.String(ehrLabResult.ObservationIdentifierIDAlt)+"',"
				+"'"+POut.String(ehrLabResult.ObservationIdentifierTextAlt)+"',"
				+"'"+POut.String(ehrLabResult.ObservationIdentifierCodeSystemNameAlt)+"',"
				+"'"+POut.String(ehrLabResult.ObservationIdentifierTextOriginal)+"',"
				+"'"+POut.String(ehrLabResult.ObservationIdentifierSub)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueCodedElementID)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueCodedElementText)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueCodedElementCodeSystemName)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueCodedElementIDAlt)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueCodedElementTextAlt)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueCodedElementCodeSystemNameAlt)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueCodedElementTextOriginal)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueDateTime)+"',"
				+    POut.Time  (ehrLabResult.ObservationValueTime)+","
				+"'"+POut.String(ehrLabResult.ObservationValueComparator)+"',"
				+"'"+POut.Double(ehrLabResult.ObservationValueNumber1)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueSeparatorOrSuffix)+"',"
				+"'"+POut.Double(ehrLabResult.ObservationValueNumber2)+"',"
				+"'"+POut.Double(ehrLabResult.ObservationValueNumeric)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueText)+"',"
				+"'"+POut.String(ehrLabResult.UnitsID)+"',"
				+"'"+POut.String(ehrLabResult.UnitsText)+"',"
				+"'"+POut.String(ehrLabResult.UnitsCodeSystemName)+"',"
				+"'"+POut.String(ehrLabResult.UnitsIDAlt)+"',"
				+"'"+POut.String(ehrLabResult.UnitsTextAlt)+"',"
				+"'"+POut.String(ehrLabResult.UnitsCodeSystemNameAlt)+"',"
				+"'"+POut.String(ehrLabResult.UnitsTextOriginal)+"',"
				+"'"+POut.String(ehrLabResult.referenceRange)+"',"
				+"'"+POut.String(ehrLabResult.AbnormalFlags)+"',"
				+"'"+POut.String(ehrLabResult.ObservationResultStatus.ToString())+"',"
				+"'"+POut.String(ehrLabResult.ObservationDateTime)+"',"
				+"'"+POut.String(ehrLabResult.AnalysisDateTime)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationName)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationNameAssigningAuthorityNamespaceId)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalId)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalIdType)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationIdentifierTypeCode.ToString())+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationIdentifier)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationAddressStreet)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationAddressOtherDesignation)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationAddressCity)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationAddressStateOrProvince.ToString())+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationAddressZipOrPostalCode)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationAddressCountryCode)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationAddressAddressType.ToString())+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationAddressCountyOrParishCode)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorID)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorLName)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorFName)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorMiddleNames)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorSuffix)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorPrefix)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorAssigningAuthorityNamespaceID)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorAssigningAuthorityUniversalID)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorAssigningAuthorityIDType)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorNameTypeCode.ToString())+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorIdentifierTypeCode.ToString())+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				ehrLabResult.EhrLabResultNum=Db.NonQ(command,true,"EhrLabResultNum","ehrLabResult");
			}
			return ehrLabResult.EhrLabResultNum;
		}

		///<summary>Inserts one EhrLabResult into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(EhrLabResult ehrLabResult){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(ehrLabResult,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					ehrLabResult.EhrLabResultNum=DbHelper.GetNextOracleKey("ehrlabresult","EhrLabResultNum"); //Cacheless method
				}
				return InsertNoCache(ehrLabResult,true);
			}
		}

		///<summary>Inserts one EhrLabResult into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(EhrLabResult ehrLabResult,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO ehrlabresult (";
			if(!useExistingPK && isRandomKeys) {
				ehrLabResult.EhrLabResultNum=ReplicationServers.GetKeyNoCache("ehrlabresult","EhrLabResultNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="EhrLabResultNum,";
			}
			command+="EhrLabNum,SetIdOBX,ValueType,ObservationIdentifierID,ObservationIdentifierText,ObservationIdentifierCodeSystemName,ObservationIdentifierIDAlt,ObservationIdentifierTextAlt,ObservationIdentifierCodeSystemNameAlt,ObservationIdentifierTextOriginal,ObservationIdentifierSub,ObservationValueCodedElementID,ObservationValueCodedElementText,ObservationValueCodedElementCodeSystemName,ObservationValueCodedElementIDAlt,ObservationValueCodedElementTextAlt,ObservationValueCodedElementCodeSystemNameAlt,ObservationValueCodedElementTextOriginal,ObservationValueDateTime,ObservationValueTime,ObservationValueComparator,ObservationValueNumber1,ObservationValueSeparatorOrSuffix,ObservationValueNumber2,ObservationValueNumeric,ObservationValueText,UnitsID,UnitsText,UnitsCodeSystemName,UnitsIDAlt,UnitsTextAlt,UnitsCodeSystemNameAlt,UnitsTextOriginal,referenceRange,AbnormalFlags,ObservationResultStatus,ObservationDateTime,AnalysisDateTime,PerformingOrganizationName,PerformingOrganizationNameAssigningAuthorityNamespaceId,PerformingOrganizationNameAssigningAuthorityUniversalId,PerformingOrganizationNameAssigningAuthorityUniversalIdType,PerformingOrganizationIdentifierTypeCode,PerformingOrganizationIdentifier,PerformingOrganizationAddressStreet,PerformingOrganizationAddressOtherDesignation,PerformingOrganizationAddressCity,PerformingOrganizationAddressStateOrProvince,PerformingOrganizationAddressZipOrPostalCode,PerformingOrganizationAddressCountryCode,PerformingOrganizationAddressAddressType,PerformingOrganizationAddressCountyOrParishCode,MedicalDirectorID,MedicalDirectorLName,MedicalDirectorFName,MedicalDirectorMiddleNames,MedicalDirectorSuffix,MedicalDirectorPrefix,MedicalDirectorAssigningAuthorityNamespaceID,MedicalDirectorAssigningAuthorityUniversalID,MedicalDirectorAssigningAuthorityIDType,MedicalDirectorNameTypeCode,MedicalDirectorIdentifierTypeCode) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(ehrLabResult.EhrLabResultNum)+",";
			}
			command+=
				     POut.Long  (ehrLabResult.EhrLabNum)+","
				+    POut.Long  (ehrLabResult.SetIdOBX)+","
				+"'"+POut.String(ehrLabResult.ValueType.ToString())+"',"
				+"'"+POut.String(ehrLabResult.ObservationIdentifierID)+"',"
				+"'"+POut.String(ehrLabResult.ObservationIdentifierText)+"',"
				+"'"+POut.String(ehrLabResult.ObservationIdentifierCodeSystemName)+"',"
				+"'"+POut.String(ehrLabResult.ObservationIdentifierIDAlt)+"',"
				+"'"+POut.String(ehrLabResult.ObservationIdentifierTextAlt)+"',"
				+"'"+POut.String(ehrLabResult.ObservationIdentifierCodeSystemNameAlt)+"',"
				+"'"+POut.String(ehrLabResult.ObservationIdentifierTextOriginal)+"',"
				+"'"+POut.String(ehrLabResult.ObservationIdentifierSub)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueCodedElementID)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueCodedElementText)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueCodedElementCodeSystemName)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueCodedElementIDAlt)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueCodedElementTextAlt)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueCodedElementCodeSystemNameAlt)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueCodedElementTextOriginal)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueDateTime)+"',"
				+    POut.Time  (ehrLabResult.ObservationValueTime)+","
				+"'"+POut.String(ehrLabResult.ObservationValueComparator)+"',"
				+"'"+POut.Double(ehrLabResult.ObservationValueNumber1)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueSeparatorOrSuffix)+"',"
				+"'"+POut.Double(ehrLabResult.ObservationValueNumber2)+"',"
				+"'"+POut.Double(ehrLabResult.ObservationValueNumeric)+"',"
				+"'"+POut.String(ehrLabResult.ObservationValueText)+"',"
				+"'"+POut.String(ehrLabResult.UnitsID)+"',"
				+"'"+POut.String(ehrLabResult.UnitsText)+"',"
				+"'"+POut.String(ehrLabResult.UnitsCodeSystemName)+"',"
				+"'"+POut.String(ehrLabResult.UnitsIDAlt)+"',"
				+"'"+POut.String(ehrLabResult.UnitsTextAlt)+"',"
				+"'"+POut.String(ehrLabResult.UnitsCodeSystemNameAlt)+"',"
				+"'"+POut.String(ehrLabResult.UnitsTextOriginal)+"',"
				+"'"+POut.String(ehrLabResult.referenceRange)+"',"
				+"'"+POut.String(ehrLabResult.AbnormalFlags)+"',"
				+"'"+POut.String(ehrLabResult.ObservationResultStatus.ToString())+"',"
				+"'"+POut.String(ehrLabResult.ObservationDateTime)+"',"
				+"'"+POut.String(ehrLabResult.AnalysisDateTime)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationName)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationNameAssigningAuthorityNamespaceId)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalId)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalIdType)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationIdentifierTypeCode.ToString())+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationIdentifier)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationAddressStreet)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationAddressOtherDesignation)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationAddressCity)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationAddressStateOrProvince.ToString())+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationAddressZipOrPostalCode)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationAddressCountryCode)+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationAddressAddressType.ToString())+"',"
				+"'"+POut.String(ehrLabResult.PerformingOrganizationAddressCountyOrParishCode)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorID)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorLName)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorFName)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorMiddleNames)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorSuffix)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorPrefix)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorAssigningAuthorityNamespaceID)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorAssigningAuthorityUniversalID)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorAssigningAuthorityIDType)+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorNameTypeCode.ToString())+"',"
				+"'"+POut.String(ehrLabResult.MedicalDirectorIdentifierTypeCode.ToString())+"')";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				ehrLabResult.EhrLabResultNum=Db.NonQ(command,true,"EhrLabResultNum","ehrLabResult");
			}
			return ehrLabResult.EhrLabResultNum;
		}

		///<summary>Updates one EhrLabResult in the database.</summary>
		public static void Update(EhrLabResult ehrLabResult){
			string command="UPDATE ehrlabresult SET "
				+"EhrLabNum                                                  =  "+POut.Long  (ehrLabResult.EhrLabNum)+", "
				+"SetIdOBX                                                   =  "+POut.Long  (ehrLabResult.SetIdOBX)+", "
				+"ValueType                                                  = '"+POut.String(ehrLabResult.ValueType.ToString())+"', "
				+"ObservationIdentifierID                                    = '"+POut.String(ehrLabResult.ObservationIdentifierID)+"', "
				+"ObservationIdentifierText                                  = '"+POut.String(ehrLabResult.ObservationIdentifierText)+"', "
				+"ObservationIdentifierCodeSystemName                        = '"+POut.String(ehrLabResult.ObservationIdentifierCodeSystemName)+"', "
				+"ObservationIdentifierIDAlt                                 = '"+POut.String(ehrLabResult.ObservationIdentifierIDAlt)+"', "
				+"ObservationIdentifierTextAlt                               = '"+POut.String(ehrLabResult.ObservationIdentifierTextAlt)+"', "
				+"ObservationIdentifierCodeSystemNameAlt                     = '"+POut.String(ehrLabResult.ObservationIdentifierCodeSystemNameAlt)+"', "
				+"ObservationIdentifierTextOriginal                          = '"+POut.String(ehrLabResult.ObservationIdentifierTextOriginal)+"', "
				+"ObservationIdentifierSub                                   = '"+POut.String(ehrLabResult.ObservationIdentifierSub)+"', "
				+"ObservationValueCodedElementID                             = '"+POut.String(ehrLabResult.ObservationValueCodedElementID)+"', "
				+"ObservationValueCodedElementText                           = '"+POut.String(ehrLabResult.ObservationValueCodedElementText)+"', "
				+"ObservationValueCodedElementCodeSystemName                 = '"+POut.String(ehrLabResult.ObservationValueCodedElementCodeSystemName)+"', "
				+"ObservationValueCodedElementIDAlt                          = '"+POut.String(ehrLabResult.ObservationValueCodedElementIDAlt)+"', "
				+"ObservationValueCodedElementTextAlt                        = '"+POut.String(ehrLabResult.ObservationValueCodedElementTextAlt)+"', "
				+"ObservationValueCodedElementCodeSystemNameAlt              = '"+POut.String(ehrLabResult.ObservationValueCodedElementCodeSystemNameAlt)+"', "
				+"ObservationValueCodedElementTextOriginal                   = '"+POut.String(ehrLabResult.ObservationValueCodedElementTextOriginal)+"', "
				+"ObservationValueDateTime                                   = '"+POut.String(ehrLabResult.ObservationValueDateTime)+"', "
				+"ObservationValueTime                                       =  "+POut.Time  (ehrLabResult.ObservationValueTime)+", "
				+"ObservationValueComparator                                 = '"+POut.String(ehrLabResult.ObservationValueComparator)+"', "
				+"ObservationValueNumber1                                    = '"+POut.Double(ehrLabResult.ObservationValueNumber1)+"', "
				+"ObservationValueSeparatorOrSuffix                          = '"+POut.String(ehrLabResult.ObservationValueSeparatorOrSuffix)+"', "
				+"ObservationValueNumber2                                    = '"+POut.Double(ehrLabResult.ObservationValueNumber2)+"', "
				+"ObservationValueNumeric                                    = '"+POut.Double(ehrLabResult.ObservationValueNumeric)+"', "
				+"ObservationValueText                                       = '"+POut.String(ehrLabResult.ObservationValueText)+"', "
				+"UnitsID                                                    = '"+POut.String(ehrLabResult.UnitsID)+"', "
				+"UnitsText                                                  = '"+POut.String(ehrLabResult.UnitsText)+"', "
				+"UnitsCodeSystemName                                        = '"+POut.String(ehrLabResult.UnitsCodeSystemName)+"', "
				+"UnitsIDAlt                                                 = '"+POut.String(ehrLabResult.UnitsIDAlt)+"', "
				+"UnitsTextAlt                                               = '"+POut.String(ehrLabResult.UnitsTextAlt)+"', "
				+"UnitsCodeSystemNameAlt                                     = '"+POut.String(ehrLabResult.UnitsCodeSystemNameAlt)+"', "
				+"UnitsTextOriginal                                          = '"+POut.String(ehrLabResult.UnitsTextOriginal)+"', "
				+"referenceRange                                             = '"+POut.String(ehrLabResult.referenceRange)+"', "
				+"AbnormalFlags                                              = '"+POut.String(ehrLabResult.AbnormalFlags)+"', "
				+"ObservationResultStatus                                    = '"+POut.String(ehrLabResult.ObservationResultStatus.ToString())+"', "
				+"ObservationDateTime                                        = '"+POut.String(ehrLabResult.ObservationDateTime)+"', "
				+"AnalysisDateTime                                           = '"+POut.String(ehrLabResult.AnalysisDateTime)+"', "
				+"PerformingOrganizationName                                 = '"+POut.String(ehrLabResult.PerformingOrganizationName)+"', "
				+"PerformingOrganizationNameAssigningAuthorityNamespaceId    = '"+POut.String(ehrLabResult.PerformingOrganizationNameAssigningAuthorityNamespaceId)+"', "
				+"PerformingOrganizationNameAssigningAuthorityUniversalId    = '"+POut.String(ehrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalId)+"', "
				+"PerformingOrganizationNameAssigningAuthorityUniversalIdType= '"+POut.String(ehrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalIdType)+"', "
				+"PerformingOrganizationIdentifierTypeCode                   = '"+POut.String(ehrLabResult.PerformingOrganizationIdentifierTypeCode.ToString())+"', "
				+"PerformingOrganizationIdentifier                           = '"+POut.String(ehrLabResult.PerformingOrganizationIdentifier)+"', "
				+"PerformingOrganizationAddressStreet                        = '"+POut.String(ehrLabResult.PerformingOrganizationAddressStreet)+"', "
				+"PerformingOrganizationAddressOtherDesignation              = '"+POut.String(ehrLabResult.PerformingOrganizationAddressOtherDesignation)+"', "
				+"PerformingOrganizationAddressCity                          = '"+POut.String(ehrLabResult.PerformingOrganizationAddressCity)+"', "
				+"PerformingOrganizationAddressStateOrProvince               = '"+POut.String(ehrLabResult.PerformingOrganizationAddressStateOrProvince.ToString())+"', "
				+"PerformingOrganizationAddressZipOrPostalCode               = '"+POut.String(ehrLabResult.PerformingOrganizationAddressZipOrPostalCode)+"', "
				+"PerformingOrganizationAddressCountryCode                   = '"+POut.String(ehrLabResult.PerformingOrganizationAddressCountryCode)+"', "
				+"PerformingOrganizationAddressAddressType                   = '"+POut.String(ehrLabResult.PerformingOrganizationAddressAddressType.ToString())+"', "
				+"PerformingOrganizationAddressCountyOrParishCode            = '"+POut.String(ehrLabResult.PerformingOrganizationAddressCountyOrParishCode)+"', "
				+"MedicalDirectorID                                          = '"+POut.String(ehrLabResult.MedicalDirectorID)+"', "
				+"MedicalDirectorLName                                       = '"+POut.String(ehrLabResult.MedicalDirectorLName)+"', "
				+"MedicalDirectorFName                                       = '"+POut.String(ehrLabResult.MedicalDirectorFName)+"', "
				+"MedicalDirectorMiddleNames                                 = '"+POut.String(ehrLabResult.MedicalDirectorMiddleNames)+"', "
				+"MedicalDirectorSuffix                                      = '"+POut.String(ehrLabResult.MedicalDirectorSuffix)+"', "
				+"MedicalDirectorPrefix                                      = '"+POut.String(ehrLabResult.MedicalDirectorPrefix)+"', "
				+"MedicalDirectorAssigningAuthorityNamespaceID               = '"+POut.String(ehrLabResult.MedicalDirectorAssigningAuthorityNamespaceID)+"', "
				+"MedicalDirectorAssigningAuthorityUniversalID               = '"+POut.String(ehrLabResult.MedicalDirectorAssigningAuthorityUniversalID)+"', "
				+"MedicalDirectorAssigningAuthorityIDType                    = '"+POut.String(ehrLabResult.MedicalDirectorAssigningAuthorityIDType)+"', "
				+"MedicalDirectorNameTypeCode                                = '"+POut.String(ehrLabResult.MedicalDirectorNameTypeCode.ToString())+"', "
				+"MedicalDirectorIdentifierTypeCode                          = '"+POut.String(ehrLabResult.MedicalDirectorIdentifierTypeCode.ToString())+"' "
				+"WHERE EhrLabResultNum = "+POut.Long(ehrLabResult.EhrLabResultNum);
			Db.NonQ(command);
		}

		///<summary>Updates one EhrLabResult in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(EhrLabResult ehrLabResult,EhrLabResult oldEhrLabResult){
			string command="";
			if(ehrLabResult.EhrLabNum != oldEhrLabResult.EhrLabNum) {
				if(command!=""){ command+=",";}
				command+="EhrLabNum = "+POut.Long(ehrLabResult.EhrLabNum)+"";
			}
			if(ehrLabResult.SetIdOBX != oldEhrLabResult.SetIdOBX) {
				if(command!=""){ command+=",";}
				command+="SetIdOBX = "+POut.Long(ehrLabResult.SetIdOBX)+"";
			}
			if(ehrLabResult.ValueType != oldEhrLabResult.ValueType) {
				if(command!=""){ command+=",";}
				command+="ValueType = '"+POut.String(ehrLabResult.ValueType.ToString())+"'";
			}
			if(ehrLabResult.ObservationIdentifierID != oldEhrLabResult.ObservationIdentifierID) {
				if(command!=""){ command+=",";}
				command+="ObservationIdentifierID = '"+POut.String(ehrLabResult.ObservationIdentifierID)+"'";
			}
			if(ehrLabResult.ObservationIdentifierText != oldEhrLabResult.ObservationIdentifierText) {
				if(command!=""){ command+=",";}
				command+="ObservationIdentifierText = '"+POut.String(ehrLabResult.ObservationIdentifierText)+"'";
			}
			if(ehrLabResult.ObservationIdentifierCodeSystemName != oldEhrLabResult.ObservationIdentifierCodeSystemName) {
				if(command!=""){ command+=",";}
				command+="ObservationIdentifierCodeSystemName = '"+POut.String(ehrLabResult.ObservationIdentifierCodeSystemName)+"'";
			}
			if(ehrLabResult.ObservationIdentifierIDAlt != oldEhrLabResult.ObservationIdentifierIDAlt) {
				if(command!=""){ command+=",";}
				command+="ObservationIdentifierIDAlt = '"+POut.String(ehrLabResult.ObservationIdentifierIDAlt)+"'";
			}
			if(ehrLabResult.ObservationIdentifierTextAlt != oldEhrLabResult.ObservationIdentifierTextAlt) {
				if(command!=""){ command+=",";}
				command+="ObservationIdentifierTextAlt = '"+POut.String(ehrLabResult.ObservationIdentifierTextAlt)+"'";
			}
			if(ehrLabResult.ObservationIdentifierCodeSystemNameAlt != oldEhrLabResult.ObservationIdentifierCodeSystemNameAlt) {
				if(command!=""){ command+=",";}
				command+="ObservationIdentifierCodeSystemNameAlt = '"+POut.String(ehrLabResult.ObservationIdentifierCodeSystemNameAlt)+"'";
			}
			if(ehrLabResult.ObservationIdentifierTextOriginal != oldEhrLabResult.ObservationIdentifierTextOriginal) {
				if(command!=""){ command+=",";}
				command+="ObservationIdentifierTextOriginal = '"+POut.String(ehrLabResult.ObservationIdentifierTextOriginal)+"'";
			}
			if(ehrLabResult.ObservationIdentifierSub != oldEhrLabResult.ObservationIdentifierSub) {
				if(command!=""){ command+=",";}
				command+="ObservationIdentifierSub = '"+POut.String(ehrLabResult.ObservationIdentifierSub)+"'";
			}
			if(ehrLabResult.ObservationValueCodedElementID != oldEhrLabResult.ObservationValueCodedElementID) {
				if(command!=""){ command+=",";}
				command+="ObservationValueCodedElementID = '"+POut.String(ehrLabResult.ObservationValueCodedElementID)+"'";
			}
			if(ehrLabResult.ObservationValueCodedElementText != oldEhrLabResult.ObservationValueCodedElementText) {
				if(command!=""){ command+=",";}
				command+="ObservationValueCodedElementText = '"+POut.String(ehrLabResult.ObservationValueCodedElementText)+"'";
			}
			if(ehrLabResult.ObservationValueCodedElementCodeSystemName != oldEhrLabResult.ObservationValueCodedElementCodeSystemName) {
				if(command!=""){ command+=",";}
				command+="ObservationValueCodedElementCodeSystemName = '"+POut.String(ehrLabResult.ObservationValueCodedElementCodeSystemName)+"'";
			}
			if(ehrLabResult.ObservationValueCodedElementIDAlt != oldEhrLabResult.ObservationValueCodedElementIDAlt) {
				if(command!=""){ command+=",";}
				command+="ObservationValueCodedElementIDAlt = '"+POut.String(ehrLabResult.ObservationValueCodedElementIDAlt)+"'";
			}
			if(ehrLabResult.ObservationValueCodedElementTextAlt != oldEhrLabResult.ObservationValueCodedElementTextAlt) {
				if(command!=""){ command+=",";}
				command+="ObservationValueCodedElementTextAlt = '"+POut.String(ehrLabResult.ObservationValueCodedElementTextAlt)+"'";
			}
			if(ehrLabResult.ObservationValueCodedElementCodeSystemNameAlt != oldEhrLabResult.ObservationValueCodedElementCodeSystemNameAlt) {
				if(command!=""){ command+=",";}
				command+="ObservationValueCodedElementCodeSystemNameAlt = '"+POut.String(ehrLabResult.ObservationValueCodedElementCodeSystemNameAlt)+"'";
			}
			if(ehrLabResult.ObservationValueCodedElementTextOriginal != oldEhrLabResult.ObservationValueCodedElementTextOriginal) {
				if(command!=""){ command+=",";}
				command+="ObservationValueCodedElementTextOriginal = '"+POut.String(ehrLabResult.ObservationValueCodedElementTextOriginal)+"'";
			}
			if(ehrLabResult.ObservationValueDateTime != oldEhrLabResult.ObservationValueDateTime) {
				if(command!=""){ command+=",";}
				command+="ObservationValueDateTime = '"+POut.String(ehrLabResult.ObservationValueDateTime)+"'";
			}
			if(ehrLabResult.ObservationValueTime != oldEhrLabResult.ObservationValueTime) {
				if(command!=""){ command+=",";}
				command+="ObservationValueTime = "+POut.Time  (ehrLabResult.ObservationValueTime)+"";
			}
			if(ehrLabResult.ObservationValueComparator != oldEhrLabResult.ObservationValueComparator) {
				if(command!=""){ command+=",";}
				command+="ObservationValueComparator = '"+POut.String(ehrLabResult.ObservationValueComparator)+"'";
			}
			if(ehrLabResult.ObservationValueNumber1 != oldEhrLabResult.ObservationValueNumber1) {
				if(command!=""){ command+=",";}
				command+="ObservationValueNumber1 = '"+POut.Double(ehrLabResult.ObservationValueNumber1)+"'";
			}
			if(ehrLabResult.ObservationValueSeparatorOrSuffix != oldEhrLabResult.ObservationValueSeparatorOrSuffix) {
				if(command!=""){ command+=",";}
				command+="ObservationValueSeparatorOrSuffix = '"+POut.String(ehrLabResult.ObservationValueSeparatorOrSuffix)+"'";
			}
			if(ehrLabResult.ObservationValueNumber2 != oldEhrLabResult.ObservationValueNumber2) {
				if(command!=""){ command+=",";}
				command+="ObservationValueNumber2 = '"+POut.Double(ehrLabResult.ObservationValueNumber2)+"'";
			}
			if(ehrLabResult.ObservationValueNumeric != oldEhrLabResult.ObservationValueNumeric) {
				if(command!=""){ command+=",";}
				command+="ObservationValueNumeric = '"+POut.Double(ehrLabResult.ObservationValueNumeric)+"'";
			}
			if(ehrLabResult.ObservationValueText != oldEhrLabResult.ObservationValueText) {
				if(command!=""){ command+=",";}
				command+="ObservationValueText = '"+POut.String(ehrLabResult.ObservationValueText)+"'";
			}
			if(ehrLabResult.UnitsID != oldEhrLabResult.UnitsID) {
				if(command!=""){ command+=",";}
				command+="UnitsID = '"+POut.String(ehrLabResult.UnitsID)+"'";
			}
			if(ehrLabResult.UnitsText != oldEhrLabResult.UnitsText) {
				if(command!=""){ command+=",";}
				command+="UnitsText = '"+POut.String(ehrLabResult.UnitsText)+"'";
			}
			if(ehrLabResult.UnitsCodeSystemName != oldEhrLabResult.UnitsCodeSystemName) {
				if(command!=""){ command+=",";}
				command+="UnitsCodeSystemName = '"+POut.String(ehrLabResult.UnitsCodeSystemName)+"'";
			}
			if(ehrLabResult.UnitsIDAlt != oldEhrLabResult.UnitsIDAlt) {
				if(command!=""){ command+=",";}
				command+="UnitsIDAlt = '"+POut.String(ehrLabResult.UnitsIDAlt)+"'";
			}
			if(ehrLabResult.UnitsTextAlt != oldEhrLabResult.UnitsTextAlt) {
				if(command!=""){ command+=",";}
				command+="UnitsTextAlt = '"+POut.String(ehrLabResult.UnitsTextAlt)+"'";
			}
			if(ehrLabResult.UnitsCodeSystemNameAlt != oldEhrLabResult.UnitsCodeSystemNameAlt) {
				if(command!=""){ command+=",";}
				command+="UnitsCodeSystemNameAlt = '"+POut.String(ehrLabResult.UnitsCodeSystemNameAlt)+"'";
			}
			if(ehrLabResult.UnitsTextOriginal != oldEhrLabResult.UnitsTextOriginal) {
				if(command!=""){ command+=",";}
				command+="UnitsTextOriginal = '"+POut.String(ehrLabResult.UnitsTextOriginal)+"'";
			}
			if(ehrLabResult.referenceRange != oldEhrLabResult.referenceRange) {
				if(command!=""){ command+=",";}
				command+="referenceRange = '"+POut.String(ehrLabResult.referenceRange)+"'";
			}
			if(ehrLabResult.AbnormalFlags != oldEhrLabResult.AbnormalFlags) {
				if(command!=""){ command+=",";}
				command+="AbnormalFlags = '"+POut.String(ehrLabResult.AbnormalFlags)+"'";
			}
			if(ehrLabResult.ObservationResultStatus != oldEhrLabResult.ObservationResultStatus) {
				if(command!=""){ command+=",";}
				command+="ObservationResultStatus = '"+POut.String(ehrLabResult.ObservationResultStatus.ToString())+"'";
			}
			if(ehrLabResult.ObservationDateTime != oldEhrLabResult.ObservationDateTime) {
				if(command!=""){ command+=",";}
				command+="ObservationDateTime = '"+POut.String(ehrLabResult.ObservationDateTime)+"'";
			}
			if(ehrLabResult.AnalysisDateTime != oldEhrLabResult.AnalysisDateTime) {
				if(command!=""){ command+=",";}
				command+="AnalysisDateTime = '"+POut.String(ehrLabResult.AnalysisDateTime)+"'";
			}
			if(ehrLabResult.PerformingOrganizationName != oldEhrLabResult.PerformingOrganizationName) {
				if(command!=""){ command+=",";}
				command+="PerformingOrganizationName = '"+POut.String(ehrLabResult.PerformingOrganizationName)+"'";
			}
			if(ehrLabResult.PerformingOrganizationNameAssigningAuthorityNamespaceId != oldEhrLabResult.PerformingOrganizationNameAssigningAuthorityNamespaceId) {
				if(command!=""){ command+=",";}
				command+="PerformingOrganizationNameAssigningAuthorityNamespaceId = '"+POut.String(ehrLabResult.PerformingOrganizationNameAssigningAuthorityNamespaceId)+"'";
			}
			if(ehrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalId != oldEhrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalId) {
				if(command!=""){ command+=",";}
				command+="PerformingOrganizationNameAssigningAuthorityUniversalId = '"+POut.String(ehrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalId)+"'";
			}
			if(ehrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalIdType != oldEhrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalIdType) {
				if(command!=""){ command+=",";}
				command+="PerformingOrganizationNameAssigningAuthorityUniversalIdType = '"+POut.String(ehrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalIdType)+"'";
			}
			if(ehrLabResult.PerformingOrganizationIdentifierTypeCode != oldEhrLabResult.PerformingOrganizationIdentifierTypeCode) {
				if(command!=""){ command+=",";}
				command+="PerformingOrganizationIdentifierTypeCode = '"+POut.String(ehrLabResult.PerformingOrganizationIdentifierTypeCode.ToString())+"'";
			}
			if(ehrLabResult.PerformingOrganizationIdentifier != oldEhrLabResult.PerformingOrganizationIdentifier) {
				if(command!=""){ command+=",";}
				command+="PerformingOrganizationIdentifier = '"+POut.String(ehrLabResult.PerformingOrganizationIdentifier)+"'";
			}
			if(ehrLabResult.PerformingOrganizationAddressStreet != oldEhrLabResult.PerformingOrganizationAddressStreet) {
				if(command!=""){ command+=",";}
				command+="PerformingOrganizationAddressStreet = '"+POut.String(ehrLabResult.PerformingOrganizationAddressStreet)+"'";
			}
			if(ehrLabResult.PerformingOrganizationAddressOtherDesignation != oldEhrLabResult.PerformingOrganizationAddressOtherDesignation) {
				if(command!=""){ command+=",";}
				command+="PerformingOrganizationAddressOtherDesignation = '"+POut.String(ehrLabResult.PerformingOrganizationAddressOtherDesignation)+"'";
			}
			if(ehrLabResult.PerformingOrganizationAddressCity != oldEhrLabResult.PerformingOrganizationAddressCity) {
				if(command!=""){ command+=",";}
				command+="PerformingOrganizationAddressCity = '"+POut.String(ehrLabResult.PerformingOrganizationAddressCity)+"'";
			}
			if(ehrLabResult.PerformingOrganizationAddressStateOrProvince != oldEhrLabResult.PerformingOrganizationAddressStateOrProvince) {
				if(command!=""){ command+=",";}
				command+="PerformingOrganizationAddressStateOrProvince = '"+POut.String(ehrLabResult.PerformingOrganizationAddressStateOrProvince.ToString())+"'";
			}
			if(ehrLabResult.PerformingOrganizationAddressZipOrPostalCode != oldEhrLabResult.PerformingOrganizationAddressZipOrPostalCode) {
				if(command!=""){ command+=",";}
				command+="PerformingOrganizationAddressZipOrPostalCode = '"+POut.String(ehrLabResult.PerformingOrganizationAddressZipOrPostalCode)+"'";
			}
			if(ehrLabResult.PerformingOrganizationAddressCountryCode != oldEhrLabResult.PerformingOrganizationAddressCountryCode) {
				if(command!=""){ command+=",";}
				command+="PerformingOrganizationAddressCountryCode = '"+POut.String(ehrLabResult.PerformingOrganizationAddressCountryCode)+"'";
			}
			if(ehrLabResult.PerformingOrganizationAddressAddressType != oldEhrLabResult.PerformingOrganizationAddressAddressType) {
				if(command!=""){ command+=",";}
				command+="PerformingOrganizationAddressAddressType = '"+POut.String(ehrLabResult.PerformingOrganizationAddressAddressType.ToString())+"'";
			}
			if(ehrLabResult.PerformingOrganizationAddressCountyOrParishCode != oldEhrLabResult.PerformingOrganizationAddressCountyOrParishCode) {
				if(command!=""){ command+=",";}
				command+="PerformingOrganizationAddressCountyOrParishCode = '"+POut.String(ehrLabResult.PerformingOrganizationAddressCountyOrParishCode)+"'";
			}
			if(ehrLabResult.MedicalDirectorID != oldEhrLabResult.MedicalDirectorID) {
				if(command!=""){ command+=",";}
				command+="MedicalDirectorID = '"+POut.String(ehrLabResult.MedicalDirectorID)+"'";
			}
			if(ehrLabResult.MedicalDirectorLName != oldEhrLabResult.MedicalDirectorLName) {
				if(command!=""){ command+=",";}
				command+="MedicalDirectorLName = '"+POut.String(ehrLabResult.MedicalDirectorLName)+"'";
			}
			if(ehrLabResult.MedicalDirectorFName != oldEhrLabResult.MedicalDirectorFName) {
				if(command!=""){ command+=",";}
				command+="MedicalDirectorFName = '"+POut.String(ehrLabResult.MedicalDirectorFName)+"'";
			}
			if(ehrLabResult.MedicalDirectorMiddleNames != oldEhrLabResult.MedicalDirectorMiddleNames) {
				if(command!=""){ command+=",";}
				command+="MedicalDirectorMiddleNames = '"+POut.String(ehrLabResult.MedicalDirectorMiddleNames)+"'";
			}
			if(ehrLabResult.MedicalDirectorSuffix != oldEhrLabResult.MedicalDirectorSuffix) {
				if(command!=""){ command+=",";}
				command+="MedicalDirectorSuffix = '"+POut.String(ehrLabResult.MedicalDirectorSuffix)+"'";
			}
			if(ehrLabResult.MedicalDirectorPrefix != oldEhrLabResult.MedicalDirectorPrefix) {
				if(command!=""){ command+=",";}
				command+="MedicalDirectorPrefix = '"+POut.String(ehrLabResult.MedicalDirectorPrefix)+"'";
			}
			if(ehrLabResult.MedicalDirectorAssigningAuthorityNamespaceID != oldEhrLabResult.MedicalDirectorAssigningAuthorityNamespaceID) {
				if(command!=""){ command+=",";}
				command+="MedicalDirectorAssigningAuthorityNamespaceID = '"+POut.String(ehrLabResult.MedicalDirectorAssigningAuthorityNamespaceID)+"'";
			}
			if(ehrLabResult.MedicalDirectorAssigningAuthorityUniversalID != oldEhrLabResult.MedicalDirectorAssigningAuthorityUniversalID) {
				if(command!=""){ command+=",";}
				command+="MedicalDirectorAssigningAuthorityUniversalID = '"+POut.String(ehrLabResult.MedicalDirectorAssigningAuthorityUniversalID)+"'";
			}
			if(ehrLabResult.MedicalDirectorAssigningAuthorityIDType != oldEhrLabResult.MedicalDirectorAssigningAuthorityIDType) {
				if(command!=""){ command+=",";}
				command+="MedicalDirectorAssigningAuthorityIDType = '"+POut.String(ehrLabResult.MedicalDirectorAssigningAuthorityIDType)+"'";
			}
			if(ehrLabResult.MedicalDirectorNameTypeCode != oldEhrLabResult.MedicalDirectorNameTypeCode) {
				if(command!=""){ command+=",";}
				command+="MedicalDirectorNameTypeCode = '"+POut.String(ehrLabResult.MedicalDirectorNameTypeCode.ToString())+"'";
			}
			if(ehrLabResult.MedicalDirectorIdentifierTypeCode != oldEhrLabResult.MedicalDirectorIdentifierTypeCode) {
				if(command!=""){ command+=",";}
				command+="MedicalDirectorIdentifierTypeCode = '"+POut.String(ehrLabResult.MedicalDirectorIdentifierTypeCode.ToString())+"'";
			}
			if(command==""){
				return false;
			}
			command="UPDATE ehrlabresult SET "+command
				+" WHERE EhrLabResultNum = "+POut.Long(ehrLabResult.EhrLabResultNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(EhrLabResult,EhrLabResult) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(EhrLabResult ehrLabResult,EhrLabResult oldEhrLabResult) {
			if(ehrLabResult.EhrLabNum != oldEhrLabResult.EhrLabNum) {
				return true;
			}
			if(ehrLabResult.SetIdOBX != oldEhrLabResult.SetIdOBX) {
				return true;
			}
			if(ehrLabResult.ValueType != oldEhrLabResult.ValueType) {
				return true;
			}
			if(ehrLabResult.ObservationIdentifierID != oldEhrLabResult.ObservationIdentifierID) {
				return true;
			}
			if(ehrLabResult.ObservationIdentifierText != oldEhrLabResult.ObservationIdentifierText) {
				return true;
			}
			if(ehrLabResult.ObservationIdentifierCodeSystemName != oldEhrLabResult.ObservationIdentifierCodeSystemName) {
				return true;
			}
			if(ehrLabResult.ObservationIdentifierIDAlt != oldEhrLabResult.ObservationIdentifierIDAlt) {
				return true;
			}
			if(ehrLabResult.ObservationIdentifierTextAlt != oldEhrLabResult.ObservationIdentifierTextAlt) {
				return true;
			}
			if(ehrLabResult.ObservationIdentifierCodeSystemNameAlt != oldEhrLabResult.ObservationIdentifierCodeSystemNameAlt) {
				return true;
			}
			if(ehrLabResult.ObservationIdentifierTextOriginal != oldEhrLabResult.ObservationIdentifierTextOriginal) {
				return true;
			}
			if(ehrLabResult.ObservationIdentifierSub != oldEhrLabResult.ObservationIdentifierSub) {
				return true;
			}
			if(ehrLabResult.ObservationValueCodedElementID != oldEhrLabResult.ObservationValueCodedElementID) {
				return true;
			}
			if(ehrLabResult.ObservationValueCodedElementText != oldEhrLabResult.ObservationValueCodedElementText) {
				return true;
			}
			if(ehrLabResult.ObservationValueCodedElementCodeSystemName != oldEhrLabResult.ObservationValueCodedElementCodeSystemName) {
				return true;
			}
			if(ehrLabResult.ObservationValueCodedElementIDAlt != oldEhrLabResult.ObservationValueCodedElementIDAlt) {
				return true;
			}
			if(ehrLabResult.ObservationValueCodedElementTextAlt != oldEhrLabResult.ObservationValueCodedElementTextAlt) {
				return true;
			}
			if(ehrLabResult.ObservationValueCodedElementCodeSystemNameAlt != oldEhrLabResult.ObservationValueCodedElementCodeSystemNameAlt) {
				return true;
			}
			if(ehrLabResult.ObservationValueCodedElementTextOriginal != oldEhrLabResult.ObservationValueCodedElementTextOriginal) {
				return true;
			}
			if(ehrLabResult.ObservationValueDateTime != oldEhrLabResult.ObservationValueDateTime) {
				return true;
			}
			if(ehrLabResult.ObservationValueTime != oldEhrLabResult.ObservationValueTime) {
				return true;
			}
			if(ehrLabResult.ObservationValueComparator != oldEhrLabResult.ObservationValueComparator) {
				return true;
			}
			if(ehrLabResult.ObservationValueNumber1 != oldEhrLabResult.ObservationValueNumber1) {
				return true;
			}
			if(ehrLabResult.ObservationValueSeparatorOrSuffix != oldEhrLabResult.ObservationValueSeparatorOrSuffix) {
				return true;
			}
			if(ehrLabResult.ObservationValueNumber2 != oldEhrLabResult.ObservationValueNumber2) {
				return true;
			}
			if(ehrLabResult.ObservationValueNumeric != oldEhrLabResult.ObservationValueNumeric) {
				return true;
			}
			if(ehrLabResult.ObservationValueText != oldEhrLabResult.ObservationValueText) {
				return true;
			}
			if(ehrLabResult.UnitsID != oldEhrLabResult.UnitsID) {
				return true;
			}
			if(ehrLabResult.UnitsText != oldEhrLabResult.UnitsText) {
				return true;
			}
			if(ehrLabResult.UnitsCodeSystemName != oldEhrLabResult.UnitsCodeSystemName) {
				return true;
			}
			if(ehrLabResult.UnitsIDAlt != oldEhrLabResult.UnitsIDAlt) {
				return true;
			}
			if(ehrLabResult.UnitsTextAlt != oldEhrLabResult.UnitsTextAlt) {
				return true;
			}
			if(ehrLabResult.UnitsCodeSystemNameAlt != oldEhrLabResult.UnitsCodeSystemNameAlt) {
				return true;
			}
			if(ehrLabResult.UnitsTextOriginal != oldEhrLabResult.UnitsTextOriginal) {
				return true;
			}
			if(ehrLabResult.referenceRange != oldEhrLabResult.referenceRange) {
				return true;
			}
			if(ehrLabResult.AbnormalFlags != oldEhrLabResult.AbnormalFlags) {
				return true;
			}
			if(ehrLabResult.ObservationResultStatus != oldEhrLabResult.ObservationResultStatus) {
				return true;
			}
			if(ehrLabResult.ObservationDateTime != oldEhrLabResult.ObservationDateTime) {
				return true;
			}
			if(ehrLabResult.AnalysisDateTime != oldEhrLabResult.AnalysisDateTime) {
				return true;
			}
			if(ehrLabResult.PerformingOrganizationName != oldEhrLabResult.PerformingOrganizationName) {
				return true;
			}
			if(ehrLabResult.PerformingOrganizationNameAssigningAuthorityNamespaceId != oldEhrLabResult.PerformingOrganizationNameAssigningAuthorityNamespaceId) {
				return true;
			}
			if(ehrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalId != oldEhrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalId) {
				return true;
			}
			if(ehrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalIdType != oldEhrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalIdType) {
				return true;
			}
			if(ehrLabResult.PerformingOrganizationIdentifierTypeCode != oldEhrLabResult.PerformingOrganizationIdentifierTypeCode) {
				return true;
			}
			if(ehrLabResult.PerformingOrganizationIdentifier != oldEhrLabResult.PerformingOrganizationIdentifier) {
				return true;
			}
			if(ehrLabResult.PerformingOrganizationAddressStreet != oldEhrLabResult.PerformingOrganizationAddressStreet) {
				return true;
			}
			if(ehrLabResult.PerformingOrganizationAddressOtherDesignation != oldEhrLabResult.PerformingOrganizationAddressOtherDesignation) {
				return true;
			}
			if(ehrLabResult.PerformingOrganizationAddressCity != oldEhrLabResult.PerformingOrganizationAddressCity) {
				return true;
			}
			if(ehrLabResult.PerformingOrganizationAddressStateOrProvince != oldEhrLabResult.PerformingOrganizationAddressStateOrProvince) {
				return true;
			}
			if(ehrLabResult.PerformingOrganizationAddressZipOrPostalCode != oldEhrLabResult.PerformingOrganizationAddressZipOrPostalCode) {
				return true;
			}
			if(ehrLabResult.PerformingOrganizationAddressCountryCode != oldEhrLabResult.PerformingOrganizationAddressCountryCode) {
				return true;
			}
			if(ehrLabResult.PerformingOrganizationAddressAddressType != oldEhrLabResult.PerformingOrganizationAddressAddressType) {
				return true;
			}
			if(ehrLabResult.PerformingOrganizationAddressCountyOrParishCode != oldEhrLabResult.PerformingOrganizationAddressCountyOrParishCode) {
				return true;
			}
			if(ehrLabResult.MedicalDirectorID != oldEhrLabResult.MedicalDirectorID) {
				return true;
			}
			if(ehrLabResult.MedicalDirectorLName != oldEhrLabResult.MedicalDirectorLName) {
				return true;
			}
			if(ehrLabResult.MedicalDirectorFName != oldEhrLabResult.MedicalDirectorFName) {
				return true;
			}
			if(ehrLabResult.MedicalDirectorMiddleNames != oldEhrLabResult.MedicalDirectorMiddleNames) {
				return true;
			}
			if(ehrLabResult.MedicalDirectorSuffix != oldEhrLabResult.MedicalDirectorSuffix) {
				return true;
			}
			if(ehrLabResult.MedicalDirectorPrefix != oldEhrLabResult.MedicalDirectorPrefix) {
				return true;
			}
			if(ehrLabResult.MedicalDirectorAssigningAuthorityNamespaceID != oldEhrLabResult.MedicalDirectorAssigningAuthorityNamespaceID) {
				return true;
			}
			if(ehrLabResult.MedicalDirectorAssigningAuthorityUniversalID != oldEhrLabResult.MedicalDirectorAssigningAuthorityUniversalID) {
				return true;
			}
			if(ehrLabResult.MedicalDirectorAssigningAuthorityIDType != oldEhrLabResult.MedicalDirectorAssigningAuthorityIDType) {
				return true;
			}
			if(ehrLabResult.MedicalDirectorNameTypeCode != oldEhrLabResult.MedicalDirectorNameTypeCode) {
				return true;
			}
			if(ehrLabResult.MedicalDirectorIdentifierTypeCode != oldEhrLabResult.MedicalDirectorIdentifierTypeCode) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one EhrLabResult from the database.</summary>
		public static void Delete(long ehrLabResultNum){
			string command="DELETE FROM ehrlabresult "
				+"WHERE EhrLabResultNum = "+POut.Long(ehrLabResultNum);
			Db.NonQ(command);
		}

	}
}