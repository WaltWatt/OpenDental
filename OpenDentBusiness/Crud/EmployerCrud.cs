//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class EmployerCrud {
		///<summary>Gets one Employer object from the database using the primary key.  Returns null if not found.</summary>
		public static Employer SelectOne(long employerNum){
			string command="SELECT * FROM employer "
				+"WHERE EmployerNum = "+POut.Long(employerNum);
			List<Employer> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Employer object from the database using a query.</summary>
		public static Employer SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Employer> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Employer objects from the database using a query.</summary>
		public static List<Employer> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Employer> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<Employer> TableToList(DataTable table){
			List<Employer> retVal=new List<Employer>();
			Employer employer;
			foreach(DataRow row in table.Rows) {
				employer=new Employer();
				employer.EmployerNum= PIn.Long  (row["EmployerNum"].ToString());
				employer.EmpName    = PIn.String(row["EmpName"].ToString());
				employer.Address    = PIn.String(row["Address"].ToString());
				employer.Address2   = PIn.String(row["Address2"].ToString());
				employer.City       = PIn.String(row["City"].ToString());
				employer.State      = PIn.String(row["State"].ToString());
				employer.Zip        = PIn.String(row["Zip"].ToString());
				employer.Phone      = PIn.String(row["Phone"].ToString());
				retVal.Add(employer);
			}
			return retVal;
		}

		///<summary>Converts a list of Employer into a DataTable.</summary>
		public static DataTable ListToTable(List<Employer> listEmployers,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="Employer";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("EmployerNum");
			table.Columns.Add("EmpName");
			table.Columns.Add("Address");
			table.Columns.Add("Address2");
			table.Columns.Add("City");
			table.Columns.Add("State");
			table.Columns.Add("Zip");
			table.Columns.Add("Phone");
			foreach(Employer employer in listEmployers) {
				table.Rows.Add(new object[] {
					POut.Long  (employer.EmployerNum),
					            employer.EmpName,
					            employer.Address,
					            employer.Address2,
					            employer.City,
					            employer.State,
					            employer.Zip,
					            employer.Phone,
				});
			}
			return table;
		}

		///<summary>Inserts one Employer into the database.  Returns the new priKey.</summary>
		public static long Insert(Employer employer){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				employer.EmployerNum=DbHelper.GetNextOracleKey("employer","EmployerNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(employer,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							employer.EmployerNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(employer,false);
			}
		}

		///<summary>Inserts one Employer into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(Employer employer,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				employer.EmployerNum=ReplicationServers.GetKey("employer","EmployerNum");
			}
			string command="INSERT INTO employer (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="EmployerNum,";
			}
			command+="EmpName,Address,Address2,City,State,Zip,Phone) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(employer.EmployerNum)+",";
			}
			command+=
				 "'"+POut.String(employer.EmpName)+"',"
				+"'"+POut.String(employer.Address)+"',"
				+"'"+POut.String(employer.Address2)+"',"
				+"'"+POut.String(employer.City)+"',"
				+"'"+POut.String(employer.State)+"',"
				+"'"+POut.String(employer.Zip)+"',"
				+"'"+POut.String(employer.Phone)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				employer.EmployerNum=Db.NonQ(command,true,"EmployerNum","employer");
			}
			return employer.EmployerNum;
		}

		///<summary>Inserts one Employer into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Employer employer){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(employer,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					employer.EmployerNum=DbHelper.GetNextOracleKey("employer","EmployerNum"); //Cacheless method
				}
				return InsertNoCache(employer,true);
			}
		}

		///<summary>Inserts one Employer into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Employer employer,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO employer (";
			if(!useExistingPK && isRandomKeys) {
				employer.EmployerNum=ReplicationServers.GetKeyNoCache("employer","EmployerNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="EmployerNum,";
			}
			command+="EmpName,Address,Address2,City,State,Zip,Phone) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(employer.EmployerNum)+",";
			}
			command+=
				 "'"+POut.String(employer.EmpName)+"',"
				+"'"+POut.String(employer.Address)+"',"
				+"'"+POut.String(employer.Address2)+"',"
				+"'"+POut.String(employer.City)+"',"
				+"'"+POut.String(employer.State)+"',"
				+"'"+POut.String(employer.Zip)+"',"
				+"'"+POut.String(employer.Phone)+"')";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				employer.EmployerNum=Db.NonQ(command,true,"EmployerNum","employer");
			}
			return employer.EmployerNum;
		}

		///<summary>Updates one Employer in the database.</summary>
		public static void Update(Employer employer){
			string command="UPDATE employer SET "
				+"EmpName    = '"+POut.String(employer.EmpName)+"', "
				+"Address    = '"+POut.String(employer.Address)+"', "
				+"Address2   = '"+POut.String(employer.Address2)+"', "
				+"City       = '"+POut.String(employer.City)+"', "
				+"State      = '"+POut.String(employer.State)+"', "
				+"Zip        = '"+POut.String(employer.Zip)+"', "
				+"Phone      = '"+POut.String(employer.Phone)+"' "
				+"WHERE EmployerNum = "+POut.Long(employer.EmployerNum);
			Db.NonQ(command);
		}

		///<summary>Updates one Employer in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(Employer employer,Employer oldEmployer){
			string command="";
			if(employer.EmpName != oldEmployer.EmpName) {
				if(command!=""){ command+=",";}
				command+="EmpName = '"+POut.String(employer.EmpName)+"'";
			}
			if(employer.Address != oldEmployer.Address) {
				if(command!=""){ command+=",";}
				command+="Address = '"+POut.String(employer.Address)+"'";
			}
			if(employer.Address2 != oldEmployer.Address2) {
				if(command!=""){ command+=",";}
				command+="Address2 = '"+POut.String(employer.Address2)+"'";
			}
			if(employer.City != oldEmployer.City) {
				if(command!=""){ command+=",";}
				command+="City = '"+POut.String(employer.City)+"'";
			}
			if(employer.State != oldEmployer.State) {
				if(command!=""){ command+=",";}
				command+="State = '"+POut.String(employer.State)+"'";
			}
			if(employer.Zip != oldEmployer.Zip) {
				if(command!=""){ command+=",";}
				command+="Zip = '"+POut.String(employer.Zip)+"'";
			}
			if(employer.Phone != oldEmployer.Phone) {
				if(command!=""){ command+=",";}
				command+="Phone = '"+POut.String(employer.Phone)+"'";
			}
			if(command==""){
				return false;
			}
			command="UPDATE employer SET "+command
				+" WHERE EmployerNum = "+POut.Long(employer.EmployerNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(Employer,Employer) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(Employer employer,Employer oldEmployer) {
			if(employer.EmpName != oldEmployer.EmpName) {
				return true;
			}
			if(employer.Address != oldEmployer.Address) {
				return true;
			}
			if(employer.Address2 != oldEmployer.Address2) {
				return true;
			}
			if(employer.City != oldEmployer.City) {
				return true;
			}
			if(employer.State != oldEmployer.State) {
				return true;
			}
			if(employer.Zip != oldEmployer.Zip) {
				return true;
			}
			if(employer.Phone != oldEmployer.Phone) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one Employer from the database.</summary>
		public static void Delete(long employerNum){
			string command="DELETE FROM employer "
				+"WHERE EmployerNum = "+POut.Long(employerNum);
			Db.NonQ(command);
		}

	}
}