//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class VoiceMailCrud {
		///<summary>Gets one VoiceMail object from the database using the primary key.  Returns null if not found.</summary>
		public static VoiceMail SelectOne(long voiceMailNum){
			string command="SELECT * FROM voicemail "
				+"WHERE VoiceMailNum = "+POut.Long(voiceMailNum);
			List<VoiceMail> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one VoiceMail object from the database using a query.</summary>
		public static VoiceMail SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<VoiceMail> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of VoiceMail objects from the database using a query.</summary>
		public static List<VoiceMail> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<VoiceMail> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<VoiceMail> TableToList(DataTable table){
			List<VoiceMail> retVal=new List<VoiceMail>();
			VoiceMail voiceMail;
			foreach(DataRow row in table.Rows) {
				voiceMail=new VoiceMail();
				voiceMail.VoiceMailNum= PIn.Long  (row["VoiceMailNum"].ToString());
				voiceMail.UserNum     = PIn.Long  (row["UserNum"].ToString());
				voiceMail.PatNum      = PIn.Long  (row["PatNum"].ToString());
				voiceMail.DateCreated = PIn.DateT (row["DateCreated"].ToString());
				voiceMail.Duration    = PIn.Int   (row["Duration"].ToString());
				voiceMail.FileName    = PIn.String(row["FileName"].ToString());
				voiceMail.PhoneNumber = PIn.String(row["PhoneNumber"].ToString());
				voiceMail.StatusVM    = (OpenDentBusiness.VoiceMailStatus)PIn.Int(row["StatusVM"].ToString());
				voiceMail.Note        = PIn.String(row["Note"].ToString());
				voiceMail.DateClaimed = PIn.DateT (row["DateClaimed"].ToString());
				retVal.Add(voiceMail);
			}
			return retVal;
		}

		///<summary>Converts a list of VoiceMail into a DataTable.</summary>
		public static DataTable ListToTable(List<VoiceMail> listVoiceMails,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="VoiceMail";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("VoiceMailNum");
			table.Columns.Add("UserNum");
			table.Columns.Add("PatNum");
			table.Columns.Add("DateCreated");
			table.Columns.Add("Duration");
			table.Columns.Add("FileName");
			table.Columns.Add("PhoneNumber");
			table.Columns.Add("StatusVM");
			table.Columns.Add("Note");
			table.Columns.Add("DateClaimed");
			foreach(VoiceMail voiceMail in listVoiceMails) {
				table.Rows.Add(new object[] {
					POut.Long  (voiceMail.VoiceMailNum),
					POut.Long  (voiceMail.UserNum),
					POut.Long  (voiceMail.PatNum),
					POut.DateT (voiceMail.DateCreated,false),
					POut.Int   (voiceMail.Duration),
					            voiceMail.FileName,
					            voiceMail.PhoneNumber,
					POut.Int   ((int)voiceMail.StatusVM),
					            voiceMail.Note,
					POut.DateT (voiceMail.DateClaimed,false),
				});
			}
			return table;
		}

		///<summary>Inserts one VoiceMail into the database.  Returns the new priKey.</summary>
		public static long Insert(VoiceMail voiceMail){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				voiceMail.VoiceMailNum=DbHelper.GetNextOracleKey("voicemail","VoiceMailNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(voiceMail,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							voiceMail.VoiceMailNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(voiceMail,false);
			}
		}

		///<summary>Inserts one VoiceMail into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(VoiceMail voiceMail,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				voiceMail.VoiceMailNum=ReplicationServers.GetKey("voicemail","VoiceMailNum");
			}
			string command="INSERT INTO voicemail (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="VoiceMailNum,";
			}
			command+="UserNum,PatNum,DateCreated,Duration,FileName,PhoneNumber,StatusVM,Note,DateClaimed) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(voiceMail.VoiceMailNum)+",";
			}
			command+=
				     POut.Long  (voiceMail.UserNum)+","
				+    POut.Long  (voiceMail.PatNum)+","
				+    POut.DateT (voiceMail.DateCreated)+","
				+    POut.Int   (voiceMail.Duration)+","
				+"'"+POut.String(voiceMail.FileName)+"',"
				+"'"+POut.String(voiceMail.PhoneNumber)+"',"
				+    POut.Int   ((int)voiceMail.StatusVM)+","
				+"'"+POut.String(voiceMail.Note)+"',"
				+    POut.DateT (voiceMail.DateClaimed)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				voiceMail.VoiceMailNum=Db.NonQ(command,true,"VoiceMailNum","voiceMail");
			}
			return voiceMail.VoiceMailNum;
		}

		///<summary>Inserts one VoiceMail into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(VoiceMail voiceMail){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(voiceMail,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					voiceMail.VoiceMailNum=DbHelper.GetNextOracleKey("voicemail","VoiceMailNum"); //Cacheless method
				}
				return InsertNoCache(voiceMail,true);
			}
		}

		///<summary>Inserts one VoiceMail into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(VoiceMail voiceMail,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO voicemail (";
			if(!useExistingPK && isRandomKeys) {
				voiceMail.VoiceMailNum=ReplicationServers.GetKeyNoCache("voicemail","VoiceMailNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="VoiceMailNum,";
			}
			command+="UserNum,PatNum,DateCreated,Duration,FileName,PhoneNumber,StatusVM,Note,DateClaimed) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(voiceMail.VoiceMailNum)+",";
			}
			command+=
				     POut.Long  (voiceMail.UserNum)+","
				+    POut.Long  (voiceMail.PatNum)+","
				+    POut.DateT (voiceMail.DateCreated)+","
				+    POut.Int   (voiceMail.Duration)+","
				+"'"+POut.String(voiceMail.FileName)+"',"
				+"'"+POut.String(voiceMail.PhoneNumber)+"',"
				+    POut.Int   ((int)voiceMail.StatusVM)+","
				+"'"+POut.String(voiceMail.Note)+"',"
				+    POut.DateT (voiceMail.DateClaimed)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				voiceMail.VoiceMailNum=Db.NonQ(command,true,"VoiceMailNum","voiceMail");
			}
			return voiceMail.VoiceMailNum;
		}

		///<summary>Updates one VoiceMail in the database.</summary>
		public static void Update(VoiceMail voiceMail){
			string command="UPDATE voicemail SET "
				+"UserNum     =  "+POut.Long  (voiceMail.UserNum)+", "
				+"PatNum      =  "+POut.Long  (voiceMail.PatNum)+", "
				+"DateCreated =  "+POut.DateT (voiceMail.DateCreated)+", "
				+"Duration    =  "+POut.Int   (voiceMail.Duration)+", "
				+"FileName    = '"+POut.String(voiceMail.FileName)+"', "
				+"PhoneNumber = '"+POut.String(voiceMail.PhoneNumber)+"', "
				+"StatusVM    =  "+POut.Int   ((int)voiceMail.StatusVM)+", "
				+"Note        = '"+POut.String(voiceMail.Note)+"', "
				+"DateClaimed =  "+POut.DateT (voiceMail.DateClaimed)+" "
				+"WHERE VoiceMailNum = "+POut.Long(voiceMail.VoiceMailNum);
			Db.NonQ(command);
		}

		///<summary>Updates one VoiceMail in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(VoiceMail voiceMail,VoiceMail oldVoiceMail){
			string command="";
			if(voiceMail.UserNum != oldVoiceMail.UserNum) {
				if(command!=""){ command+=",";}
				command+="UserNum = "+POut.Long(voiceMail.UserNum)+"";
			}
			if(voiceMail.PatNum != oldVoiceMail.PatNum) {
				if(command!=""){ command+=",";}
				command+="PatNum = "+POut.Long(voiceMail.PatNum)+"";
			}
			if(voiceMail.DateCreated != oldVoiceMail.DateCreated) {
				if(command!=""){ command+=",";}
				command+="DateCreated = "+POut.DateT(voiceMail.DateCreated)+"";
			}
			if(voiceMail.Duration != oldVoiceMail.Duration) {
				if(command!=""){ command+=",";}
				command+="Duration = "+POut.Int(voiceMail.Duration)+"";
			}
			if(voiceMail.FileName != oldVoiceMail.FileName) {
				if(command!=""){ command+=",";}
				command+="FileName = '"+POut.String(voiceMail.FileName)+"'";
			}
			if(voiceMail.PhoneNumber != oldVoiceMail.PhoneNumber) {
				if(command!=""){ command+=",";}
				command+="PhoneNumber = '"+POut.String(voiceMail.PhoneNumber)+"'";
			}
			if(voiceMail.StatusVM != oldVoiceMail.StatusVM) {
				if(command!=""){ command+=",";}
				command+="StatusVM = "+POut.Int   ((int)voiceMail.StatusVM)+"";
			}
			if(voiceMail.Note != oldVoiceMail.Note) {
				if(command!=""){ command+=",";}
				command+="Note = '"+POut.String(voiceMail.Note)+"'";
			}
			if(voiceMail.DateClaimed != oldVoiceMail.DateClaimed) {
				if(command!=""){ command+=",";}
				command+="DateClaimed = "+POut.DateT(voiceMail.DateClaimed)+"";
			}
			if(command==""){
				return false;
			}
			command="UPDATE voicemail SET "+command
				+" WHERE VoiceMailNum = "+POut.Long(voiceMail.VoiceMailNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(VoiceMail,VoiceMail) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(VoiceMail voiceMail,VoiceMail oldVoiceMail) {
			if(voiceMail.UserNum != oldVoiceMail.UserNum) {
				return true;
			}
			if(voiceMail.PatNum != oldVoiceMail.PatNum) {
				return true;
			}
			if(voiceMail.DateCreated != oldVoiceMail.DateCreated) {
				return true;
			}
			if(voiceMail.Duration != oldVoiceMail.Duration) {
				return true;
			}
			if(voiceMail.FileName != oldVoiceMail.FileName) {
				return true;
			}
			if(voiceMail.PhoneNumber != oldVoiceMail.PhoneNumber) {
				return true;
			}
			if(voiceMail.StatusVM != oldVoiceMail.StatusVM) {
				return true;
			}
			if(voiceMail.Note != oldVoiceMail.Note) {
				return true;
			}
			if(voiceMail.DateClaimed != oldVoiceMail.DateClaimed) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one VoiceMail from the database.</summary>
		public static void Delete(long voiceMailNum){
			string command="DELETE FROM voicemail "
				+"WHERE VoiceMailNum = "+POut.Long(voiceMailNum);
			Db.NonQ(command);
		}

	}
}