//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class WikiListHeaderWidthCrud {
		///<summary>Gets one WikiListHeaderWidth object from the database using the primary key.  Returns null if not found.</summary>
		public static WikiListHeaderWidth SelectOne(long wikiListHeaderWidthNum){
			string command="SELECT * FROM wikilistheaderwidth "
				+"WHERE WikiListHeaderWidthNum = "+POut.Long(wikiListHeaderWidthNum);
			List<WikiListHeaderWidth> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one WikiListHeaderWidth object from the database using a query.</summary>
		public static WikiListHeaderWidth SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<WikiListHeaderWidth> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of WikiListHeaderWidth objects from the database using a query.</summary>
		public static List<WikiListHeaderWidth> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<WikiListHeaderWidth> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<WikiListHeaderWidth> TableToList(DataTable table){
			List<WikiListHeaderWidth> retVal=new List<WikiListHeaderWidth>();
			WikiListHeaderWidth wikiListHeaderWidth;
			foreach(DataRow row in table.Rows) {
				wikiListHeaderWidth=new WikiListHeaderWidth();
				wikiListHeaderWidth.WikiListHeaderWidthNum= PIn.Long  (row["WikiListHeaderWidthNum"].ToString());
				wikiListHeaderWidth.ListName              = PIn.String(row["ListName"].ToString());
				wikiListHeaderWidth.ColName               = PIn.String(row["ColName"].ToString());
				wikiListHeaderWidth.ColWidth              = PIn.Int   (row["ColWidth"].ToString());
				wikiListHeaderWidth.PickList              = PIn.String(row["PickList"].ToString());
				retVal.Add(wikiListHeaderWidth);
			}
			return retVal;
		}

		///<summary>Converts a list of WikiListHeaderWidth into a DataTable.</summary>
		public static DataTable ListToTable(List<WikiListHeaderWidth> listWikiListHeaderWidths,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="WikiListHeaderWidth";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("WikiListHeaderWidthNum");
			table.Columns.Add("ListName");
			table.Columns.Add("ColName");
			table.Columns.Add("ColWidth");
			table.Columns.Add("PickList");
			foreach(WikiListHeaderWidth wikiListHeaderWidth in listWikiListHeaderWidths) {
				table.Rows.Add(new object[] {
					POut.Long  (wikiListHeaderWidth.WikiListHeaderWidthNum),
					            wikiListHeaderWidth.ListName,
					            wikiListHeaderWidth.ColName,
					POut.Int   (wikiListHeaderWidth.ColWidth),
					            wikiListHeaderWidth.PickList,
				});
			}
			return table;
		}

		///<summary>Inserts one WikiListHeaderWidth into the database.  Returns the new priKey.</summary>
		public static long Insert(WikiListHeaderWidth wikiListHeaderWidth){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				wikiListHeaderWidth.WikiListHeaderWidthNum=DbHelper.GetNextOracleKey("wikilistheaderwidth","WikiListHeaderWidthNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(wikiListHeaderWidth,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							wikiListHeaderWidth.WikiListHeaderWidthNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(wikiListHeaderWidth,false);
			}
		}

		///<summary>Inserts one WikiListHeaderWidth into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(WikiListHeaderWidth wikiListHeaderWidth,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				wikiListHeaderWidth.WikiListHeaderWidthNum=ReplicationServers.GetKey("wikilistheaderwidth","WikiListHeaderWidthNum");
			}
			string command="INSERT INTO wikilistheaderwidth (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="WikiListHeaderWidthNum,";
			}
			command+="ListName,ColName,ColWidth,PickList) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(wikiListHeaderWidth.WikiListHeaderWidthNum)+",";
			}
			command+=
				 "'"+POut.String(wikiListHeaderWidth.ListName)+"',"
				+"'"+POut.String(wikiListHeaderWidth.ColName)+"',"
				+    POut.Int   (wikiListHeaderWidth.ColWidth)+","
				+    DbHelper.ParamChar+"paramPickList)";
			if(wikiListHeaderWidth.PickList==null) {
				wikiListHeaderWidth.PickList="";
			}
			OdSqlParameter paramPickList=new OdSqlParameter("paramPickList",OdDbType.Text,POut.StringParam(wikiListHeaderWidth.PickList));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramPickList);
			}
			else {
				wikiListHeaderWidth.WikiListHeaderWidthNum=Db.NonQ(command,true,"WikiListHeaderWidthNum","wikiListHeaderWidth",paramPickList);
			}
			return wikiListHeaderWidth.WikiListHeaderWidthNum;
		}

		///<summary>Inserts one WikiListHeaderWidth into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(WikiListHeaderWidth wikiListHeaderWidth){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(wikiListHeaderWidth,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					wikiListHeaderWidth.WikiListHeaderWidthNum=DbHelper.GetNextOracleKey("wikilistheaderwidth","WikiListHeaderWidthNum"); //Cacheless method
				}
				return InsertNoCache(wikiListHeaderWidth,true);
			}
		}

		///<summary>Inserts one WikiListHeaderWidth into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(WikiListHeaderWidth wikiListHeaderWidth,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO wikilistheaderwidth (";
			if(!useExistingPK && isRandomKeys) {
				wikiListHeaderWidth.WikiListHeaderWidthNum=ReplicationServers.GetKeyNoCache("wikilistheaderwidth","WikiListHeaderWidthNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="WikiListHeaderWidthNum,";
			}
			command+="ListName,ColName,ColWidth,PickList) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(wikiListHeaderWidth.WikiListHeaderWidthNum)+",";
			}
			command+=
				 "'"+POut.String(wikiListHeaderWidth.ListName)+"',"
				+"'"+POut.String(wikiListHeaderWidth.ColName)+"',"
				+    POut.Int   (wikiListHeaderWidth.ColWidth)+","
				+    DbHelper.ParamChar+"paramPickList)";
			if(wikiListHeaderWidth.PickList==null) {
				wikiListHeaderWidth.PickList="";
			}
			OdSqlParameter paramPickList=new OdSqlParameter("paramPickList",OdDbType.Text,POut.StringParam(wikiListHeaderWidth.PickList));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramPickList);
			}
			else {
				wikiListHeaderWidth.WikiListHeaderWidthNum=Db.NonQ(command,true,"WikiListHeaderWidthNum","wikiListHeaderWidth",paramPickList);
			}
			return wikiListHeaderWidth.WikiListHeaderWidthNum;
		}

		///<summary>Updates one WikiListHeaderWidth in the database.</summary>
		public static void Update(WikiListHeaderWidth wikiListHeaderWidth){
			string command="UPDATE wikilistheaderwidth SET "
				+"ListName              = '"+POut.String(wikiListHeaderWidth.ListName)+"', "
				+"ColName               = '"+POut.String(wikiListHeaderWidth.ColName)+"', "
				+"ColWidth              =  "+POut.Int   (wikiListHeaderWidth.ColWidth)+", "
				+"PickList              =  "+DbHelper.ParamChar+"paramPickList "
				+"WHERE WikiListHeaderWidthNum = "+POut.Long(wikiListHeaderWidth.WikiListHeaderWidthNum);
			if(wikiListHeaderWidth.PickList==null) {
				wikiListHeaderWidth.PickList="";
			}
			OdSqlParameter paramPickList=new OdSqlParameter("paramPickList",OdDbType.Text,POut.StringParam(wikiListHeaderWidth.PickList));
			Db.NonQ(command,paramPickList);
		}

		///<summary>Updates one WikiListHeaderWidth in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(WikiListHeaderWidth wikiListHeaderWidth,WikiListHeaderWidth oldWikiListHeaderWidth){
			string command="";
			if(wikiListHeaderWidth.ListName != oldWikiListHeaderWidth.ListName) {
				if(command!=""){ command+=",";}
				command+="ListName = '"+POut.String(wikiListHeaderWidth.ListName)+"'";
			}
			if(wikiListHeaderWidth.ColName != oldWikiListHeaderWidth.ColName) {
				if(command!=""){ command+=",";}
				command+="ColName = '"+POut.String(wikiListHeaderWidth.ColName)+"'";
			}
			if(wikiListHeaderWidth.ColWidth != oldWikiListHeaderWidth.ColWidth) {
				if(command!=""){ command+=",";}
				command+="ColWidth = "+POut.Int(wikiListHeaderWidth.ColWidth)+"";
			}
			if(wikiListHeaderWidth.PickList != oldWikiListHeaderWidth.PickList) {
				if(command!=""){ command+=",";}
				command+="PickList = "+DbHelper.ParamChar+"paramPickList";
			}
			if(command==""){
				return false;
			}
			if(wikiListHeaderWidth.PickList==null) {
				wikiListHeaderWidth.PickList="";
			}
			OdSqlParameter paramPickList=new OdSqlParameter("paramPickList",OdDbType.Text,POut.StringParam(wikiListHeaderWidth.PickList));
			command="UPDATE wikilistheaderwidth SET "+command
				+" WHERE WikiListHeaderWidthNum = "+POut.Long(wikiListHeaderWidth.WikiListHeaderWidthNum);
			Db.NonQ(command,paramPickList);
			return true;
		}

		///<summary>Returns true if Update(WikiListHeaderWidth,WikiListHeaderWidth) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(WikiListHeaderWidth wikiListHeaderWidth,WikiListHeaderWidth oldWikiListHeaderWidth) {
			if(wikiListHeaderWidth.ListName != oldWikiListHeaderWidth.ListName) {
				return true;
			}
			if(wikiListHeaderWidth.ColName != oldWikiListHeaderWidth.ColName) {
				return true;
			}
			if(wikiListHeaderWidth.ColWidth != oldWikiListHeaderWidth.ColWidth) {
				return true;
			}
			if(wikiListHeaderWidth.PickList != oldWikiListHeaderWidth.PickList) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one WikiListHeaderWidth from the database.</summary>
		public static void Delete(long wikiListHeaderWidthNum){
			string command="DELETE FROM wikilistheaderwidth "
				+"WHERE WikiListHeaderWidthNum = "+POut.Long(wikiListHeaderWidthNum);
			Db.NonQ(command);
		}

	}
}