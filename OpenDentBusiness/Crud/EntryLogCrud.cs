//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Text;

namespace OpenDentBusiness.Crud{
	public class EntryLogCrud {
		///<summary>Gets one EntryLog object from the database using the primary key.  Returns null if not found.</summary>
		public static EntryLog SelectOne(long entryLogNum){
			string command="SELECT * FROM entrylog "
				+"WHERE EntryLogNum = "+POut.Long(entryLogNum);
			List<EntryLog> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one EntryLog object from the database using a query.</summary>
		public static EntryLog SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EntryLog> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of EntryLog objects from the database using a query.</summary>
		public static List<EntryLog> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EntryLog> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<EntryLog> TableToList(DataTable table){
			List<EntryLog> retVal=new List<EntryLog>();
			EntryLog entryLog;
			foreach(DataRow row in table.Rows) {
				entryLog=new EntryLog();
				entryLog.EntryLogNum  = PIn.Long  (row["EntryLogNum"].ToString());
				entryLog.UserNum      = PIn.Long  (row["UserNum"].ToString());
				entryLog.FKeyType     = (OpenDentBusiness.EntryLogFKeyType)PIn.Int(row["FKeyType"].ToString());
				entryLog.FKey         = PIn.Long  (row["FKey"].ToString());
				entryLog.LogSource    = (OpenDentBusiness.LogSources)PIn.Int(row["LogSource"].ToString());
				entryLog.EntryDateTime= PIn.DateT (row["EntryDateTime"].ToString());
				retVal.Add(entryLog);
			}
			return retVal;
		}

		///<summary>Converts a list of EntryLog into a DataTable.</summary>
		public static DataTable ListToTable(List<EntryLog> listEntryLogs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="EntryLog";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("EntryLogNum");
			table.Columns.Add("UserNum");
			table.Columns.Add("FKeyType");
			table.Columns.Add("FKey");
			table.Columns.Add("LogSource");
			table.Columns.Add("EntryDateTime");
			foreach(EntryLog entryLog in listEntryLogs) {
				table.Rows.Add(new object[] {
					POut.Long  (entryLog.EntryLogNum),
					POut.Long  (entryLog.UserNum),
					POut.Int   ((int)entryLog.FKeyType),
					POut.Long  (entryLog.FKey),
					POut.Int   ((int)entryLog.LogSource),
					POut.DateT (entryLog.EntryDateTime,false),
				});
			}
			return table;
		}

		///<summary>Inserts one EntryLog into the database.  Returns the new priKey.</summary>
		public static long Insert(EntryLog entryLog){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				entryLog.EntryLogNum=DbHelper.GetNextOracleKey("entrylog","EntryLogNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(entryLog,true);
					}
					catch(Oracle.ManagedDataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							entryLog.EntryLogNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(entryLog,false);
			}
		}

		///<summary>Inserts one EntryLog into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(EntryLog entryLog,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				entryLog.EntryLogNum=ReplicationServers.GetKey("entrylog","EntryLogNum");
			}
			string command="INSERT INTO entrylog (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="EntryLogNum,";
			}
			command+="UserNum,FKeyType,FKey,LogSource,EntryDateTime) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(entryLog.EntryLogNum)+",";
			}
			command+=
				     POut.Long  (entryLog.UserNum)+","
				+    POut.Int   ((int)entryLog.FKeyType)+","
				+    POut.Long  (entryLog.FKey)+","
				+    POut.Int   ((int)entryLog.LogSource)+","
				+    DbHelper.Now()+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				entryLog.EntryLogNum=Db.NonQ(command,true,"EntryLogNum","entryLog");
			}
			return entryLog.EntryLogNum;
		}

		///<summary>Inserts many EntryLogs into the database.  Provides option to use the existing priKey.</summary>
		public static void InsertMany(List <EntryLog> listEntryLogs){
			if(DataConnection.DBtype==DatabaseType.Oracle || PrefC.RandomKeys) {
				foreach(EntryLog entryLog in listEntryLogs) {
					Insert(entryLog);
				}
			}
			else {
				StringBuilder sbCommands=null;
				int index=0;
				while(index < listEntryLogs.Count) {
					EntryLog entryLog=listEntryLogs[index];
					StringBuilder sbRow=new StringBuilder("(");
					bool hasComma=false;
					if(sbCommands==null) {
						sbCommands=new StringBuilder();
						sbCommands.Append("INSERT INTO entrylog (");
						sbCommands.Append("UserNum,FKeyType,FKey,LogSource,EntryDateTime) VALUES ");
					}
					else {
						hasComma=true;
					}
					sbRow.Append(POut.Long(entryLog.UserNum)); sbRow.Append(",");
					sbRow.Append(POut.Int((int)entryLog.FKeyType)); sbRow.Append(",");
					sbRow.Append(POut.Long(entryLog.FKey)); sbRow.Append(",");
					sbRow.Append(POut.Int((int)entryLog.LogSource)); sbRow.Append(",");
					sbRow.Append(DbHelper.Now()); sbRow.Append(")");
					if(sbCommands.Length+sbRow.Length+1 > TableBase.MaxAllowedPacketCount) {
						Db.NonQ(sbCommands.ToString());
						sbCommands=null;
					}
					else {
						if(hasComma) {
							sbCommands.Append(",");
						}
						sbCommands.Append(sbRow.ToString());
						if(index==listEntryLogs.Count-1) {
							Db.NonQ(sbCommands.ToString());
						}
						index++;
					}
				}
			}
		}

		///<summary>Inserts one EntryLog into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(EntryLog entryLog){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(entryLog,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					entryLog.EntryLogNum=DbHelper.GetNextOracleKey("entrylog","EntryLogNum"); //Cacheless method
				}
				return InsertNoCache(entryLog,true);
			}
		}

		///<summary>Inserts one EntryLog into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(EntryLog entryLog,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO entrylog (";
			if(!useExistingPK && isRandomKeys) {
				entryLog.EntryLogNum=ReplicationServers.GetKeyNoCache("entrylog","EntryLogNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="EntryLogNum,";
			}
			command+="UserNum,FKeyType,FKey,LogSource,EntryDateTime) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(entryLog.EntryLogNum)+",";
			}
			command+=
				     POut.Long  (entryLog.UserNum)+","
				+    POut.Int   ((int)entryLog.FKeyType)+","
				+    POut.Long  (entryLog.FKey)+","
				+    POut.Int   ((int)entryLog.LogSource)+","
				+    DbHelper.Now()+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				entryLog.EntryLogNum=Db.NonQ(command,true,"EntryLogNum","entryLog");
			}
			return entryLog.EntryLogNum;
		}

		///<summary>Updates one EntryLog in the database.</summary>
		public static void Update(EntryLog entryLog){
			string command="UPDATE entrylog SET "
				+"UserNum      =  "+POut.Long  (entryLog.UserNum)+", "
				+"FKeyType     =  "+POut.Int   ((int)entryLog.FKeyType)+", "
				+"FKey         =  "+POut.Long  (entryLog.FKey)+", "
				+"LogSource    =  "+POut.Int   ((int)entryLog.LogSource)+" "
				//EntryDateTime not allowed to change
				+"WHERE EntryLogNum = "+POut.Long(entryLog.EntryLogNum);
			Db.NonQ(command);
		}

		///<summary>Updates one EntryLog in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(EntryLog entryLog,EntryLog oldEntryLog){
			string command="";
			if(entryLog.UserNum != oldEntryLog.UserNum) {
				if(command!=""){ command+=",";}
				command+="UserNum = "+POut.Long(entryLog.UserNum)+"";
			}
			if(entryLog.FKeyType != oldEntryLog.FKeyType) {
				if(command!=""){ command+=",";}
				command+="FKeyType = "+POut.Int   ((int)entryLog.FKeyType)+"";
			}
			if(entryLog.FKey != oldEntryLog.FKey) {
				if(command!=""){ command+=",";}
				command+="FKey = "+POut.Long(entryLog.FKey)+"";
			}
			if(entryLog.LogSource != oldEntryLog.LogSource) {
				if(command!=""){ command+=",";}
				command+="LogSource = "+POut.Int   ((int)entryLog.LogSource)+"";
			}
			//EntryDateTime not allowed to change
			if(command==""){
				return false;
			}
			command="UPDATE entrylog SET "+command
				+" WHERE EntryLogNum = "+POut.Long(entryLog.EntryLogNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(EntryLog,EntryLog) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(EntryLog entryLog,EntryLog oldEntryLog) {
			if(entryLog.UserNum != oldEntryLog.UserNum) {
				return true;
			}
			if(entryLog.FKeyType != oldEntryLog.FKeyType) {
				return true;
			}
			if(entryLog.FKey != oldEntryLog.FKey) {
				return true;
			}
			if(entryLog.LogSource != oldEntryLog.LogSource) {
				return true;
			}
			//EntryDateTime not allowed to change
			return false;
		}

		///<summary>Deletes one EntryLog from the database.</summary>
		public static void Delete(long entryLogNum){
			string command="DELETE FROM entrylog "
				+"WHERE EntryLogNum = "+POut.Long(entryLogNum);
			Db.NonQ(command);
		}

	}
}