using OpenDentBusiness;
using System;
using System.Xml.Serialization;

namespace OpenDentBusiness {
	///<summary>Received as XML output from XWeb gateway. Not all fields are available for all method calls. This is a combination of all possible output fields. 
	///The fields that are available are dependent on which method was called and the given result.
	///HPF (XWeb Hosted Payment Form) Payments and HPF CC Alias creations will each enter a row in this table. That row will be monitored by the eConnector and updated when the XWebResponseCode changes from Pending.
	/// -- 1) Create the row and indicate the HPF/OTK.
	/// -- 2) Poll the OTK (one-time key) until an XWebResponseCode is available. Update the row with information about the transaction.
	///DTG (XWeb Direct To Gateway) Will enter 1 row in this table. 
	/// -- 1) Make the DTG payment using a pre-authorized CC alias. Create row with information about the transaction.
	///Any fields prefixed with 'Gateaway output' come directly as XML output from the XWeb Gateway. All other fields are derived by OD.
	///The class instance will created by eConnector by deserializing an XML string as received from XWeb Gateway. 
	///The fields names MUST NOT CHANGE for this reason. XML will not deserialize if the names do not match EXACTLY.</summary>
	[Serializable()]
	public class XWebResponse : TableBase {
		///<summary>Primary key.</summary>
		[CrudColumn(IsPriKey=true)]
		public long XWebResponseNum;
		///<summary>FK to patient.PatNum.</summary>
		public long PatNum;
		///<summary>FK to provider.ProvNum.</summary>
		public long ProvNum;
		///<summary>FK to clinic.ClinicNum.</summary>
		public long ClinicNum;
		///<summary>FK to payment.PayNum.</summary>
		public long PaymentNum;
		///<summary>Timestamp at which this row was created. Auto generated on insert.</summary>
		[CrudColumn(SpecialType=CrudSpecialColType.DateTEntry)]
		public DateTime DateTEntry;
		///<summary>Timestamp at which this row was last updated. Will be updated each time the OTK status is polled and one final time when XWebResponseCode changes from Pending.</summary>
		[CrudColumn(SpecialType=CrudSpecialColType.DateT)]
		public DateTime DateTUpdate;
		///<summary>Inidicates which phase of the XWeb process this transaction is in. See class summary for details.</summary>
		public XWebTransactionStatus TransactionStatus;
		///<summary>Gateaway output. Pre-defined responses generated by XWeb. Will be converted to strongly typed enum XWebResponseCode.</summary>
		public int ResponseCode;
		///<summary>Strongly typed representation of ResponseCode. Initialized by XWebInputAbs.CreateGatewayResponse().</summary>	
		[CrudColumn(SpecialType=CrudSpecialColType.EnumAsString)]
		public XWebResponseCodes XWebResponseCode;
		///<summary>Gateaway output. Gives a more detailed description on the ResponseCode.</summary>
		public string ResponseDescription;
		///<summary>Gateaway output. This is the One Time Key that is used to launch the Hosted Payment Form. 
		///The status of the OTK can be polled to determine if the end user has completed the HPF or if it has expired.</summary>
		public string OTK;
		///<summary>This URL will be generated as a result of the OTK. The URL can be browsed in an IFRAME to create a secure portal between a browser and the XWeb server.</summary>
		[CrudColumn(SpecialType=CrudSpecialColType.TextIsClob)]
		public string HpfUrl;
		///<summary>Timestamp at which this HPF will expire. The end user will only be able to access the HPF before it has expired. This expiration is set explicitly when creating the HPF.</summary>
		[CrudColumn(SpecialType=CrudSpecialColType.DateT)]
		public DateTime HpfExpiration;
		///<summary>Gateaway output. Each transaction is given a reference for future use. This can be used to void the transaction.</summary>
		public string TransactionID;
		///<summary>Gateaway output. The type of transaction that was processed. Must be a string data type because it comes from the Gateway as a string.</summary>
		public string TransactionType;
		///<summary>Gateaway output. A credit transaction will return an alias which is now linked to the credit card which was used. 
		///This alias can be used in the future to make DTG payments and circumvent the need for the secure HPF. Only applies when Credit (not Debit) data is submitted on the HPF.</summary>
		public string Alias;
		///<summary>Gateaway output. The card type used for this transaction. 
		///"Credit" - for cards that support signature only.
		///"Debit/Credit" - for cards that support either PIN-entry or signature.
		///"Debit/ATM" - for cards that support PIN-entry only.
		///"FSA" - for Flexible Spending Accounts</summary>
		public string CardType;
		///<summary>Gateaway output. The card brand used for this transaction. Possible values include "Visa", "MasterCard", "Discover", "American Express", "Diners Club", "JCB", "PayPal".</summary>
		public string CardBrand;
		///<summary>Gateaway output. The industry standard abbreviation of the card brand. 
		///Possible values include "VS", "MC", "DS", "AX", "DCIDISC", "JCB-DISC", "PP" (order respective to CardBrand above).</summary>
		public string CardBrandShort;
		///<summary>Gateaway output. Provides a masked format of the account number. The format will show the last 4 digits, the remainder will masked out with an asterisk character.
		///End user will be presented with a list of previously generated MaskedAcctNum(s) when making a payment. These are linked to an alias which can be used to make a DTG payment.
		///This ciccumvents the need to use the HPF.</summary>
		public string MaskedAcctNum;
		///<summary>Gateaway output. Amount of credit card and check transactions.</summary>
		public double Amount;
		///<summary>Gateaway output. A 6 digit authorization approval code.</summary>
		public string ApprovalCode;
		///<summary>Gateaway output. Response from the Card Security Code lookup. Only applies when Credit(not Debit) data is submitted on the HPF.</summary>
		public string CardCodeResponse;
		///<summary>Gateaway output. An identification number assigned by the OpenEdge Gateway to the receipt.</summary>
		public int ReceiptID;
		///<summary>Gateaway output. Provides the Expiration Date of the account being accessed. Format is yyMM from XWeb gateway. Will be converted to ExpirationDate.</summary>
		public string ExpDate;
		///<summary>Gateaway output. Indicates how the account number was entered by the end user. Always 'KEYED' in our case.</summary>
		public string EntryMethod;
		///<summary>Gateaway output. The response from the processor. It is only returned on transactions that are processed by the processor (Auth, Sales and Settlements).</summary>
		public string ProcessorResponse;
		///<summary>Gateaway output. This indicates the current open batch number.</summary>
		public int BatchNum;
		///<summary>Gateaway output. Net amount of Credit and Debit Card transactions in batch.</summary>
		public double BatchAmount;
		///<summary>The expiration date of the credit card that was referenced in this transaction. DateTime representation of ExpDate. Initialized by XWebInputAbs.CreateGatewayResponse().</summary>
		public DateTime AccountExpirationDate;
		///<summary>Debug information regarding this response. Can only be set by XWebResponses.ProcessOutstandingTransactions().</summary>
		[CrudColumn(SpecialType=CrudSpecialColType.TextIsClob)]
		public string DebugError;
		///<summary>Will be entered as Payment.PayNote once payment transaction has completed.</summary>
		[CrudColumn(SpecialType=CrudSpecialColType.TextIsClob)]
		public string PayNote;
		///<summary>Enum:CreditCardSource The source of where this transaction originated from.</summary>
		public CreditCardSource CCSource=CreditCardSource.XWeb;

		[XmlIgnore]
		public XWebTransactionType XTransactionType {
			get {
				XWebTransactionType xWebTransactionType;
				if(!Enum.TryParse<XWebTransactionType>(this.TransactionType,out xWebTransactionType)) {
					return XWebTransactionType.Undefined;
				}
				return xWebTransactionType;
			}
		}

		///<summary>Returned from XWeb Gateway as an int. Helper method to convert to enum.</summary>
		public static XWebResponseCodes ConvertResponseCode(int responseCode) {
			if(Enum.IsDefined(typeof(XWebResponseCodes),responseCode)) {
				return (XWebResponseCodes)responseCode;
			}
			return XWebResponseCodes.Undefined;
		}

		///<summary>Returned from XWeb Gateway as a string. Helper method to convert to DateTime. Format is yyMM from XWeb gateway</summary>
		public static DateTime ConvertExpDate(string expDate) {
			try {
				//Add 2000 to the year and expire on first of month.				
				return new DateTime(2000+int.Parse(expDate.Substring(2,2)),int.Parse(expDate.Substring(0,2)),1);
			}
			catch {
				return new DateTime(1880,1,1);
			}
		}

		///<summary>These fields should persist from instance to instance for the same OTK.</summary>
		public void SetPersistentFields(long xWebResponseNum,string transactionType,long patNum,long provNum,long clinicNum,double amount,string otk,
			string hpfUrl,DateTime hpfExpiration,string debugError,string payNote,CreditCardSource ccSource) {
			XWebResponseNum=xWebResponseNum;
			TransactionType=transactionType;
			PatNum=patNum;
			ProvNum=provNum;
			ClinicNum=clinicNum;
			Amount=amount;
			OTK=otk;
			HpfUrl=hpfUrl;
			HpfExpiration=hpfExpiration;
			DebugError=debugError;
			PayNote=payNote;
			CCSource=ccSource;
		}

		///<summary>Formats a note that can be used as a PayNote on a payment. If the XWebResponse is a return or a void of a positive payment, pass in
		///false for keepAmountPositive.</summary>
		public string GetFormattedNote(bool keepAmountPositive) {
			DateTime dateTimeProcessed;
			if(DateTEntry.Year>1880 || DateTUpdate.Year>1880) {
				dateTimeProcessed=(DateTEntry>DateTUpdate ? DateTEntry : DateTUpdate);//The greater of the two dates
			}
			else {
				dateTimeProcessed=DateTime.Now;
			}
			return Lans.g(this,"Amount:")+" "+(keepAmountPositive ? Amount : -Amount).ToString("f")+"\r\n"
				+Lans.g(this,"Card Number:")+" "+MaskedAcctNum+"\r\n"
				+Lans.g(this,"Transaction ID:")+" "+TransactionID+"\r\n"
				+Lans.g(this,"Processed:")+" "+dateTimeProcessed.ToShortDateString()+" "+dateTimeProcessed.ToShortTimeString()+"\r\n"
				+Lans.g(this,"Note:")+" "+PayNote;
		}
	}

	///<summary>OTK POLL statuses that provide a real-time check on the HPF transaction and will immediately return a response indicating an Approval, HPF timeout, or another termination event has occurred. 
	///If not, a Pending response will be returned. These states are returned directly from the XWeb gateway.</summary>
	public enum XWebResponseCodes {
		///<summary>1000</summary>
		Undefined = 1000,
		///<summary>100</summary>
		OtkSuccess = 100,
		///<summary>000</summary>
		Approval = 000,
		///<summary>005</summary>
		AliasSuccess = 005,
		///<summary>007</summary>
		PartialApproval = 007,
		///<summary>101 - Expired Without Approval.  Hosted Form timed out without Approval, OTK was never launched, or Invalid OTK</summary>
		ExpiredWithoutApproval = 101,
		///<summary>102 - Pending (neither of the above events has occurred yet)</summary>
		Pending = 102,
	}

	///<summary>Track which phase of the XWebResponse a given transaction is currently in. This will be used by the eConnector when monitoring and processing XWeb payments.</summary>
	public enum XWebTransactionStatus {
		HpfMonitoringError,
		HpfPending,
		HpfExpired,
		HpfCompletePaymentApproved,
		HpfCompletePaymentApprovedPartial,
		HpfCompleteAliasCreated,
		DtgPaymentApproved,
		DtgPaymentVoided,
		DtgPaymentReturned,
		DtgAliasDeleted
	};

	///<summary>Transaction types avaialble for XWeb API. Not all are implemented.</summary>
	public enum XWebTransactionType {
		///<summary>OTK status polling does not require a specific transaction type.</summary>
		PollOtkUnspecified,
		///<summary>This transaction type is used to purchase goods and services. When a sale occurs, the cardholder's credit limit is checked to see if the funds are available. If the funds are available, an approval code is transmitted to the XWeb gateway and is forwarded to the POS device. If approved, the transaction is flagged for inclusion in the settlement batch.</summary>
		CreditSaleTransaction,
		///<summary>This transaction will enable the merchant to obtain an "alias" of payment account information to be created and security stored at XWeb.</summary>
		AliasCreateTransaction,
		///<summary>NOT IMPLEMENTED. A Check is accepted for payment of services and processed either as an ACH transaction or a Check21 transaction.</summary>
		CheckSaleTransaction,
		///<summary>NOT IMPLEMENTED. This transaction will check the cardholder's funds and if the funds are sufficient for the purchase amount, the funds will be reserved on the cardholder's account for a period of time. A capture on this transaction will flag the transaction for settlement.</summary>
		CreditAuthTransaction,
		///<summary>This transaction removes a Sale, Capture or Return transaction from the current batch. Also, a void can be used on an Authorization transaction to prevent it from being captured in the future. Finally, the Void transaction can be used to reverse the Authorization or Sale transaction, thereby restoring the open-to-buy amount on the consumer card.</summary>
		CreditVoidTransaction,
		///<summary>This transaction will return the funds to a customer's account after settlement of the original batch has occurred.</summary>
		CreditReturnTransaction,
		///<summary>NOT IMPLEMENTED. A credit is issued to a bank account via the ACH network.</summary>
		CheckCreditTransaction,
		///<summary>NOT IMPLEMENTED. This transaction will allow the ability to create a check alias to account information securely stored at XWeb.</summary>
		CheckAliasCreateTransaction,
		///<summary>NOT IMPLEMENTED. A SaleTransaction is identical to a CreditSaleTransaction, but allows a PIN-based DebitSaleTransaction to be initiated from the Hosted Payment Form. A PIN-based Debit Sale transaction can be performed by sending a SaleTransaction Request during the OTK Call. With a SaleTransaction Request, the Hosted Payment Form will appear identical to that for a CreditSaleTransaction Request, and support for the MagTek IPAD is available. If a PIN-based Debit Sale transaction is processed using the MagTek IPAD, then a DebitSaleTransaction will be sent to XWeb, and this transaction type will be returned during the Results Call.</summary>
		SaleTransaction,
		///<summary>NOT IMPLEMENTED. This transaction type is used to process EMV Debit transactions using the Interac network. EMV Debit transactions require the XCharge Remote Client Manager to be installed on the local merchant PC and are only available to Global Canada merchants at this time.</summary>
		DebitSaleTransaction,
		///<summary>NOT IMPLEMENTED. This transaction will return the funds to a customer's bank account using the Interac network. EMV Debit transactions require the XCharge Remote Client Manager to be installed on the local merchant PC and are only available to Global Canada merchants at this time.</summary>
		DebitReturnTransaction,
		///<summary>This transaction will allow the merchant to delete a pre-existing account number that is on-file at the Edge Gateway.</summary>
		AliasDeleteTransaction,
		///<summary>Value could not be parsed.</summary>
		Undefined,
	};
}
