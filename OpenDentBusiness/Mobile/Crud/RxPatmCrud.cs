//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Mobile.Crud{
	internal class RxPatmCrud {
		///<summary>Gets one RxPatm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
		internal static RxPatm SelectOne(long customerNum,long rxNum){
			string command="SELECT * FROM rxpatm "
				+"WHERE CustomerNum = "+POut.Long(customerNum)+" AND RxNum = "+POut.Long(rxNum);
			List<RxPatm> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one RxPatm object from the database using a query.</summary>
		internal static RxPatm SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<RxPatm> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of RxPatm objects from the database using a query.</summary>
		internal static List<RxPatm> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<RxPatm> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<RxPatm> TableToList(DataTable table){
			List<RxPatm> retVal=new List<RxPatm>();
			RxPatm rxPatm;
			for(int i=0;i<table.Rows.Count;i++) {
				rxPatm=new RxPatm();
				rxPatm.CustomerNum= PIn.Long  (table.Rows[i]["CustomerNum"].ToString());
				rxPatm.RxNum      = PIn.Long  (table.Rows[i]["RxNum"].ToString());
				rxPatm.PatNum     = PIn.Long  (table.Rows[i]["PatNum"].ToString());
				rxPatm.RxDate     = PIn.Date  (table.Rows[i]["RxDate"].ToString());
				rxPatm.Drug       = PIn.String(table.Rows[i]["Drug"].ToString());
				rxPatm.Sig        = PIn.String(table.Rows[i]["Sig"].ToString());
				rxPatm.Disp       = PIn.String(table.Rows[i]["Disp"].ToString());
				rxPatm.Refills    = PIn.String(table.Rows[i]["Refills"].ToString());
				rxPatm.ProvNum    = PIn.Long  (table.Rows[i]["ProvNum"].ToString());
				retVal.Add(rxPatm);
			}
			return retVal;
		}

		///<summary>Usually set useExistingPK=true.  Inserts one RxPatm into the database.</summary>
		internal static long Insert(RxPatm rxPatm,bool useExistingPK){
			if(!useExistingPK) {
				rxPatm.RxNum=ReplicationServers.GetKey("rxpatm","RxNum");
			}
			string command="INSERT INTO rxpatm (";
			command+="RxNum,";
			command+="CustomerNum,PatNum,RxDate,Drug,Sig,Disp,Refills,ProvNum) VALUES(";
			command+=POut.Long(rxPatm.RxNum)+",";
			command+=
				     POut.Long  (rxPatm.CustomerNum)+","
				+    POut.Long  (rxPatm.PatNum)+","
				+    POut.Date  (rxPatm.RxDate)+","
				+"'"+POut.String(rxPatm.Drug)+"',"
				+"'"+POut.String(rxPatm.Sig)+"',"
				+"'"+POut.String(rxPatm.Disp)+"',"
				+"'"+POut.String(rxPatm.Refills)+"',"
				+    POut.Long  (rxPatm.ProvNum)+")";
			Db.NonQ(command);//There is no autoincrement in the mobile server.
			return rxPatm.RxNum;
		}

		///<summary>Updates one RxPatm in the database.</summary>
		internal static void Update(RxPatm rxPatm){
			string command="UPDATE rxpatm SET "
				+"PatNum     =  "+POut.Long  (rxPatm.PatNum)+", "
				+"RxDate     =  "+POut.Date  (rxPatm.RxDate)+", "
				+"Drug       = '"+POut.String(rxPatm.Drug)+"', "
				+"Sig        = '"+POut.String(rxPatm.Sig)+"', "
				+"Disp       = '"+POut.String(rxPatm.Disp)+"', "
				+"Refills    = '"+POut.String(rxPatm.Refills)+"', "
				+"ProvNum    =  "+POut.Long  (rxPatm.ProvNum)+" "
				+"WHERE CustomerNum = "+POut.Long(rxPatm.CustomerNum)+" AND RxNum = "+POut.Long(rxPatm.RxNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one RxPatm from the database.</summary>
		internal static void Delete(long customerNum,long rxNum){
			string command="DELETE FROM rxpatm "
				+"WHERE CustomerNum = "+POut.Long(customerNum)+" AND RxNum = "+POut.Long(rxNum);
			Db.NonQ(command);
		}

		///<summary>Converts one RxPat object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
		internal static RxPatm ConvertToM(RxPat rxPat){
			RxPatm rxPatm=new RxPatm();
			//CustomerNum cannot be set.  Remains 0.
			rxPatm.RxNum      =rxPat.RxNum;
			rxPatm.PatNum     =rxPat.PatNum;
			rxPatm.RxDate     =rxPat.RxDate;
			rxPatm.Drug       =rxPat.Drug;
			rxPatm.Sig        =rxPat.Sig;
			rxPatm.Disp       =rxPat.Disp;
			rxPatm.Refills    =rxPat.Refills;
			rxPatm.ProvNum    =rxPat.ProvNum;
			return rxPatm;
		}

	}
}