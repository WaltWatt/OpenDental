//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Mobile.Crud{
	internal class MedicationmCrud {
		///<summary>Gets one Medicationm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
		internal static Medicationm SelectOne(long customerNum,long medicationNum){
			string command="SELECT * FROM medicationm "
				+"WHERE CustomerNum = "+POut.Long(customerNum)+" AND MedicationNum = "+POut.Long(medicationNum);
			List<Medicationm> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Medicationm object from the database using a query.</summary>
		internal static Medicationm SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Medicationm> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Medicationm objects from the database using a query.</summary>
		internal static List<Medicationm> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Medicationm> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<Medicationm> TableToList(DataTable table){
			List<Medicationm> retVal=new List<Medicationm>();
			Medicationm medicationm;
			for(int i=0;i<table.Rows.Count;i++) {
				medicationm=new Medicationm();
				medicationm.CustomerNum  = PIn.Long  (table.Rows[i]["CustomerNum"].ToString());
				medicationm.MedicationNum= PIn.Long  (table.Rows[i]["MedicationNum"].ToString());
				medicationm.MedName      = PIn.String(table.Rows[i]["MedName"].ToString());
				medicationm.GenericNum   = PIn.Long  (table.Rows[i]["GenericNum"].ToString());
				medicationm.RxCui        = PIn.Long  (table.Rows[i]["RxCui"].ToString());
				retVal.Add(medicationm);
			}
			return retVal;
		}

		///<summary>Usually set useExistingPK=true.  Inserts one Medicationm into the database.</summary>
		internal static long Insert(Medicationm medicationm,bool useExistingPK){
			if(!useExistingPK) {
				medicationm.MedicationNum=ReplicationServers.GetKey("medicationm","MedicationNum");
			}
			string command="INSERT INTO medicationm (";
			command+="MedicationNum,";
			command+="CustomerNum,MedName,GenericNum,RxCui) VALUES(";
			command+=POut.Long(medicationm.MedicationNum)+",";
			command+=
				     POut.Long  (medicationm.CustomerNum)+","
				+"'"+POut.String(medicationm.MedName)+"',"
				+    POut.Long  (medicationm.GenericNum)+","
				+    POut.Long  (medicationm.RxCui)+")";
			Db.NonQ(command);//There is no autoincrement in the mobile server.
			return medicationm.MedicationNum;
		}

		///<summary>Updates one Medicationm in the database.</summary>
		internal static void Update(Medicationm medicationm){
			string command="UPDATE medicationm SET "
				+"MedName      = '"+POut.String(medicationm.MedName)+"', "
				+"GenericNum   =  "+POut.Long  (medicationm.GenericNum)+", "
				+"RxCui        =  "+POut.Long  (medicationm.RxCui)+" "
				+"WHERE CustomerNum = "+POut.Long(medicationm.CustomerNum)+" AND MedicationNum = "+POut.Long(medicationm.MedicationNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one Medicationm from the database.</summary>
		internal static void Delete(long customerNum,long medicationNum){
			string command="DELETE FROM medicationm "
				+"WHERE CustomerNum = "+POut.Long(customerNum)+" AND MedicationNum = "+POut.Long(medicationNum);
			Db.NonQ(command);
		}

		///<summary>Converts one Medication object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
		internal static Medicationm ConvertToM(Medication medication){
			Medicationm medicationm=new Medicationm();
			//CustomerNum cannot be set.  Remains 0.
			medicationm.MedicationNum=medication.MedicationNum;
			medicationm.MedName      =medication.MedName;
			medicationm.GenericNum   =medication.GenericNum;
			medicationm.RxCui        =medication.RxCui;
			return medicationm;
		}

	}
}